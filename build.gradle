ext {
    airshipProperties = new Properties()
    airshipProperties.load(new FileInputStream("airship.properties"))
    toolsDir = new File("$projectDir/.tools")
    if ( !toolsDir.exists() ) {
        toolsDir.mkdirs()
    }
    componentDir = new File("$projectDir/component")
    if ( !componentDir.exists() ) {
        componentDir.mkdirs()
    }
    rootDir = new File("$projectDir")
    nugetExe = new File("$toolsDir/nuget.exe")
    xamarinComponentExe = new File("$toolsDir/xamarin-component.exe")
    msbuild = "/Library/Frameworks/Mono.framework/Commands/msbuild"
}

task generateDeps {
    doLast() {
        if (!nugetExe.exists()) {
            new URL('https://dist.nuget.org/win-x86-commandline/latest/nuget.exe').withInputStream{
                i -> nugetExe.withOutputStream{ it << i }
            }
        }

        // Download xamarin component if it doesn't exist.
        if (!xamarinComponentExe.exists()) {
            def temp = new File("$toolsDir/xpkg")
            new URL('https://components.xamarin.com/submit/xpkg').withInputStream{
                i -> temp.withOutputStream{ it << i }
            }
            copy {
                from zipTree(temp)
                into "$toolsDir"
            }
            delete temp
        }
    }
}

task buildComponent {
    doLast() {
        exec {
            commandLine "mono", "${xamarinComponentExe}", "package", "$componentDir", "-OutputDirectory", "$buildDir"
        }

        copy {
            from "$componentDir"
            include "*.xam"
            into "$buildDir"
        }
    }
}

// Build nuget pkgs -- can pass in parameters (nuspec files) to specify which
// nupkg files to build
task pkg {
    doLast() {
        def nuspecs = []
        if (project.hasProperty('nuspec')) {
            nuspecs = nuspec.split(',')
        } else {
            nuspecs = [
                "UrbanAirship.nuspec",
                "UrbanAirship.Core.nuspec",
                "UrbanAirship.Android.ADM.nuspec",
                "UrbanAirship.Android.FCM.nuspec",
                "UrbanAirship.Android.GCM.nuspec",
                "UrbanAirship.Portable.nuspec",
                "UrbanAirship.NETStandard.nuspec",
                "AirshipAppExtensions.nuspec"
            ]
        }

        for (nuspec in nuspecs) {
            exec {
                commandLine "mono", "${nugetExe}", "pack", "$nuspec", "-OutputDirectory", "$buildDir"
            }
        }
    }
}
pkg.mustRunAfter('build')

// Create local nuget feed
task createLocalFeed {
    doLast() {
        // get all the nuget packages from the build directory
        def nupkgs = buildDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        }) 

        // add the packages to the local nuget feed
        File localNugetFeed = file("${rootDir}/local-nuget-feed")
        nupkgs.each { nupkg ->
            // add doesn't have a "-force" option, so first remove the nuget package from the local feed
            def nupkgNoExt = nupkg.name.replaceFirst("[.][^.]+\$", "")
            def nupkgID = nupkgNoExt.replaceFirst("[.][0-9][.][0-9][.][0-9]\$", "")
            def nupkgVersion = nupkgNoExt.replaceFirst("^$nupkgID[.]", "")
            File localNugetFeedForThisPackage = file("${localNugetFeed}/${nupkgID}/${nupkgVersion}")
            delete localNugetFeedForThisPackage

            // add the package to the local nuget feed
            exec {
                commandLine "mono", "${nugetExe}", "add", "$nupkg", "-source", "$localNugetFeed" 
            }
        }

        // clear the local nuget cache (so new packages with unchanged versions are used)
        exec {
            commandLine "mono", "${nugetExe}", "locals", "all", "-clear"
        }
        
    }
}
createLocalFeed.dependsOn('build')
createLocalFeed.dependsOn('pkg')

// Sync the version with the version declared in the airship.properties file.
task syncVersion {
    doLast() {
        // Handle nuspec files
        ant.replaceregexp(
            match: "<version>.*</version>",
            replace: "<version>$airshipProperties.libVersion</version>"
        ) {
            fileset(dir: "$projectDir", includes: "*.nuspec")
        }
        // Handle Airship.Portable nuspec special case
        ant.replaceregexp(
            file: "$projectDir/UrbanAirship.Portable.nuspec",
            match: "<dependency id=\"urbanairship\" version=\".*\"/>",
            replace: "<dependency id=\"urbanairship\" version=\"$airshipProperties.libVersion\"/>",
            flags: "g"
        )

        // Handle Airship.NETStandard nuspec special case
        ant.replaceregexp(
            file: "$projectDir/UrbanAirship.NETStandard.nuspec",
            match: "<dependency id=\"urbanairship\" version=\".*\"/>",
            replace: "<dependency id=\"urbanairship\" version=\"$airshipProperties.libVersion\"/>",
            flags: "g"
        )

        // Xamarin component
        ant.replaceregexp(
            file: "$projectDir/component/component.yaml",
            match: "version: \".*\"",
            replace: "version: \"$airshipProperties.libVersion\""
        )
        ant.replaceregexp(
            file: "$projectDir/component/component.yaml",
            match: "urbanairship, Version=.*",
            replace: "urbanairship, Version=$airshipProperties.libVersion",
            flags: "g"
        )

        // Shared assembly info
        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$airshipProperties.libVersion\")]"
        )
    }
}


//--- GLOBAL TASKS ---//

// Clean all
task clean(type: Delete) {
    doLast() {
        delete "$buildDir"

        delete fileTree("$componentDir") { include "*.xam" }
    }
}

// Build all of the projects
task build
build.mustRunAfter('clean')
build.dependsOn('syncVersion')
build.dependsOn('generateDeps')
build.dependsOn(':docs:build',
    ':src:AirshipBindings.iOS:build',
    ':src:AirshipExtensionBindings.iOS:build',
    ':src:AirshipBindings.Android.Core:build',
    ':src:AirshipBindings.Android.ADM:build',
    ':src:AirshipBindings.Android.FCM:build',
    ':src:AirshipBindings.Android.GCM:build',
    ':src:AirshipBindings.NETStandard:build',
    ':src:AirshipBindings.Portable:build')
build.finalizedBy('buildComponent')
