import groovy.xml.*
import org.apache.tools.ant.taskdefs.optional.ReplaceRegExp

plugins {
    id 'org.barfuin.gradle.taskinfo' version '2.1.0'
}

ext {
    airshipProperties = new Properties()
    airshipProperties.load(new FileInputStream("$projectDir/airship.properties"))

    androidVersion = airshipProperties.androidVersion
    androidRevision = airshipProperties.androidRevision
    androidNugetVersion = nugetVersion(androidVersion, androidRevision)

    iosVersion = airshipProperties.iosVersion
    iosRevision = airshipProperties.iosRevision
    iosNugetVersion = nugetVersion(iosVersion, iosRevision)

    crossPlatformVersion = airshipProperties.crossPlatformVersion
    crossPlatformRevision = airshipProperties.crossPlatformRevision
    crossPlatformNugetVersion = nugetVersion(crossPlatformVersion, crossPlatformRevision)

    toolsDir = new File("$projectDir/.tools")
    if ( !toolsDir.exists() ) {
        toolsDir.mkdirs()
    }
    rootDir = new File("$projectDir")
    nugetExe = new File("$toolsDir/nuget.exe")
    if (!nugetExe.exists()) {
        new URL('https://dist.nuget.org/win-x86-commandline/latest/nuget.exe').withInputStream{
            i -> nugetExe.withOutputStream{ it << i }
        }
    }
    msbuild = "/Library/Frameworks/Mono.framework/Commands/msbuild"
}

tasks.register('pack') {
    dependsOn('build')

    // Pack all Android bindings generated via Binderator
    dependsOn(':binderator:pack')
    // Pack all iOS bindings
    dependsOn(':src:AirshipBindings.iOS.common:pack')
    // Pack .net common libraries
    dependsOn(':src:Airship.Net:pack')
    dependsOn(':src:Airship.Net.MessageCenter:pack')
}

tasks.register('buildSample') {
    dependsOn(':MauiSample:buildSample')
}

// Create local nuget feed
tasks.register('createLocalFeed') {
    dependsOn('pack')

    doLast() {
        // add doesn't have a "-force" option, so first remove all the nuget packages from the local feed
        File localNugetFeed = file("${rootDir}/local-nuget-feed")
        localNugetFeed.deleteDir()

        // get all the nuget packages from the build directory
        def nupkgs = buildDir.listFiles(new FilenameFilter() {
            boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // add the packages to the local nuget feed
        nupkgs.each { nupkg ->
            // add the package to the local nuget feed
            exec {
                commandLine "nuget", "add", "$nupkg", "-source", "$localNugetFeed"
            }
        }

        // clear the local nuget cache (so new packages with unchanged versions are used)
        exec {
            commandLine "nuget", "locals", "all", "-clear"
        }
    }
}

// Sync the nuspec and shared assembly versions with the version declared in the airship.properties file.
tasks.register('syncRootVersion') {
    dependsOn('syncDirectoryBuildProps')

    doFirst() {
        // Shared assembly info
        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.CrossPlatform.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$crossPlatformNugetVersion\")]"
        )

        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.Common.cs",
            match: "UACrossPlatformVersion (.*)]",
            replace: "UACrossPlatformVersion (\"$crossPlatformNugetVersion\")]"
        )
    }
}

// Sync subproject versions with the version declared in the airship.properties file.
tasks.register('syncVersion') {
    mustRunAfter('clean')
    dependsOn('syncRootVersion',
            ':binderator:syncVersion',
            ':src:AirshipBindings.iOS.common:syncVersion'
    )
}

// Sync Directory.Build.props with the version declared in the airship.properties file.
tasks.register('syncDirectoryBuildProps') {
    def outputFile = file("Directory.Build.props")

    inputs.property("androidVersion", androidVersion)
    inputs.property("androidRevision", androidRevision)
    inputs.property("iosVersion", iosVersion)
    inputs.property("iosRevision", iosRevision)
    inputs.property("crossPlatformVersion", crossPlatformVersion)
    inputs.property("crossPlatformRevision", crossPlatformRevision)

    outputs.file(outputFile)

    doLast {
        outputFile.withWriter { writer ->
            def xml = new MarkupBuilder(new IndentPrinter(writer, "  ", true))
            xml.doubleQuotes = true
            xml.mkp.yieldUnescaped("<!-- THIS FILE IS AUTO-GENERATED. DO NOT MODIFY. -->\n")
            xml.mkp.yieldUnescaped("<!-- The `syncRootVersion` gradle task updates this file based on the contents of `airship.properties`. -->\n\n")

            xml.Project() {
                mkp.yieldUnescaped("\n  <!-- Versions -->")

                PropertyGroup {
                    mkp.yieldUnescaped("\n    <!-- Airship native SDK versions -->")
                    AirshipAndroidVersion(androidVersion)
                    AirshipAndroidNugetVersion(androidNugetVersion)

                    mkp.yieldUnescaped("\n")
                    AirshipIosVersion(iosVersion)
                    AirshipIosNugetVersion(iosNugetVersion)

                    mkp.yieldUnescaped("\n\n    <!-- Airship.Net version -->")
                    AirshipCrossPlatformVersion(crossPlatformVersion)
                    AirshipCrossPlatformNugetVersion(crossPlatformNugetVersion)
                }

                mkp.yieldUnescaped("\n\n  <!-- Nuget packaging metadata -->")
                PropertyGroup {
                    Owners('urbanairship')
                    Company('Airship, Inc.')
                    AssemblyCompany('Airship, Inc.')
                    PackageTags('airship, urbanairship')
                    Copyright('Â©Airship. All rights reserved.')
                    PackageProjectUrl('https://github.com/urbanairship/urbanairship-xamarin/')
                    PackageLicenseExpression('Apache-2.0')
                    PackageRequireLicenseAcceptance('false')
                    AllowedOutputExtensionsInPackageBuildOutputFolder('$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb')
                }
            }
        }
    }
}

tasks.register('packageDocs') {
    dependsOn('build', 'docs:package')
}

tasks.register('publishToStaging', PublishTask) {
    dependsOn('pack')
    nugetRepoURL = "https://int.nugettest.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_STAGING_API_KEY"
}

tasks.register('publishToProduction', PublishTask) {
    dependsOn('pack')
    nugetRepoURL = "https://www.nuget.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_PRODUCTION_API_KEY"
}

//--- GLOBAL TASKS ---//

// Clean all
tasks.register('clean', Delete) {
    delete fileTree(buildDir).matching { include "*" }
}

// Build the plugin
tasks.register('build') {
    mustRunAfter('clean')

    dependsOn('syncVersion',
            ':binderator:build',
            ':src:AirshipBindings.iOS.common:build',
            ':src:Airship.Net:build',
            ':src:Airship.Net.MessageCenter:build')

    doFirst() {
        mkdir project.buildDir
    }
}

tasks.register('getVersion') {
    doLast {
        println crossPlatformNugetVersion
    }
}

//--- CUSTOM TASKS ---//

class PublishTask extends DefaultTask {
    @InputDirectory
    @Optional
    File nupkgDir = getProject().buildDir

    @Input
    @Optional
    File nugetExec = getProject().nugetExe

    @Input
    String nugetRepoURL

    @Input
    String nugetApiKey

    @TaskAction
    def publish() {
        // get all the nuget packages from the build directory
        def nupkgs = nupkgDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // publish the packages to nuget
        nupkgs.each { nupkg ->
            // publish the package
            getProject().exec {
                commandLine "nuget", "push", "$nupkg", "-Source", "${nugetRepoURL}", "-ApiKey", "${nugetApiKey}", "-SkipDuplicate", "-NonInteractive"
            }
        }
    }
}

//--- HELPERS ---//

static def nugetVersion(version, revision) {
    return (revision != null && revision != "0")
            ? "${version}.${revision}"
            : "${version}"
}
