plugins {
    id 'org.barfuin.gradle.taskinfo' version '2.1.0'
}

ext {
    airshipProperties = new Properties()
    airshipProperties.load(new FileInputStream("$projectDir/airship.properties"))
    toolsDir = new File("$projectDir/.tools")
    if ( !toolsDir.exists() ) {
        toolsDir.mkdirs()
    }
    rootDir = new File("$projectDir")
    nugetExe = new File("$toolsDir/nuget.exe")
    if (!nugetExe.exists()) {
        new URL('https://dist.nuget.org/win-x86-commandline/latest/nuget.exe').withInputStream{
            i -> nugetExe.withOutputStream{ it << i }
        }
    }
    msbuild = "/Library/Frameworks/Mono.framework/Commands/msbuild"
}

task pack {
  // Pack all Android bindings generated via Binderator
  dependsOn(':binderator:pack')
  // Pack all iOS bindings
  dependsOn(':src:AirshipBindings.iOS.common:pack')
 // Pack .net common library
  dependsOn(':src:Airship.Net:pack')
}

// Create local nuget feed
task createLocalFeed {
    dependsOn('pack')
    doLast() {
        // add doesn't have a "-force" option, so first remove all the nuget packages from the local feed
        File localNugetFeed = file("${rootDir}/local-nuget-feed")
        localNugetFeed.deleteDir()

        // get all the nuget packages from the build directory
        def nupkgs = buildDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // add the packages to the local nuget feed
        nupkgs.each { nupkg ->
            // add the package to the local nuget feed
            exec {
                commandLine "nuget", "add", "$nupkg", "-source", "$localNugetFeed"
            }
        }

        // clear the local nuget cache (so new packages with unchanged versions are used)
        exec {
            commandLine "nuget", "locals", "all", "-clear"
        }
    }
}

// Sync the nuspec and shared assembly versions with the version declared in the airship.properties file.
task syncRootVersion {
    doLast() {
        def androidNugetVersion = airshipProperties.androidVersion
        if (airshipProperties['androidPackageVersion']) {
            androidNugetVersion = "${airshipProperties.androidVersion}.${airshipProperties.androidPackageVersion}"
        }

        def iosNugetVersion = airshipProperties.iosNugetVersion
        if (airshipProperties['iosPackageVersion']) {
            iosNugetVersion = "${airshipProperties.iosNugetVersion}.${airshipProperties.iosPackageVersion}"
        }

        // Update Android binderator config
        exec {
            commandLine "./binderator/build.sh", "-t=update-sdk-version", "--sdk=$androidNugetVersion"
        }

        // Shared assembly info
        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.CrossPlatform.cs",
            match: "AssemblyVersion (.*)]",
            replace: "AssemblyVersion (\"$airshipProperties.crossPlatformVersion\")]"
        )

        ant.replaceregexp(
            file: "$projectDir/src/SharedAssemblyInfo.Common.cs",
            match: "UACrossPlatformVersion (.*)]",
            replace: "UACrossPlatformVersion (\"$airshipProperties.crossPlatformVersion\")]"
        )
    }
}

// Sync subproject versions with the version declared in the airship.properties file.
task syncVersion() {
    mustRunAfter('clean')
    dependsOn('syncRootVersion')
    dependsOn(':src:AirshipBindings.iOS.common:syncVersion')
}

class PublishTask extends DefaultTask {
    @InputDirectory
    @Optional
    def File nupkgDir = getProject().buildDir

    @Input
    @Optional
    def File nugetExec = getProject().nugetExe

    @Input
    def String nugetRepoURL

    @Input
    def String nugetApiKey

    @TaskAction
    def publish() {
        // get all the nuget packages from the build directory
        def nupkgs = nupkgDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".nupkg");
            }
        })

        // publish the packages to nuget
        nupkgs.each { nupkg ->
            // publish the package
            getProject().exec {
                ignoreExitValue true
                commandLine "mono", "${nugetExec}", "push", "$nupkg", "-source", "${nugetRepoURL}", "-apikey", "${nugetApiKey}"
            }
        }
    }
}

task publishToStaging(type:PublishTask) {
    dependsOn('pack')
    nugetRepoURL = "https://int.nugettest.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_STAGING_API_KEY"
}

task publishToProduction(type:PublishTask) {
    dependsOn('pack')
    nugetRepoURL = "https://www.nuget.org/api/v2/package"
    nugetApiKey = "$System.env.NUGET_PRODUCTION_API_KEY"
}

//--- GLOBAL TASKS ---//

// Clean all
task clean(type: Delete) {
    dependsOn(':binderator:clean')
    dependsOn(':src:AirshipBindings.iOS.common:clean')
    dependsOn(':src:Airship.Net:clean')
    doLast() {
        project.delete(files("$buildDir"))
    }
}

// Build the plugin
task build() {
  mustRunAfter('clean', 'syncVersion')

  dependsOn(
    'syncVersion',
    ':docs:build',
    ':binderator:build',
    ':src:AirshipBindings.iOS.common:build',
    ':src:Airship.Net:build'
  )

  doFirst() {
    mkdir project.buildDir
  }
}

task getVersion() {
    doLast {
        println airshipProperties.crossPlatformVersion
    }
}
