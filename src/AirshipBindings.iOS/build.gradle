ext {
    currentDiff = new File("$projectDir/current_diff.patch")
    pastDiff = new File("$projectDir/past_diff.patch")
    diffOfDiffs = new File("$projectDir/diff_of_diffs.patch")

    pod = 'UrbanAirship-iOS-SDK'
    tempBindingsFolder = new File("$buildDir/bindings")

    projectApiDefinition = new File("$projectDir/ApiDefinition.cs")
    genApiDefinition = new File("$tempBindingsFolder/$pod/Binding/AirshipKit_ApiDefinitions.cs")


}

task clean(type: Delete) << {
    delete "$projectDir/bin"
    delete "$projectDir/obj"
    delete "$buildDir"
}

task generateBindings << {
    def currentDir = new File("$tempBindingsFolder/$pod")
    if (!currentDir.exists()) {
        currentDir.mkdirs()
    }

    // Get the pod
    def argv = ['pod', 'init', 'ios', 'UrbanAirship-iOS-SDK']
    exec {
        workingDir "$currentDir"
        executable "sharpie"
        args argv
    }

    // TODO: As of 03/23/2017, Xamarin cannot pull down specific pod
    // versions. Have to replace the version and run pod install.
    ant.replaceregexp(
        file: "$currentDir/Podfile",
        match: "pod '$pod'.*",
        replace: "pod '$pod', '$airshipProperties.iosVersion'"
    )

    exec {
        workingDir "$currentDir"
        executable "pod"
        args "install"
    }

    // Bind the pod
    argv = ['pod', 'bind']
    exec {
        workingDir "$currentDir"
        executable "sharpie"
        args argv
    }

    // Generate the initial diff
    exec {
        commandLine "diff", "$genApiDefinition", "$projectApiDefinition"
        standardOutput new FileOutputStream("$currentDiff")
        ignoreExitValue true
    }
}

task syncVersion << {
    ant.replaceregexp(
        file: "$rootDir/Cartfile",
        match: "\"urbanairship/ios-library\" == .*",
        replace: "\"urbanairship/ios-library\" == $airshipProperties.iosVersion"
    )

    //currentDiff.renameTo(pastDiff)
    generateBindings.execute()

    exec {
        commandLine "diff", "$pastDiff", "$currentDiff"
        standardOutput new FileOutputStream("$diffOfDiffs")
        ignoreExitValue true
    }

    exec {
        commandLine "patch", "$projectApiDefinition", "$currentDiff"
    }

    exec {
        commandLine "patch", "-r", "$projectApiDefinition", "$pastDiff"
        //ignoreExitValue true
    }
    //delete pastDiff
    //delete diffOfDiffs
}

task build << {
    exec {
        executable "carthage"
        args ["update"]
    }

    exec {
        commandLine "strip", "-S", "-x", "../../Carthage/Build/iOS/AirshipKit.framework/AirshipKit"
    }

    def argv = ["${nugetExe}", "restore", "AirshipBindings.iOS.sln"]
    exec {
        executable "mono"
        args argv
    }

    argv = ["build", "-c:Release", "AirshipBindings.iOS.sln"]
    exec {
        executable "${mdTool}"
        args argv
    }
}
build.dependsOn('syncVersion')
