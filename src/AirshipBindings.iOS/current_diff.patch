1,4d0
< /*
<  Copyright 2017 Urban Airship and Contributors
< */
< 
5a2,4
> using AirshipKit;
> using CoreData;
> using CoreGraphics;
12c11,1701
< namespace UrbanAirship {
---
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern double AirshipKitVersionNumber;
> 	[Field ("AirshipKitVersionNumber", "__Internal")]
> 	double AirshipKitVersionNumber { get; }
> 
> 	// extern const unsigned char [] AirshipKitVersionString;
> 	[Field ("AirshipKitVersionString", "__Internal")]
> 	byte[] AirshipKitVersionString { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAJSONSerializationErrorDomain;
> 	[Field ("UAJSONSerializationErrorDomain", "__Internal")]
> 	NSString UAJSONSerializationErrorDomain { get; }
> }
> 
> // @interface UAAdditions (NSJSONSerialization)
> [Category]
> [BaseType (typeof(NSJsonSerialization))]
> interface NSJSONSerialization_UAAdditions
> {
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject;
> 	[Static]
> 	[Export ("stringWithObject:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject);
> 
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("stringWithObject:error:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject, [NullAllowed] out NSError error);
> 
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject acceptingFragments:(BOOL)acceptingFragments;
> 	[Static]
> 	[Export ("stringWithObject:acceptingFragments:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject, bool acceptingFragments);
> 
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject acceptingFragments:(BOOL)acceptingFragments error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("stringWithObject:acceptingFragments:error:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject, bool acceptingFragments, [NullAllowed] out NSError error);
> 
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject options:(NSJSONWritingOptions)opt;
> 	[Static]
> 	[Export ("stringWithObject:options:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject, NSJSONWritingOptions opt);
> 
> 	// +(NSString * _Nullable)stringWithObject:(id _Nonnull)jsonObject options:(NSJSONWritingOptions)opt error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("stringWithObject:options:error:")]
> 	[return: NullAllowed]
> 	string StringWithObject (NSObject jsonObject, NSJSONWritingOptions opt, [NullAllowed] out NSError error);
> 
> 	// +(id _Nullable)objectWithString:(NSString * _Nonnull)jsonString;
> 	[Static]
> 	[Export ("objectWithString:")]
> 	[return: NullAllowed]
> 	NSObject ObjectWithString (string jsonString);
> 
> 	// +(id _Nullable)objectWithString:(NSString * _Nonnull)jsonString options:(NSJSONReadingOptions)opt;
> 	[Static]
> 	[Export ("objectWithString:options:")]
> 	[return: NullAllowed]
> 	NSObject ObjectWithString (string jsonString, NSJSONReadingOptions opt);
> 
> 	// +(id _Nullable)objectWithString:(NSString * _Nonnull)jsonString options:(NSJSONReadingOptions)opt error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("objectWithString:options:error:")]
> 	[return: NullAllowed]
> 	NSObject ObjectWithString (string jsonString, NSJSONReadingOptions opt, [NullAllowed] out NSError error);
> }
> 
> // @interface UAAdditions (NSManagedObjectContext)
> [Category]
> [BaseType (typeof(NSManagedObjectContext))]
> interface NSManagedObjectContext_UAAdditions
> {
> 	// +(instancetype)managedObjectContextForModelURL:(NSURL *)modelURL concurrencyType:(NSManagedObjectContextConcurrencyType)concurrencyType storeName:(NSString *)storeName;
> 	[Static]
> 	[Export ("managedObjectContextForModelURL:concurrencyType:storeName:")]
> 	NSManagedObjectContext ManagedObjectContextForModelURL (NSUrl modelURL, NSManagedObjectContextConcurrencyType concurrencyType, string storeName);
> }
> 
> // @interface UAAdditions (NSOperationQueue)
> [Category]
> [BaseType (typeof(NSOperationQueue))]
> interface NSOperationQueue_UAAdditions
> {
> 	// -(BOOL)addBackgroundOperation:(NSOperation *)operation delay:(NSTimeInterval)delay;
> 	[Export ("addBackgroundOperation:delay:")]
> 	bool AddBackgroundOperation (NSOperation operation, double delay);
> }
> 
> // @interface UALocalizationAdditions (NSString)
> [Category]
> [BaseType (typeof(NSString))]
> interface NSString_UALocalizationAdditions
> {
> 	// -(NSString *)localizedStringWithTable:(NSString *)table defaultValue:(NSString *)defaultValue;
> 	[Export ("localizedStringWithTable:defaultValue:")]
> 	string LocalizedStringWithTable (string table, string defaultValue);
> 
> 	// -(NSString *)localizedStringWithTable:(NSString *)table;
> 	[Export ("localizedStringWithTable:")]
> 	string LocalizedStringWithTable (string table);
> 
> 	// -(NSString *)localizedStringWithTable:(NSString *)table fallbackLocale:(NSString *)fallbackLocale;
> 	[Export ("localizedStringWithTable:fallbackLocale:")]
> 	string LocalizedStringWithTable (string table, string fallbackLocale);
> }
> 
> // @interface UAURLEncoding (NSString)
> [Category]
> [BaseType (typeof(NSString))]
> interface NSString_UAURLEncoding
> {
> 	// -(NSString * _Nullable)urlDecodedStringWithEncoding:(NSStringEncoding)encoding;
> 	[Export ("urlDecodedStringWithEncoding:")]
> 	[return: NullAllowed]
> 	string UrlDecodedStringWithEncoding (nuint encoding);
> 
> 	// -(NSString * _Nullable)urlEncodedStringWithEncoding:(NSStringEncoding)encoding;
> 	[Export ("urlEncodedStringWithEncoding:")]
> 	[return: NullAllowed]
> 	string UrlEncodedStringWithEncoding (nuint encoding);
> }
> 
> // @interface UAEvent : NSObject
> [BaseType (typeof(NSObject))]
> interface UAEvent
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull time;
> 	[Export ("time")]
> 	string Time { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull eventID;
> 	[Export ("eventID")]
> 	string EventID { get; }
> 
> 	// @property (readonly, nonatomic, strong) NSDictionary * _Nonnull data;
> 	[Export ("data", ArgumentSemantic.Strong)]
> 	NSDictionary Data { get; }
> 
> 	// @property (readonly, nonatomic) NSString * _Nonnull eventType;
> 	[Export ("eventType")]
> 	string EventType { get; }
> 
> 	// -(BOOL)isValid;
> 	[Export ("isValid")]
> 	[Verify (MethodToProperty)]
> 	bool IsValid { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern const NSUInteger UACustomEventCharacterLimit;
> 	[Field ("UACustomEventCharacterLimit", "__Internal")]
> 	nuint UACustomEventCharacterLimit { get; }
> 
> 	// extern const NSUInteger UACustomEventMaxPropertiesCount;
> 	[Field ("UACustomEventMaxPropertiesCount", "__Internal")]
> 	nuint UACustomEventMaxPropertiesCount { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventNameKey;
> 	[Field ("UACustomEventNameKey", "__Internal")]
> 	NSString UACustomEventNameKey { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventValueKey;
> 	[Field ("UACustomEventValueKey", "__Internal")]
> 	NSString UACustomEventValueKey { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventPropertiesKey;
> 	[Field ("UACustomEventPropertiesKey", "__Internal")]
> 	NSString UACustomEventPropertiesKey { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventTransactionIDKey;
> 	[Field ("UACustomEventTransactionIDKey", "__Internal")]
> 	NSString UACustomEventTransactionIDKey { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventInteractionIDKey;
> 	[Field ("UACustomEventInteractionIDKey", "__Internal")]
> 	NSString UACustomEventInteractionIDKey { get; }
> 
> 	// extern NSString *const _Nonnull UACustomEventInteractionTypeKey;
> 	[Field ("UACustomEventInteractionTypeKey", "__Internal")]
> 	NSString UACustomEventInteractionTypeKey { get; }
> }
> 
> // @interface UACustomEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UACustomEvent
> {
> 	// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName;
> 	[Static]
> 	[Export ("eventWithName:")]
> 	UACustomEvent EventWithName (string eventName);
> 
> 	// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName valueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("eventWithName:valueFromString:")]
> 	UACustomEvent EventWithName (string eventName, [NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName value:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("eventWithName:value:")]
> 	UACustomEvent EventWithName (string eventName, [NullAllowed] NSNumber eventValue);
> 
> 	// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
> 	[NullAllowed, Export ("eventValue", ArgumentSemantic.Strong)]
> 	NSDecimalNumber EventValue { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull eventName;
> 	[Export ("eventName")]
> 	string EventName { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable interactionID;
> 	[NullAllowed, Export ("interactionID")]
> 	string InteractionID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable interactionType;
> 	[NullAllowed, Export ("interactionType")]
> 	string InteractionType { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable transactionID;
> 	[NullAllowed, Export ("transactionID")]
> 	string TransactionID { get; set; }
> 
> 	// @property (readonly, copy, nonatomic) NSDictionary * _Nonnull properties;
> 	[Export ("properties", ArgumentSemantic.Copy)]
> 	NSDictionary Properties { get; }
> 
> 	// -(void)setInteractionFromMessage:(UAInboxMessage * _Nonnull)message;
> 	[Export ("setInteractionFromMessage:")]
> 	void SetInteractionFromMessage (UAInboxMessage message);
> 
> 	// -(void)setBoolProperty:(BOOL)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setBoolProperty:forKey:")]
> 	void SetBoolProperty (bool value, string key);
> 
> 	// -(void)setStringProperty:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setStringProperty:forKey:")]
> 	void SetStringProperty (string value, string key);
> 
> 	// -(void)setNumberProperty:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setNumberProperty:forKey:")]
> 	void SetNumberProperty (NSNumber value, string key);
> 
> 	// -(void)track;
> 	[Export ("track")]
> 	void Track ();
> 
> 	// -(void)setStringArrayProperty:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setStringArrayProperty:forKey:")]
> 	void SetStringArrayProperty (string[] value, string key);
> }
> 
> // @interface UAAccountEventTemplate : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAccountEventTemplate
> {
> 	// +(instancetype _Nonnull)registeredTemplate;
> 	[Static]
> 	[Export ("registeredTemplate")]
> 	UAAccountEventTemplate RegisteredTemplate ();
> 
> 	// +(instancetype _Nonnull)registeredTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("registeredTemplateWithValueFromString:")]
> 	UAAccountEventTemplate RegisteredTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)registeredTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("registeredTemplateWithValue:")]
> 	UAAccountEventTemplate RegisteredTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
> 	[NullAllowed, Export ("eventValue", ArgumentSemantic.Strong)]
> 	NSDecimalNumber EventValue { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable transactionID;
> 	[NullAllowed, Export ("transactionID")]
> 	string TransactionID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable category;
> 	[NullAllowed, Export ("category")]
> 	string Category { get; set; }
> 
> 	// -(UACustomEvent * _Nonnull)createEvent;
> 	[Export ("createEvent")]
> 	[Verify (MethodToProperty)]
> 	UACustomEvent CreateEvent { get; }
> }
> 
> // @interface UAActionResult : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionResult
> {
> 	// @property (readonly, nonatomic, strong) id _Nullable value;
> 	[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
> 	NSObject Value { get; }
> 
> 	// @property (readonly, assign, nonatomic) UAActionFetchResult fetchResult;
> 	[Export ("fetchResult", ArgumentSemantic.Assign)]
> 	UAActionFetchResult FetchResult { get; }
> 
> 	// @property (readonly, nonatomic, strong) NSError * _Nullable error;
> 	[NullAllowed, Export ("error", ArgumentSemantic.Strong)]
> 	NSError Error { get; }
> 
> 	// @property (readonly, assign, nonatomic) UAActionStatus status;
> 	[Export ("status", ArgumentSemantic.Assign)]
> 	UAActionStatus Status { get; }
> 
> 	// +(instancetype _Nonnull)resultWithValue:(id _Nullable)value;
> 	[Static]
> 	[Export ("resultWithValue:")]
> 	UAActionResult ResultWithValue ([NullAllowed] NSObject value);
> 
> 	// +(instancetype _Nonnull)resultWithValue:(id _Nullable)result withFetchResult:(UAActionFetchResult)fetchResult;
> 	[Static]
> 	[Export ("resultWithValue:withFetchResult:")]
> 	UAActionResult ResultWithValue ([NullAllowed] NSObject result, UAActionFetchResult fetchResult);
> 
> 	// +(instancetype _Nonnull)emptyResult;
> 	[Static]
> 	[Export ("emptyResult")]
> 	UAActionResult EmptyResult ();
> 
> 	// +(instancetype _Nonnull)resultWithError:(NSError * _Nonnull)error;
> 	[Static]
> 	[Export ("resultWithError:")]
> 	UAActionResult ResultWithError (NSError error);
> 
> 	// +(instancetype _Nonnull)resultWithError:(NSError * _Nonnull)error withFetchResult:(UAActionFetchResult)fetchResult;
> 	[Static]
> 	[Export ("resultWithError:withFetchResult:")]
> 	UAActionResult ResultWithError (NSError error, UAActionFetchResult fetchResult);
> }
> 
> // @interface UAActionArguments : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionArguments
> {
> 	// +(instancetype _Nonnull)argumentsWithValue:(id _Nullable)value withSituation:(UASituation)situation;
> 	[Static]
> 	[Export ("argumentsWithValue:withSituation:")]
> 	UAActionArguments ArgumentsWithValue ([NullAllowed] NSObject value, UASituation situation);
> 
> 	// +(instancetype _Nonnull)argumentsWithValue:(id _Nullable)value withSituation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata;
> 	[Static]
> 	[Export ("argumentsWithValue:withSituation:metadata:")]
> 	UAActionArguments ArgumentsWithValue ([NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata);
> 
> 	// @property (readonly, assign, nonatomic) UASituation situation;
> 	[Export ("situation", ArgumentSemantic.Assign)]
> 	UASituation Situation { get; }
> 
> 	// @property (readonly, nonatomic, strong) id _Nullable value;
> 	[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
> 	NSObject Value { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSDictionary * _Nullable metadata;
> 	[NullAllowed, Export ("metadata", ArgumentSemantic.Copy)]
> 	NSDictionary Metadata { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAActionMetadataWebViewKey;
> 	[Field ("UAActionMetadataWebViewKey", "__Internal")]
> 	NSString UAActionMetadataWebViewKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataPushPayloadKey;
> 	[Field ("UAActionMetadataPushPayloadKey", "__Internal")]
> 	NSString UAActionMetadataPushPayloadKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataForegroundPresentationKey;
> 	[Field ("UAActionMetadataForegroundPresentationKey", "__Internal")]
> 	NSString UAActionMetadataForegroundPresentationKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataInboxMessageKey;
> 	[Field ("UAActionMetadataInboxMessageKey", "__Internal")]
> 	NSString UAActionMetadataInboxMessageKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataUserNotificationActionIDKey;
> 	[Field ("UAActionMetadataUserNotificationActionIDKey", "__Internal")]
> 	NSString UAActionMetadataUserNotificationActionIDKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataResponseInfoKey;
> 	[Field ("UAActionMetadataResponseInfoKey", "__Internal")]
> 	NSString UAActionMetadataResponseInfoKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionMetadataRegisteredName;
> 	[Field ("UAActionMetadataRegisteredName", "__Internal")]
> 	NSString UAActionMetadataRegisteredName { get; }
> }
> 
> // typedef BOOL (^UAActionPredicate)(UAActionArguments * _Nonnull);
> delegate bool UAActionPredicate (UAActionArguments arg0);
> 
> // typedef void (^UAActionCompletionHandler)(UAActionResult * _Nonnull);
> delegate void UAActionCompletionHandler (UAActionResult arg0);
> 
> // typedef void (^UAActionBlock)(UAActionArguments * _Nonnull, UAActionCompletionHandler _Nonnull);
> delegate void UAActionBlock (UAActionArguments arg0, UAActionCompletionHandler arg1);
> 
> // @interface UAAction : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAction
> {
> 	// -(BOOL)acceptsArguments:(UAActionArguments * _Nonnull)arguments;
> 	[Export ("acceptsArguments:")]
> 	bool AcceptsArguments (UAActionArguments arguments);
> 
> 	// -(void)willPerformWithArguments:(UAActionArguments * _Nonnull)arguments;
> 	[Export ("willPerformWithArguments:")]
> 	void WillPerformWithArguments (UAActionArguments arguments);
> 
> 	// -(void)didPerformWithArguments:(UAActionArguments * _Nonnull)arguments withResult:(UAActionResult * _Nonnull)result;
> 	[Export ("didPerformWithArguments:withResult:")]
> 	void DidPerformWithArguments (UAActionArguments arguments, UAActionResult result);
> 
> 	// -(void)performWithArguments:(UAActionArguments * _Nonnull)arguments completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
> 	[Export ("performWithArguments:completionHandler:")]
> 	void PerformWithArguments (UAActionArguments arguments, UAActionCompletionHandler completionHandler);
> 
> 	// +(instancetype _Nonnull)actionWithBlock:(UAActionBlock _Nonnull)actionBlock;
> 	[Static]
> 	[Export ("actionWithBlock:")]
> 	UAAction ActionWithBlock (UAActionBlock actionBlock);
> 
> 	// +(instancetype _Nonnull)actionWithBlock:(UAActionBlock _Nonnull)actionBlock acceptingArguments:(UAActionPredicate _Nullable)predicateBlock;
> 	[Static]
> 	[Export ("actionWithBlock:acceptingArguments:")]
> 	UAAction ActionWithBlock (UAActionBlock actionBlock, [NullAllowed] UAActionPredicate predicateBlock);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAActionOperatorErrorDomain;
> 	[Field ("UAActionOperatorErrorDomain", "__Internal")]
> 	NSString UAActionOperatorErrorDomain { get; }
> }
> 
> // typedef void (^UAActionPreExecutionBlock)(UAActionArguments * _Nonnull);
> delegate void UAActionPreExecutionBlock (UAActionArguments arg0);
> 
> // typedef void (^UAActionPostExecutionBlock)(UAActionArguments * _Nonnull, UAActionResult * _Nonnull);
> delegate void UAActionPostExecutionBlock (UAActionArguments arg0, UAActionResult arg1);
> 
> // typedef UAActionResult * _Nonnull (^UAActionFoldResultsBlock)(UAActionResult * _Nonnull, UAActionResult * _Nonnull);
> delegate UAActionResult UAActionFoldResultsBlock (UAActionResult arg0, UAActionResult arg1);
> 
> // typedef UAActionArguments * _Nonnull (^UAActionMapArgumentsBlock)(UAActionArguments * _Nonnull);
> delegate UAActionArguments UAActionMapArgumentsBlock (UAActionArguments arg0);
> 
> // typedef UAAction * _Nonnull (^UAActionBindBlock)(UAActionBlock _Nonnull, UAActionPredicate _Nonnull);
> delegate UAAction UAActionBindBlock (UAActionBlock arg0, UAActionPredicate arg1);
> 
> // typedef UAActionBlock _Nonnull (^UAActionLiftBlock)(UAActionBlock _Nonnull);
> delegate UAActionBlock UAActionLiftBlock (UAActionBlock arg0);
> 
> // typedef UAActionPredicate _Nonnull (^UAActionPredicateLiftBlock)(UAActionPredicate _Nonnull);
> delegate UAActionPredicate UAActionPredicateLiftBlock (UAActionPredicate arg0);
> 
> // @interface Operators (UAAction)
> [Category]
> [BaseType (typeof(UAAction))]
> interface UAAction_Operators
> {
> 	// -(UAAction * _Nonnull)bind:(UAActionBindBlock _Nonnull)bindBlock;
> 	[Export ("bind:")]
> 	UAAction Bind (UAActionBindBlock bindBlock);
> 
> 	// -(UAAction * _Nonnull)lift:(UAActionLiftBlock _Nonnull)actionLiftBlock transformingPredicate:(UAActionPredicateLiftBlock _Nonnull)predicateLiftBlock;
> 	[Export ("lift:transformingPredicate:")]
> 	UAAction Lift (UAActionLiftBlock actionLiftBlock, UAActionPredicateLiftBlock predicateLiftBlock);
> 
> 	// -(UAAction * _Nonnull)lift:(UAActionLiftBlock _Nonnull)liftBlock;
> 	[Export ("lift:")]
> 	UAAction Lift (UAActionLiftBlock liftBlock);
> 
> 	// -(UAAction * _Nonnull)continueWith:(UAAction * _Nonnull)continuationAction;
> 	[Export ("continueWith:")]
> 	UAAction ContinueWith (UAAction continuationAction);
> 
> 	// -(UAAction * _Nonnull)filter:(UAActionPredicate _Nonnull)filterBlock;
> 	[Export ("filter:")]
> 	UAAction Filter (UAActionPredicate filterBlock);
> 
> 	// -(UAAction * _Nonnull)map:(UAActionMapArgumentsBlock _Nonnull)mapArgumentsBlock;
> 	[Export ("map:")]
> 	UAAction Map (UAActionMapArgumentsBlock mapArgumentsBlock);
> 
> 	// -(UAAction * _Nonnull)preExecution:(UAActionPreExecutionBlock _Nonnull)preExecutionBlock;
> 	[Export ("preExecution:")]
> 	UAAction PreExecution (UAActionPreExecutionBlock preExecutionBlock);
> 
> 	// -(UAAction * _Nonnull)postExecution:(UAActionPostExecutionBlock _Nonnull)postExecutionBlock;
> 	[Export ("postExecution:")]
> 	UAAction PostExecution (UAActionPostExecutionBlock postExecutionBlock);
> }
> 
> // typedef void (^UAJavaScriptDelegateCompletionHandler)(NSString * _Nullable);
> delegate void UAJavaScriptDelegateCompletionHandler ([NullAllowed] string arg0);
> 
> // @protocol UAJavaScriptDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAJavaScriptDelegate
> {
> 	// @required -(void)callWithData:(UAWebViewCallData * _Nonnull)data withCompletionHandler:(UAJavaScriptDelegateCompletionHandler _Nonnull)completionHandler;
> 	[Abstract]
> 	[Export ("callWithData:withCompletionHandler:")]
> 	void WithCompletionHandler (UAWebViewCallData data, UAJavaScriptDelegateCompletionHandler completionHandler);
> }
> 
> // @interface UAActionJSDelegate : NSObject <UAJavaScriptDelegate>
> [BaseType (typeof(NSObject))]
> interface UAActionJSDelegate : IUAJavaScriptDelegate
> {
> }
> 
> // @interface UAActionRegistryEntry : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionRegistryEntry
> {
> 	// @property (nonatomic, strong) UAAction * _Nonnull action;
> 	[Export ("action", ArgumentSemantic.Strong)]
> 	UAAction Action { get; set; }
> 
> 	// @property (copy, nonatomic) UAActionPredicate _Nullable predicate;
> 	[NullAllowed, Export ("predicate", ArgumentSemantic.Copy)]
> 	UAActionPredicate Predicate { get; set; }
> 
> 	// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull names;
> 	[Export ("names")]
> 	string[] Names { get; }
> 
> 	// -(UAAction * _Nonnull)actionForSituation:(UASituation)situation;
> 	[Export ("actionForSituation:")]
> 	UAAction ActionForSituation (UASituation situation);
> 
> 	// +(instancetype _Nonnull)entryForAction:(UAAction * _Nonnull)action predicate:(UAActionPredicate _Nonnull)predicate;
> 	[Static]
> 	[Export ("entryForAction:predicate:")]
> 	UAActionRegistryEntry EntryForAction (UAAction action, UAActionPredicate predicate);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern BOOL uaLoggingEnabled;
> 	[Field ("uaLoggingEnabled", "__Internal")]
> 	bool uaLoggingEnabled { get; }
> 
> 	// extern UALogLevel uaLogLevel;
> 	[Field ("uaLogLevel", "__Internal")]
> 	UALogLevel uaLogLevel { get; }
> 
> 	// extern BOOL uaLoudImpErrorLoggingEnabled;
> 	[Field ("uaLoudImpErrorLoggingEnabled", "__Internal")]
> 	bool uaLoudImpErrorLoggingEnabled { get; }
> }
> 
> // @interface UAActionRegistry : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionRegistry
> {
> 	// @property (readonly, nonatomic) NSSet<NSMutableDictionary *> * _Nonnull registeredEntries;
> 	[Export ("registeredEntries")]
> 	NSSet<NSMutableDictionary> RegisteredEntries { get; }
> 
> 	// +(instancetype _Nonnull)defaultRegistry;
> 	[Static]
> 	[Export ("defaultRegistry")]
> 	UAActionRegistry DefaultRegistry ();
> 
> 	// -(BOOL)registerAction:(UAAction * _Nonnull)action name:(NSString * _Nonnull)name predicate:(UAActionPredicate _Nullable)predicate;
> 	[Export ("registerAction:name:predicate:")]
> 	bool RegisterAction (UAAction action, string name, [NullAllowed] UAActionPredicate predicate);
> 
> 	// -(BOOL)registerAction:(UAAction * _Nonnull)action names:(NSArray * _Nonnull)names predicate:(UAActionPredicate _Nullable)predicate;
> 	[Export ("registerAction:names:predicate:")]
> 	[Verify (StronglyTypedNSArray)]
> 	bool RegisterAction (UAAction action, NSObject[] names, [NullAllowed] UAActionPredicate predicate);
> 
> 	// -(BOOL)registerAction:(UAAction * _Nonnull)action name:(NSString * _Nonnull)name;
> 	[Export ("registerAction:name:")]
> 	bool RegisterAction (UAAction action, string name);
> 
> 	// -(BOOL)registerAction:(UAAction * _Nonnull)action names:(NSArray * _Nonnull)names;
> 	[Export ("registerAction:names:")]
> 	[Verify (StronglyTypedNSArray)]
> 	bool RegisterAction (UAAction action, NSObject[] names);
> 
> 	// -(UAActionRegistryEntry * _Nullable)registryEntryWithName:(NSString * _Nonnull)name;
> 	[Export ("registryEntryWithName:")]
> 	[return: NullAllowed]
> 	UAActionRegistryEntry RegistryEntryWithName (string name);
> 
> 	// -(BOOL)addSituationOverride:(UASituation)situation forEntryWithName:(NSString * _Nonnull)name action:(UAAction * _Nullable)action;
> 	[Export ("addSituationOverride:forEntryWithName:action:")]
> 	bool AddSituationOverride (UASituation situation, string name, [NullAllowed] UAAction action);
> 
> 	// -(BOOL)updatePredicate:(UAActionPredicate _Nullable)predicate forEntryWithName:(NSString * _Nonnull)name;
> 	[Export ("updatePredicate:forEntryWithName:")]
> 	bool UpdatePredicate ([NullAllowed] UAActionPredicate predicate, string name);
> 
> 	// -(BOOL)updateAction:(UAAction * _Nonnull)action forEntryWithName:(NSString * _Nonnull)name;
> 	[Export ("updateAction:forEntryWithName:")]
> 	bool UpdateAction (UAAction action, string name);
> 
> 	// -(BOOL)removeName:(NSString * _Nonnull)name;
> 	[Export ("removeName:")]
> 	bool RemoveName (string name);
> 
> 	// -(BOOL)removeEntryWithName:(NSString * _Nonnull)name;
> 	[Export ("removeEntryWithName:")]
> 	bool RemoveEntryWithName (string name);
> 
> 	// -(BOOL)addName:(NSString * _Nonnull)name forEntryWithName:(NSString * _Nonnull)entryName;
> 	[Export ("addName:forEntryWithName:")]
> 	bool AddName (string name, string entryName);
> }
> 
> // @interface UAAggregateActionResult : UAActionResult
> [BaseType (typeof(UAActionResult))]
> interface UAAggregateActionResult
> {
> 	// -(void)addResult:(UAActionResult * _Nonnull)result forAction:(NSString * _Nonnull)actionName;
> 	[Export ("addResult:forAction:")]
> 	void AddResult (UAActionResult result, string actionName);
> 
> 	// -(UAActionResult * _Nonnull)resultForAction:(NSString * _Nonnull)actionName;
> 	[Export ("resultForAction:")]
> 	UAActionResult ResultForAction (string actionName);
> }
> 
> // @interface UAActionRunner : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionRunner
> {
> 	// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation;
> 	[Static]
> 	[Export ("runActionWithName:value:situation:")]
> 	void RunActionWithName (string actionName, [NullAllowed] NSObject value, UASituation situation);
> 
> 	// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nonnull)metadata;
> 	[Static]
> 	[Export ("runActionWithName:value:situation:metadata:")]
> 	void RunActionWithName (string actionName, [NullAllowed] NSObject value, UASituation situation, NSDictionary metadata);
> 
> 	// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
> 	[Static]
> 	[Export ("runActionWithName:value:situation:completionHandler:")]
> 	void RunActionWithName (string actionName, [NullAllowed] NSObject value, UASituation situation, UAActionCompletionHandler completionHandler);
> 
> 	// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata completionHandler:(UAActionCompletionHandler _Nullable)completionHandler;
> 	[Static]
> 	[Export ("runActionWithName:value:situation:metadata:completionHandler:")]
> 	void RunActionWithName (string actionName, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata, [NullAllowed] UAActionCompletionHandler completionHandler);
> 
> 	// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation;
> 	[Static]
> 	[Export ("runAction:value:situation:")]
> 	void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation);
> 
> 	// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata;
> 	[Static]
> 	[Export ("runAction:value:situation:metadata:")]
> 	void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata);
> 
> 	// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
> 	[Static]
> 	[Export ("runAction:value:situation:completionHandler:")]
> 	void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, UAActionCompletionHandler completionHandler);
> 
> 	// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata completionHandler:(UAActionCompletionHandler _Nullable)completionHandler;
> 	[Static]
> 	[Export ("runAction:value:situation:metadata:completionHandler:")]
> 	void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata, [NullAllowed] UAActionCompletionHandler completionHandler);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAScheduleTriggerErrorDomain;
> 	[Field ("UAScheduleTriggerErrorDomain", "__Internal")]
> 	NSString UAScheduleTriggerErrorDomain { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAScheduleTriggerTypeKey;
> 	[Field ("UAScheduleTriggerTypeKey", "__Internal")]
> 	NSString UAScheduleTriggerTypeKey { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerPredicateKey;
> 	[Field ("UAScheduleTriggerPredicateKey", "__Internal")]
> 	NSString UAScheduleTriggerPredicateKey { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerGoalKey;
> 	[Field ("UAScheduleTriggerGoalKey", "__Internal")]
> 	NSString UAScheduleTriggerGoalKey { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerAppForegroundName;
> 	[Field ("UAScheduleTriggerAppForegroundName", "__Internal")]
> 	NSString UAScheduleTriggerAppForegroundName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerAppBackgroundName;
> 	[Field ("UAScheduleTriggerAppBackgroundName", "__Internal")]
> 	NSString UAScheduleTriggerAppBackgroundName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerRegionEnterName;
> 	[Field ("UAScheduleTriggerRegionEnterName", "__Internal")]
> 	NSString UAScheduleTriggerRegionEnterName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerRegionExitName;
> 	[Field ("UAScheduleTriggerRegionExitName", "__Internal")]
> 	NSString UAScheduleTriggerRegionExitName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerCustomEventCountName;
> 	[Field ("UAScheduleTriggerCustomEventCountName", "__Internal")]
> 	NSString UAScheduleTriggerCustomEventCountName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerCustomEventValueName;
> 	[Field ("UAScheduleTriggerCustomEventValueName", "__Internal")]
> 	NSString UAScheduleTriggerCustomEventValueName { get; }
> 
> 	// extern NSString *const _Nonnull UAScheduleTriggerScreenName;
> 	[Field ("UAScheduleTriggerScreenName", "__Internal")]
> 	NSString UAScheduleTriggerScreenName { get; }
> }
> 
> // @interface UAScheduleTrigger : NSObject
> [BaseType (typeof(NSObject))]
> interface UAScheduleTrigger
> {
> 	// @property (readonly, nonatomic) UAScheduleTriggerType type;
> 	[Export ("type")]
> 	UAScheduleTriggerType Type { get; }
> 
> 	// @property (readonly, nonatomic) NSNumber * _Nonnull goal;
> 	[Export ("goal")]
> 	NSNumber Goal { get; }
> 
> 	// +(instancetype _Nonnull)foregroundTriggerWithCount:(NSUInteger)count;
> 	[Static]
> 	[Export ("foregroundTriggerWithCount:")]
> 	UAScheduleTrigger ForegroundTriggerWithCount (nuint count);
> 
> 	// +(instancetype _Nonnull)backgroundTriggerWithCount:(NSUInteger)count;
> 	[Static]
> 	[Export ("backgroundTriggerWithCount:")]
> 	UAScheduleTrigger BackgroundTriggerWithCount (nuint count);
> 
> 	// +(instancetype _Nonnull)regionEnterTriggerForRegionID:(NSString * _Nonnull)regionID count:(NSUInteger)count;
> 	[Static]
> 	[Export ("regionEnterTriggerForRegionID:count:")]
> 	UAScheduleTrigger RegionEnterTriggerForRegionID (string regionID, nuint count);
> 
> 	// +(instancetype _Nonnull)regionExitTriggerForRegionID:(NSString * _Nonnull)regionID count:(NSUInteger)count;
> 	[Static]
> 	[Export ("regionExitTriggerForRegionID:count:")]
> 	UAScheduleTrigger RegionExitTriggerForRegionID (string regionID, nuint count);
> 
> 	// +(instancetype _Nonnull)screenTriggerForScreenName:(NSString * _Nonnull)screenName count:(NSUInteger)count;
> 	[Static]
> 	[Export ("screenTriggerForScreenName:count:")]
> 	UAScheduleTrigger ScreenTriggerForScreenName (string screenName, nuint count);
> 
> 	// +(instancetype _Nonnull)customEventTriggerWithPredicate:(UAJSONPredicate * _Nonnull)predicate count:(NSUInteger)count;
> 	[Static]
> 	[Export ("customEventTriggerWithPredicate:count:")]
> 	UAScheduleTrigger CustomEventTriggerWithPredicate (UAJSONPredicate predicate, nuint count);
> 
> 	// +(instancetype _Nonnull)customEventTriggerWithPredicate:(UAJSONPredicate * _Nonnull)predicate value:(NSNumber * _Nonnull)value;
> 	[Static]
> 	[Export ("customEventTriggerWithPredicate:value:")]
> 	UAScheduleTrigger CustomEventTriggerWithPredicate (UAJSONPredicate predicate, NSNumber value);
> 
> 	// -(BOOL)isEqualToTrigger:(UAScheduleTrigger * _Nullable)trigger;
> 	[Export ("isEqualToTrigger:")]
> 	bool IsEqualToTrigger ([NullAllowed] UAScheduleTrigger trigger);
> 
> 	// +(instancetype _Nullable)triggerWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("triggerWithJSON:error:")]
> 	[return: NullAllowed]
> 	UAScheduleTrigger TriggerWithJSON (NSObject json, [NullAllowed] out NSError error);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAActionScheduleInfoErrorDomain;
> 	[Field ("UAActionScheduleInfoErrorDomain", "__Internal")]
> 	NSString UAActionScheduleInfoErrorDomain { get; }
> 
> 	// extern const NSUInteger UAActionScheduleInfoMaxTriggers;
> 	[Field ("UAActionScheduleInfoMaxTriggers", "__Internal")]
> 	nuint UAActionScheduleInfoMaxTriggers { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoActionsKey;
> 	[Field ("UAActionScheduleInfoActionsKey", "__Internal")]
> 	NSString UAActionScheduleInfoActionsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoLimitKey;
> 	[Field ("UAActionScheduleInfoLimitKey", "__Internal")]
> 	NSString UAActionScheduleInfoLimitKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoGroupKey;
> 	[Field ("UAActionScheduleInfoGroupKey", "__Internal")]
> 	NSString UAActionScheduleInfoGroupKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoEndKey;
> 	[Field ("UAActionScheduleInfoEndKey", "__Internal")]
> 	NSString UAActionScheduleInfoEndKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoStartKey;
> 	[Field ("UAActionScheduleInfoStartKey", "__Internal")]
> 	NSString UAActionScheduleInfoStartKey { get; }
> 
> 	// extern NSString *const _Nonnull UAActionScheduleInfoTriggersKey;
> 	[Field ("UAActionScheduleInfoTriggersKey", "__Internal")]
> 	NSString UAActionScheduleInfoTriggersKey { get; }
> }
> 
> // @interface UAActionScheduleInfoBuilder : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionScheduleInfoBuilder
> {
> 	// @property (nonatomic, strong) NSDictionary * _Nullable actions;
> 	[NullAllowed, Export ("actions", ArgumentSemantic.Strong)]
> 	NSDictionary Actions { get; set; }
> 
> 	// @property (assign, nonatomic) NSUInteger limit;
> 	[Export ("limit")]
> 	nuint Limit { get; set; }
> 
> 	// @property (nonatomic, strong) NSArray<UAScheduleTrigger *> * _Nullable triggers;
> 	[NullAllowed, Export ("triggers", ArgumentSemantic.Strong)]
> 	UAScheduleTrigger[] Triggers { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable group;
> 	[NullAllowed, Export ("group")]
> 	string Group { get; set; }
> 
> 	// @property (nonatomic, strong) NSDate * _Nullable start;
> 	[NullAllowed, Export ("start", ArgumentSemantic.Strong)]
> 	NSDate Start { get; set; }
> 
> 	// @property (nonatomic, strong) NSDate * _Nullable end;
> 	[NullAllowed, Export ("end", ArgumentSemantic.Strong)]
> 	NSDate End { get; set; }
> }
> 
> // @interface UAActionScheduleInfo : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionScheduleInfo
> {
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull actions;
> 	[Export ("actions")]
> 	NSDictionary Actions { get; }
> 
> 	// @property (readonly, nonatomic) NSArray<UAScheduleTrigger *> * _Nonnull triggers;
> 	[Export ("triggers")]
> 	UAScheduleTrigger[] Triggers { get; }
> 
> 	// @property (readonly, nonatomic) NSUInteger limit;
> 	[Export ("limit")]
> 	nuint Limit { get; }
> 
> 	// @property (readonly, nonatomic) NSString * _Nullable group;
> 	[NullAllowed, Export ("group")]
> 	string Group { get; }
> 
> 	// @property (readonly, nonatomic) NSDate * _Nonnull start;
> 	[Export ("start")]
> 	NSDate Start { get; }
> 
> 	// @property (readonly, nonatomic) NSDate * _Nonnull end;
> 	[Export ("end")]
> 	NSDate End { get; }
> 
> 	// @property (readonly, nonatomic) BOOL isValid;
> 	[Export ("isValid")]
> 	bool IsValid { get; }
> 
> 	// +(instancetype _Nonnull)actionScheduleInfoWithBuilderBlock:(void (^ _Nonnull)(UAActionScheduleInfoBuilder * _Nonnull))builderBlock;
> 	[Static]
> 	[Export ("actionScheduleInfoWithBuilderBlock:")]
> 	UAActionScheduleInfo ActionScheduleInfoWithBuilderBlock (Action<UAActionScheduleInfoBuilder> builderBlock);
> 
> 	// -(BOOL)isEqualToScheduleInfo:(UAActionScheduleInfo * _Nullable)scheduleInfo;
> 	[Export ("isEqualToScheduleInfo:")]
> 	bool IsEqualToScheduleInfo ([NullAllowed] UAActionScheduleInfo scheduleInfo);
> 
> 	// +(instancetype _Nullable)actionScheduleInfoWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("actionScheduleInfoWithJSON:error:")]
> 	[return: NullAllowed]
> 	UAActionScheduleInfo ActionScheduleInfoWithJSON (NSObject json, [NullAllowed] out NSError error);
> }
> 
> // @interface UAActionSchedule : NSObject
> [BaseType (typeof(NSObject))]
> interface UAActionSchedule
> {
> 	// @property (readonly, nonatomic) NSString * _Nonnull identifier;
> 	[Export ("identifier")]
> 	string Identifier { get; }
> 
> 	// @property (readonly, nonatomic) UAActionScheduleInfo * _Nonnull info;
> 	[Export ("info")]
> 	UAActionScheduleInfo Info { get; }
> 
> 	// -(BOOL)isEqualToSchedule:(UAActionSchedule * _Nullable)schedule;
> 	[Export ("isEqualToSchedule:")]
> 	bool IsEqualToSchedule ([NullAllowed] UAActionSchedule schedule);
> }
> 
> // @interface UAActivityViewController : UIActivityViewController <UIPopoverPresentationControllerDelegate, UIPopoverControllerDelegate>
> [BaseType (typeof(UIActivityViewController))]
> interface UAActivityViewController : IUIPopoverPresentationControllerDelegate, IUIPopoverControllerDelegate
> {
> 	// @property (copy, nonatomic) void (^ _Nullable)(void) dismissalBlock;
> 	[NullAllowed, Export ("dismissalBlock", ArgumentSemantic.Copy)]
> 	Action DismissalBlock { get; set; }
> 
> 	// -(CGRect)sourceRect;
> 	[Export ("sourceRect")]
> 	[Verify (MethodToProperty)]
> 	CGRect SourceRect { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAAddCustomEventActionErrorDomain;
> 	[Field ("UAAddCustomEventActionErrorDomain", "__Internal")]
> 	NSString UAAddCustomEventActionErrorDomain { get; }
> }
> 
> // @interface UAAddCustomEventAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAAddCustomEventAction
> {
> }
> 
> // @interface UAModifyTagsAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAModifyTagsAction
> {
> 	// -(void)applyChannelTags:(NSArray *)tags;
> 	[Export ("applyChannelTags:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void ApplyChannelTags (NSObject[] tags);
> 
> 	// -(void)applyChannelTags:(NSArray *)tags group:(NSString *)group;
> 	[Export ("applyChannelTags:group:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void ApplyChannelTags (NSObject[] tags, string group);
> 
> 	// -(void)applyNamedUserTags:(NSArray *)tags group:(NSString *)group;
> 	[Export ("applyNamedUserTags:group:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void ApplyNamedUserTags (NSObject[] tags, string group);
> }
> 
> // @interface UAAddTagsAction : UAModifyTagsAction
> [BaseType (typeof(UAModifyTagsAction))]
> interface UAAddTagsAction
> {
> }
> 
> // @interface UAAnalytics : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAnalytics
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable conversionSendID;
> 	[NullAllowed, Export ("conversionSendID")]
> 	string ConversionSendID { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable conversionPushMetadata;
> 	[NullAllowed, Export ("conversionPushMetadata")]
> 	string ConversionPushMetadata { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable conversionRichPushID;
> 	[NullAllowed, Export ("conversionRichPushID")]
> 	string ConversionRichPushID { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull sessionID;
> 	[Export ("sessionID")]
> 	string SessionID { get; }
> 
> 	// @property (readonly, nonatomic, strong) NSDate * _Nonnull lastSendTime;
> 	[Export ("lastSendTime", ArgumentSemantic.Strong)]
> 	NSDate LastSendTime { get; }
> 
> 	// @property (getter = isEnabled, assign, nonatomic) BOOL enabled;
> 	[Export ("enabled")]
> 	bool Enabled { [Bind ("isEnabled")] get; set; }
> 
> 	// -(void)addEvent:(UAEvent * _Nonnull)event;
> 	[Export ("addEvent:")]
> 	void AddEvent (UAEvent @event);
> 
> 	// -(void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
> 	[Export ("associateDeviceIdentifiers:")]
> 	void AssociateDeviceIdentifiers (UAAssociatedIdentifiers associatedIdentifiers);
> 
> 	// -(UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers;
> 	[Export ("currentAssociatedDeviceIdentifiers")]
> 	[Verify (MethodToProperty)]
> 	UAAssociatedIdentifiers CurrentAssociatedDeviceIdentifiers { get; }
> 
> 	// -(void)trackScreen:(NSString * _Nullable)screen;
> 	[Export ("trackScreen:")]
> 	void TrackScreen ([NullAllowed] string screen);
> 
> 	// -(void)scheduleUpload;
> 	[Export ("scheduleUpload")]
> 	void ScheduleUpload ();
> }
> 
> // @interface UAAppIntegration : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAppIntegration
> {
> 	// +(void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Static]
> 	[Export ("userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:")]
> 	void UserNotificationCenter (UNUserNotificationCenter center, UNNotificationResponse response, Action completionHandler);
> 
> 	// +(void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
> 	[Static]
> 	[Export ("userNotificationCenter:willPresentNotification:withCompletionHandler:")]
> 	void UserNotificationCenter (UNUserNotificationCenter center, UNNotification notification, Action<UNNotificationPresentationOptions> completionHandler);
> 
> 	// +(void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
> 	[Static]
> 	[Export ("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
> 	void Application (UIApplication application, NSData deviceToken);
> 
> 	// +(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
> 	[Static]
> 	[Export ("application:didReceiveRemoteNotification:fetchCompletionHandler:")]
> 	void Application (UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler);
> 
> 	// +(void)application:(UIApplication * _Nonnull)application didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings;
> 	[Static]
> 	[Export ("application:didRegisterUserNotificationSettings:")]
> 	void Application (UIApplication application, UIUserNotificationSettings notificationSettings);
> 
> 	// +(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nonnull)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)())handler;
> 	[Static]
> 	[Export ("application:handleActionWithIdentifier:forRemoteNotification:completionHandler:")]
> 	void Application (UIApplication application, string identifier, NSDictionary userInfo, Action handler);
> 
> 	// +(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nonnull)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nullable)responseInfo completionHandler:(void (^ _Nonnull)())handler;
> 	[Static]
> 	[Export ("application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:")]
> 	void Application (UIApplication application, string identifier, NSDictionary userInfo, [NullAllowed] NSDictionary responseInfo, Action handler);
> }
> 
> // @interface UAApplicationMetrics : NSObject
> [BaseType (typeof(NSObject))]
> interface UAApplicationMetrics
> {
> 	// @property (readonly, nonatomic, strong) NSDate * _Nullable lastApplicationOpenDate;
> 	[NullAllowed, Export ("lastApplicationOpenDate", ArgumentSemantic.Strong)]
> 	NSDate LastApplicationOpenDate { get; }
> 
> 	// +(instancetype _Nonnull)applicationMetricsWithDataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("applicationMetricsWithDataStore:")]
> 	UAApplicationMetrics ApplicationMetricsWithDataStore (UAPreferenceDataStore dataStore);
> }
> 
> // @interface UAAssociatedIdentifiers : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAssociatedIdentifiers
> {
> 	// +(instancetype _Nonnull)identifiers;
> 	[Static]
> 	[Export ("identifiers")]
> 	UAAssociatedIdentifiers Identifiers ();
> 
> 	// +(instancetype _Nonnull)identifiersWithDictionary:(NSDictionary<NSString *,NSString *> * _Nonnull)identifiers;
> 	[Static]
> 	[Export ("identifiersWithDictionary:")]
> 	UAAssociatedIdentifiers IdentifiersWithDictionary (NSDictionary<NSString, NSString> identifiers);
> 
> 	// @property (copy, nonatomic) NSString * _Nullable advertisingID;
> 	[NullAllowed, Export ("advertisingID")]
> 	string AdvertisingID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable vendorID;
> 	[NullAllowed, Export ("vendorID")]
> 	string VendorID { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL advertisingTrackingEnabled;
> 	[Export ("advertisingTrackingEnabled")]
> 	bool AdvertisingTrackingEnabled { get; set; }
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull allIDs;
> 	[Export ("allIDs")]
> 	NSDictionary AllIDs { get; }
> 
> 	// -(void)setIdentifier:(NSString * _Nullable)identifier forKey:(NSString * _Nonnull)key;
> 	[Export ("setIdentifier:forKey:")]
> 	void SetIdentifier ([NullAllowed] string identifier, string key);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern const NSUInteger UAAssociatedIdentifiersMaxCount;
> 	[Field ("UAAssociatedIdentifiersMaxCount", "__Internal")]
> 	nuint UAAssociatedIdentifiersMaxCount { get; }
> 
> 	// extern const NSUInteger UAAssociatedIdentifiersMaxCharacterCount;
> 	[Field ("UAAssociatedIdentifiersMaxCharacterCount", "__Internal")]
> 	nuint UAAssociatedIdentifiersMaxCharacterCount { get; }
> 
> 	// extern const NSUInteger UAAutomationScheduleLimit;
> 	[Field ("UAAutomationScheduleLimit", "__Internal")]
> 	nuint UAAutomationScheduleLimit { get; }
> }
> 
> // @interface UAAutomation : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAutomation
> {
> 	// -(void)scheduleActions:(UAActionScheduleInfo * _Nonnull)scheduleInfo completionHandler:(void (^ _Nullable)(UAActionSchedule * _Nullable))completionHandler;
> 	[Export ("scheduleActions:completionHandler:")]
> 	void ScheduleActions (UAActionScheduleInfo scheduleInfo, [NullAllowed] Action<UAActionSchedule> completionHandler);
> 
> 	// -(void)cancelScheduleWithIdentifier:(NSString * _Nonnull)identifier;
> 	[Export ("cancelScheduleWithIdentifier:")]
> 	void CancelScheduleWithIdentifier (string identifier);
> 
> 	// -(void)cancelSchedulesWithGroup:(NSString * _Nonnull)group;
> 	[Export ("cancelSchedulesWithGroup:")]
> 	void CancelSchedulesWithGroup (string group);
> 
> 	// -(void)cancelAll;
> 	[Export ("cancelAll")]
> 	void CancelAll ();
> 
> 	// -(void)getScheduleWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(UAActionSchedule * _Nullable))completionHandler;
> 	[Export ("getScheduleWithIdentifier:completionHandler:")]
> 	void GetScheduleWithIdentifier (string identifier, Action<UAActionSchedule> completionHandler);
> 
> 	// -(void)getSchedules:(void (^ _Nonnull)(NSArray<UAActionSchedule *> * _Nonnull))completionHandler;
> 	[Export ("getSchedules:")]
> 	void GetSchedules (Action<NSArray<UAActionSchedule>> completionHandler);
> 
> 	// -(void)getSchedulesWithGroup:(NSString * _Nonnull)group completionHandler:(void (^ _Nonnull)(NSArray<UAActionSchedule *> * _Nonnull))completionHandler;
> 	[Export ("getSchedulesWithGroup:completionHandler:")]
> 	void GetSchedulesWithGroup (string group, Action<NSArray<UAActionSchedule>> completionHandler);
> }
> 
> // @interface UABespokeCloseView : UIView
> [BaseType (typeof(UIView))]
> interface UABespokeCloseView
> {
> }
> 
> // @interface UABeveledLoadingIndicator : UIView
> [BaseType (typeof(UIView))]
> interface UABeveledLoadingIndicator
> {
> 	// -(void)show;
> 	[Export ("show")]
> 	void Show ();
> 
> 	// -(void)hide;
> 	[Export ("hide")]
> 	void Hide ();
> }
> 
> // @interface UACancelSchedulesAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UACancelSchedulesAction
> {
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const UACancelSchedulesActionAll;
> 	[Field ("UACancelSchedulesActionAll", "__Internal")]
> 	NSString UACancelSchedulesActionAll { get; }
> 
> 	// extern NSString *const UACancelSchedulesActionIDs;
> 	[Field ("UACancelSchedulesActionIDs", "__Internal")]
> 	NSString UACancelSchedulesActionIDs { get; }
> 
> 	// extern NSString *const UACancelSchedulesActionGroups;
> 	[Field ("UACancelSchedulesActionGroups", "__Internal")]
> 	NSString UACancelSchedulesActionGroups { get; }
> }
> 
> // @interface UAChannelCapture : NSObject <UIAlertViewDelegate>
> [BaseType (typeof(NSObject))]
> interface UAChannelCapture : IUIAlertViewDelegate
> {
> 	// +(instancetype _Nonnull)channelCaptureWithConfig:(UAConfig * _Nonnull)config push:(UAPush * _Nonnull)push;
> 	[Static]
> 	[Export ("channelCaptureWithConfig:push:")]
> 	UAChannelCapture ChannelCaptureWithConfig (UAConfig config, UAPush push);
> }
> 
> // @protocol UAChannelRegistrarDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAChannelRegistrarDelegate
> {
> 	// @optional -(void)registrationFailedWithPayload:(UAChannelRegistrationPayload * _Nonnull)payload;
> 	[Export ("registrationFailedWithPayload:")]
> 	void RegistrationFailedWithPayload (UAChannelRegistrationPayload payload);
> 
> 	// @optional -(void)registrationSucceededWithPayload:(UAChannelRegistrationPayload * _Nonnull)payload;
> 	[Export ("registrationSucceededWithPayload:")]
> 	void RegistrationSucceededWithPayload (UAChannelRegistrationPayload payload);
> 
> 	// @optional -(void)channelCreated:(NSString * _Nonnull)channelID channelLocation:(NSString * _Nonnull)channelLocation existing:(BOOL)existing;
> 	[Export ("channelCreated:channelLocation:existing:")]
> 	void ChannelCreated (string channelID, string channelLocation, bool existing);
> }
> 
> // @interface UAChannelRegistrar : NSObject
> [BaseType (typeof(NSObject))]
> interface UAChannelRegistrar
> {
> 	[Wrap ("WeakDelegate")]
> 	[NullAllowed]
> 	UAChannelRegistrarDelegate Delegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAChannelRegistrarDelegate> _Nullable delegate;
> 	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
> 	NSObject WeakDelegate { get; set; }
> 
> 	// -(void)registerWithChannelID:(NSString * _Nullable)channelID channelLocation:(NSString * _Nullable)channelLocation withPayload:(UAChannelRegistrationPayload * _Nonnull)payload forcefully:(BOOL)forcefully;
> 	[Export ("registerWithChannelID:channelLocation:withPayload:forcefully:")]
> 	void RegisterWithChannelID ([NullAllowed] string channelID, [NullAllowed] string channelLocation, UAChannelRegistrationPayload payload, bool forcefully);
> 
> 	// -(void)cancelAllRequests;
> 	[Export ("cancelAllRequests")]
> 	void CancelAllRequests ();
> }
> 
> // @interface UACircularRegion : NSObject
> [BaseType (typeof(NSObject))]
> interface UACircularRegion
> {
> 	// +(instancetype _Nullable)circularRegionWithRadius:(NSNumber * _Nonnull)radius latitude:(NSNumber * _Nonnull)latitude longitude:(NSNumber * _Nonnull)longitude;
> 	[Static]
> 	[Export ("circularRegionWithRadius:latitude:longitude:")]
> 	[return: NullAllowed]
> 	UACircularRegion CircularRegionWithRadius (NSNumber radius, NSNumber latitude, NSNumber longitude);
> }
> 
> // @interface UAConfig : NSObject <NSCopying>
> [BaseType (typeof(NSObject))]
> interface UAConfig : INSCopying
> {
> 	// @property (readonly, nonatomic) NSString * _Nullable appKey;
> 	[NullAllowed, Export ("appKey")]
> 	string AppKey { get; }
> 
> 	// @property (readonly, nonatomic) NSString * _Nullable appSecret;
> 	[NullAllowed, Export ("appSecret")]
> 	string AppSecret { get; }
> 
> 	// @property (readonly, nonatomic) UALogLevel logLevel;
> 	[Export ("logLevel")]
> 	UALogLevel LogLevel { get; }
> 
> 	// @property (getter = isInProduction, assign, nonatomic) BOOL inProduction;
> 	[Export ("inProduction")]
> 	bool InProduction { [Bind ("isInProduction")] get; set; }
> 
> 	// @property (getter = isAnalyticsEnabled, assign, nonatomic) BOOL analyticsEnabled;
> 	[Export ("analyticsEnabled")]
> 	bool AnalyticsEnabled { [Bind ("isAnalyticsEnabled")] get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable developmentAppKey;
> 	[NullAllowed, Export ("developmentAppKey")]
> 	string DevelopmentAppKey { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable developmentAppSecret;
> 	[NullAllowed, Export ("developmentAppSecret")]
> 	string DevelopmentAppSecret { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable productionAppKey;
> 	[NullAllowed, Export ("productionAppKey")]
> 	string ProductionAppKey { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable productionAppSecret;
> 	[NullAllowed, Export ("productionAppSecret")]
> 	string ProductionAppSecret { get; set; }
> 
> 	// @property (assign, nonatomic) UALogLevel developmentLogLevel;
> 	[Export ("developmentLogLevel", ArgumentSemantic.Assign)]
> 	UALogLevel DevelopmentLogLevel { get; set; }
> 
> 	// @property (assign, nonatomic) UALogLevel productionLogLevel;
> 	[Export ("productionLogLevel", ArgumentSemantic.Assign)]
> 	UALogLevel ProductionLogLevel { get; set; }
> 
> 	// @property (assign, nonatomic) NSUInteger cacheDiskSizeInMB;
> 	[Export ("cacheDiskSizeInMB")]
> 	nuint CacheDiskSizeInMB { get; set; }
> 
> 	// @property (getter = isAutomaticSetupEnabled, assign, nonatomic) BOOL automaticSetupEnabled;
> 	[Export ("automaticSetupEnabled")]
> 	bool AutomaticSetupEnabled { [Bind ("isAutomaticSetupEnabled")] get; set; }
> 
> 	// @property (nonatomic, strong) NSArray<NSString *> * _Nonnull whitelist;
> 	[Export ("whitelist", ArgumentSemantic.Strong)]
> 	string[] Whitelist { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL detectProvisioningMode;
> 	[Export ("detectProvisioningMode")]
> 	bool DetectProvisioningMode { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull deviceAPIURL;
> 	[Export ("deviceAPIURL")]
> 	string DeviceAPIURL { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull analyticsURL;
> 	[Export ("analyticsURL")]
> 	string AnalyticsURL { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull landingPageContentURL;
> 	[Export ("landingPageContentURL")]
> 	string LandingPageContentURL { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull messageCenterStyleConfig;
> 	[Export ("messageCenterStyleConfig")]
> 	string MessageCenterStyleConfig { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL clearUserOnAppRestore;
> 	[Export ("clearUserOnAppRestore")]
> 	bool ClearUserOnAppRestore { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL clearNamedUserOnAppRestore;
> 	[Export ("clearNamedUserOnAppRestore")]
> 	bool ClearNamedUserOnAppRestore { get; set; }
> 
> 	// @property (getter = isChannelCaptureEnabled, assign, nonatomic) BOOL channelCaptureEnabled;
> 	[Export ("channelCaptureEnabled")]
> 	bool ChannelCaptureEnabled { [Bind ("isChannelCaptureEnabled")] get; set; }
> 
> 	// @property (getter = isChannelCreationDelayEnabled, assign, nonatomic) BOOL channelCreationDelayEnabled;
> 	[Export ("channelCreationDelayEnabled")]
> 	bool ChannelCreationDelayEnabled { [Bind ("isChannelCreationDelayEnabled")] get; set; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nonnull customConfig;
> 	[Export ("customConfig", ArgumentSemantic.Copy)]
> 	NSDictionary CustomConfig { get; set; }
> 
> 	// +(UAConfig * _Nonnull)defaultConfig;
> 	[Static]
> 	[Export ("defaultConfig")]
> 	[Verify (MethodToProperty)]
> 	UAConfig DefaultConfig { get; }
> 
> 	// +(UAConfig * _Nonnull)configWithContentsOfFile:(NSString * _Nonnull)path;
> 	[Static]
> 	[Export ("configWithContentsOfFile:")]
> 	UAConfig ConfigWithContentsOfFile (string path);
> 
> 	// +(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("config")]
> 	[Verify (MethodToProperty)]
> 	UAConfig Config { get; }
> 
> 	// -(BOOL)validate;
> 	[Export ("validate")]
> 	[Verify (MethodToProperty)]
> 	bool Validate { get; }
> }
> 
> // @interface UADefaultMessageCenter : NSObject
> [BaseType (typeof(NSObject))]
> interface UADefaultMessageCenter
> {
> 	// @property (nonatomic, strong) NSString * title;
> 	[Export ("title", ArgumentSemantic.Strong)]
> 	string Title { get; set; }
> 
> 	// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
> 	[Export ("style", ArgumentSemantic.Strong)]
> 	UADefaultMessageCenterStyle Style { get; set; }
> 
> 	// @property (nonatomic, strong) NSPredicate * filter;
> 	[Export ("filter", ArgumentSemantic.Strong)]
> 	NSPredicate Filter { get; set; }
> 
> 	// +(instancetype)messageCenterWithConfig:(UAConfig *)config;
> 	[Static]
> 	[Export ("messageCenterWithConfig:")]
> 	UADefaultMessageCenter MessageCenterWithConfig (UAConfig config);
> 
> 	// -(void)display:(BOOL)animated;
> 	[Export ("display:")]
> 	void Display (bool animated);
> 
> 	// -(void)display;
> 	[Export ("display")]
> 	void Display ();
> 
> 	// -(void)displayMessage:(UAInboxMessage *)message animated:(BOOL)animated;
> 	[Export ("displayMessage:animated:")]
> 	void DisplayMessage (UAInboxMessage message, bool animated);
> 
> 	// -(void)displayMessage:(UAInboxMessage *)message;
> 	[Export ("displayMessage:")]
> 	void DisplayMessage (UAInboxMessage message);
> 
> 	// -(void)dismiss:(BOOL)animated;
> 	[Export ("dismiss:")]
> 	void Dismiss (bool animated);
> 
> 	// -(void)dismiss;
> 	[Export ("dismiss")]
> 	void Dismiss ();
> }
> 
> // @interface UADefaultMessageCenterListCell : UITableViewCell
> [BaseType (typeof(UITableViewCell))]
> interface UADefaultMessageCenterListCell
> {
> 	// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
> 	[Export ("style", ArgumentSemantic.Strong)]
> 	UADefaultMessageCenterStyle Style { get; set; }
> 
> 	// @property (nonatomic, weak) UILabel * date __attribute__((iboutlet));
> 	[Export ("date", ArgumentSemantic.Weak)]
> 	UILabel Date { get; set; }
> 
> 	// @property (nonatomic, weak) UILabel * title __attribute__((iboutlet));
> 	[Export ("title", ArgumentSemantic.Weak)]
> 	UILabel Title { get; set; }
> 
> 	// @property (nonatomic, weak) UIView * unreadIndicator __attribute__((iboutlet));
> 	[Export ("unreadIndicator", ArgumentSemantic.Weak)]
> 	UIView UnreadIndicator { get; set; }
> 
> 	// @property (nonatomic, weak) UIImageView * listIconView __attribute__((iboutlet));
> 	[Export ("listIconView", ArgumentSemantic.Weak)]
> 	UIImageView ListIconView { get; set; }
> 
> 	// -(void)setData:(UAInboxMessage *)message;
> 	[Export ("setData:")]
> 	void SetData (UAInboxMessage message);
> }
> 
> // @interface UADefaultMessageCenterListViewController : UIViewController <UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate, UISplitViewControllerDelegate>
> [BaseType (typeof(UIViewController))]
> interface UADefaultMessageCenterListViewController : IUITableViewDelegate, IUITableViewDataSource, IUIScrollViewDelegate, IUISplitViewControllerDelegate
> {
> 	// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
> 	[Export ("style", ArgumentSemantic.Strong)]
> 	UADefaultMessageCenterStyle Style { get; set; }
> 
> 	// @property (nonatomic, strong) NSPredicate * filter;
> 	[Export ("filter", ArgumentSemantic.Strong)]
> 	NSPredicate Filter { get; set; }
> 
> 	// @property (copy, nonatomic) void (^closeBlock)(BOOL);
> 	[Export ("closeBlock", ArgumentSemantic.Copy)]
> 	Action<bool> CloseBlock { get; set; }
> 
> 	// -(void)displayMessage:(UAInboxMessage *)message;
> 	[Export ("displayMessage:")]
> 	void DisplayMessage (UAInboxMessage message);
> }
> 
> // @protocol UARichContentWindow <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UARichContentWindow
> {
> 	// @optional -(void)closeWebView:(UIWebView * _Nonnull)webView animated:(BOOL)animated;
> 	[Export ("closeWebView:animated:")]
> 	void Animated (UIWebView webView, bool animated);
> }
> 
> // @interface UADefaultMessageCenterMessageViewController : UIViewController <UIWebViewDelegate, UARichContentWindow>
> [BaseType (typeof(UIViewController))]
> interface UADefaultMessageCenterMessageViewController : IUIWebViewDelegate, IUARichContentWindow
> {
> 	// @property (nonatomic, strong) UAInboxMessage * message;
> 	[Export ("message", ArgumentSemantic.Strong)]
> 	UAInboxMessage Message { get; set; }
> 
> 	// @property (nonatomic, strong) NSPredicate * filter;
> 	[Export ("filter", ArgumentSemantic.Strong)]
> 	NSPredicate Filter { get; set; }
> 
> 	// @property (copy, nonatomic) void (^closeBlock)(BOOL);
> 	[Export ("closeBlock", ArgumentSemantic.Copy)]
> 	Action<bool> CloseBlock { get; set; }
> 
> 	// -(void)loadMessageAtIndex:(NSUInteger)index;
> 	[Export ("loadMessageAtIndex:")]
> 	void LoadMessageAtIndex (nuint index);
> 
> 	// -(void)loadMessageForID:(NSString *)mid;
> 	[Export ("loadMessageForID:")]
> 	void LoadMessageForID (string mid);
> }
> 
> // @interface UADefaultMessageCenterSplitViewController : UISplitViewController
> [BaseType (typeof(UISplitViewController))]
> interface UADefaultMessageCenterSplitViewController
> {
> 	// @property (nonatomic, strong) NSPredicate * filter;
> 	[Export ("filter", ArgumentSemantic.Strong)]
> 	NSPredicate Filter { get; set; }
> 
> 	// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
> 	[Export ("style", ArgumentSemantic.Strong)]
> 	UADefaultMessageCenterStyle Style { get; set; }
> 
> 	// @property (readonly, nonatomic) UADefaultMessageCenterListViewController * listViewController;
> 	[Export ("listViewController")]
> 	UADefaultMessageCenterListViewController ListViewController { get; }
> }
> 
> // @interface UADefaultMessageCenterStyle : NSObject
> [BaseType (typeof(NSObject))]
> interface UADefaultMessageCenterStyle
> {
> 	// @property (nonatomic, strong) UIFont * titleFont;
> 	[Export ("titleFont", ArgumentSemantic.Strong)]
> 	UIFont TitleFont { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * titleColor;
> 	[Export ("titleColor", ArgumentSemantic.Strong)]
> 	UIColor TitleColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * tintColor;
> 	[Export ("tintColor", ArgumentSemantic.Strong)]
> 	UIColor TintColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * navigationBarColor;
> 	[Export ("navigationBarColor", ArgumentSemantic.Strong)]
> 	UIColor NavigationBarColor { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL navigationBarOpaque;
> 	[Export ("navigationBarOpaque")]
> 	bool NavigationBarOpaque { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * listColor;
> 	[Export ("listColor", ArgumentSemantic.Strong)]
> 	UIColor ListColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * refreshTintColor;
> 	[Export ("refreshTintColor", ArgumentSemantic.Strong)]
> 	UIColor RefreshTintColor { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL iconsEnabled;
> 	[Export ("iconsEnabled")]
> 	bool IconsEnabled { get; set; }
> 
> 	// @property (nonatomic, strong) UIImage * placeholderIcon;
> 	[Export ("placeholderIcon", ArgumentSemantic.Strong)]
> 	UIImage PlaceholderIcon { get; set; }
> 
> 	// @property (nonatomic, strong) UIFont * cellTitleFont;
> 	[Export ("cellTitleFont", ArgumentSemantic.Strong)]
> 	UIFont CellTitleFont { get; set; }
> 
> 	// @property (nonatomic, strong) UIFont * cellDateFont;
> 	[Export ("cellDateFont", ArgumentSemantic.Strong)]
> 	UIFont CellDateFont { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellColor;
> 	[Export ("cellColor", ArgumentSemantic.Strong)]
> 	UIColor CellColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellHighlightedColor;
> 	[Export ("cellHighlightedColor", ArgumentSemantic.Strong)]
> 	UIColor CellHighlightedColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellTitleColor;
> 	[Export ("cellTitleColor", ArgumentSemantic.Strong)]
> 	UIColor CellTitleColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellTitleHighlightedColor;
> 	[Export ("cellTitleHighlightedColor", ArgumentSemantic.Strong)]
> 	UIColor CellTitleHighlightedColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellDateColor;
> 	[Export ("cellDateColor", ArgumentSemantic.Strong)]
> 	UIColor CellDateColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellDateHighlightedColor;
> 	[Export ("cellDateHighlightedColor", ArgumentSemantic.Strong)]
> 	UIColor CellDateHighlightedColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellSeparatorColor;
> 	[Export ("cellSeparatorColor", ArgumentSemantic.Strong)]
> 	UIColor CellSeparatorColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * cellTintColor;
> 	[Export ("cellTintColor", ArgumentSemantic.Strong)]
> 	UIColor CellTintColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * unreadIndicatorColor;
> 	[Export ("unreadIndicatorColor", ArgumentSemantic.Strong)]
> 	UIColor UnreadIndicatorColor { get; set; }
> 
> 	// +(instancetype)style;
> 	[Static]
> 	[Export ("style")]
> 	UADefaultMessageCenterStyle Style ();
> 
> 	// +(instancetype)styleWithContentsOfFile:(NSString *)path;
> 	[Static]
> 	[Export ("styleWithContentsOfFile:")]
> 	UADefaultMessageCenterStyle StyleWithContentsOfFile (string path);
> }
> 
> // @interface UADisplayInboxAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UADisplayInboxAction
> {
> 	// -(void)displayInboxMessage:(UAInboxMessage * _Nonnull)message situation:(UASituation)situation;
> 	[Export ("displayInboxMessage:situation:")]
> 	void DisplayInboxMessage (UAInboxMessage message, UASituation situation);
> 
> 	// -(void)displayInboxWithSituation:(UASituation)situation;
> 	[Export ("displayInboxWithSituation:")]
> 	void DisplayInboxWithSituation (UASituation situation);
> }
> 
> // typedef void (^UADisposalBlock)();
> delegate void UADisposalBlock ();
> 
> // @interface UADisposable : NSObject
> [BaseType (typeof(NSObject))]
> interface UADisposable
> {
> 	// +(instancetype _Nonnull)disposableWithBlock:(UADisposalBlock _Nonnull)disposalBlock;
> 	[Static]
> 	[Export ("disposableWithBlock:")]
> 	UADisposable DisposableWithBlock (UADisposalBlock disposalBlock);
> 
> 	// -(void)dispose;
> 	[Export ("dispose")]
> 	void Dispose ();
> }
> 
> // @interface UAFetchDeviceInfoAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAFetchDeviceInfoAction
> {
> }
14,15c1703,6064
< 	// typedef void (^UAJavaScriptDelegateCompletionHandler)(NSString * _Nullable);
< 	delegate void UAJavaScriptDelegateCompletionHandler ([NullAllowed] string arg0);
---
> // @interface UAInAppMessage : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInAppMessage
> {
> 	// +(instancetype _Nonnull)message;
> 	[Static]
> 	[Export ("message")]
> 	UAInAppMessage Message ();
> 
> 	// +(instancetype _Nonnull)messageWithPayload:(NSDictionary * _Nonnull)payload;
> 	[Static]
> 	[Export ("messageWithPayload:")]
> 	UAInAppMessage MessageWithPayload (NSDictionary payload);
> 
> 	// -(BOOL)isEqualToMessage:(UAInAppMessage * _Nullable)message;
> 	[Export ("isEqualToMessage:")]
> 	bool IsEqualToMessage ([NullAllowed] UAInAppMessage message);
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// @property (nonatomic, strong) NSDate * _Nonnull expiry;
> 	[Export ("expiry", ArgumentSemantic.Strong)]
> 	NSDate Expiry { get; set; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nullable extra;
> 	[NullAllowed, Export ("extra", ArgumentSemantic.Copy)]
> 	NSDictionary Extra { get; set; }
> 
> 	// @property (assign, nonatomic) UAInAppMessageDisplayType displayType;
> 	[Export ("displayType", ArgumentSemantic.Assign)]
> 	UAInAppMessageDisplayType DisplayType { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable alert;
> 	[NullAllowed, Export ("alert")]
> 	string Alert { get; set; }
> 
> 	// @property (assign, nonatomic) UAInAppMessagePosition position;
> 	[Export ("position", ArgumentSemantic.Assign)]
> 	UAInAppMessagePosition Position { get; set; }
> 
> 	// @property (assign, nonatomic) NSTimeInterval duration;
> 	[Export ("duration")]
> 	double Duration { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * _Nullable primaryColor;
> 	[NullAllowed, Export ("primaryColor", ArgumentSemantic.Strong)]
> 	UIColor PrimaryColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * _Nullable secondaryColor;
> 	[NullAllowed, Export ("secondaryColor", ArgumentSemantic.Strong)]
> 	UIColor SecondaryColor { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable buttonGroup;
> 	[NullAllowed, Export ("buttonGroup")]
> 	string ButtonGroup { get; set; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nullable buttonActions;
> 	[NullAllowed, Export ("buttonActions", ArgumentSemantic.Copy)]
> 	NSDictionary ButtonActions { get; set; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nullable onClick;
> 	[NullAllowed, Export ("onClick", ArgumentSemantic.Copy)]
> 	NSDictionary OnClick { get; set; }
> 
> 	// @property (readonly, nonatomic) UIUserNotificationActionContext notificationActionContext;
> 	[Export ("notificationActionContext")]
> 	UIUserNotificationActionContext NotificationActionContext { get; }
> 
> 	// @property (readonly, nonatomic) NSArray * _Nullable notificationActions;
> 	[NullAllowed, Export ("notificationActions")]
> 	[Verify (StronglyTypedNSArray)]
> 	NSObject[] NotificationActions { get; }
> 
> 	// @property (readonly, nonatomic) UANotificationCategory * _Nullable buttonCategory;
> 	[NullAllowed, Export ("buttonCategory")]
> 	UANotificationCategory ButtonCategory { get; }
> 
> 	// @property (readonly, nonatomic) NSArray * _Nullable buttonActionBindings;
> 	[NullAllowed, Export ("buttonActionBindings")]
> 	[Verify (StronglyTypedNSArray)]
> 	NSObject[] ButtonActionBindings { get; }
> }
> 
> // @interface UAInAppMessageButtonActionBinding : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInAppMessageButtonActionBinding
> {
> 	// @property (copy, nonatomic) NSString * _Nullable title;
> 	[NullAllowed, Export ("title")]
> 	string Title { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nullable actions;
> 	[NullAllowed, Export ("actions", ArgumentSemantic.Copy)]
> 	NSDictionary Actions { get; set; }
> 
> 	// @property (assign, nonatomic) UASituation situation;
> 	[Export ("situation", ArgumentSemantic.Assign)]
> 	UASituation Situation { get; set; }
> }
> 
> // @protocol UAInAppMessageControllerDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAInAppMessageControllerDelegate
> {
> 	// @required -(UIView * _Nonnull)viewForMessage:(UAInAppMessage * _Nonnull)message parentView:(UIView * _Nonnull)parentView;
> 	[Abstract]
> 	[Export ("viewForMessage:parentView:")]
> 	UIView ViewForMessage (UAInAppMessage message, UIView parentView);
> 
> 	// @required -(UIControl * _Nonnull)messageView:(UIView * _Nonnull)messageView buttonAtIndex:(NSUInteger)index;
> 	[Abstract]
> 	[Export ("messageView:buttonAtIndex:")]
> 	UIControl MessageView (UIView messageView, nuint index);
> 
> 	// @optional -(void)messageView:(UIView * _Nonnull)messageView didChangeTouchState:(BOOL)touchDown;
> 	[Export ("messageView:didChangeTouchState:")]
> 	void MessageView (UIView messageView, bool touchDown);
> 
> 	// @optional -(void)messageView:(UIView * _Nonnull)messageView animateInWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
> 	[Export ("messageView:animateInWithParentView:completionHandler:")]
> 	void MessageView (UIView messageView, UIView parentView, Action completionHandler);
> 
> 	// @optional -(void)messageView:(UIView * _Nonnull)messageView animateOutWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
> 	[Export ("messageView:animateOutWithParentView:completionHandler:")]
> 	void MessageView (UIView messageView, UIView parentView, Action completionHandler);
> }
> 
> // @interface UAInAppMessageControllerDefaultDelegate : NSObject <UAInAppMessageControllerDelegate>
> [BaseType (typeof(NSObject))]
> interface UAInAppMessageControllerDefaultDelegate : IUAInAppMessageControllerDelegate
> {
> 	// -(instancetype _Nonnull)initWithMessage:(UAInAppMessage * _Nonnull)message;
> 	[Export ("initWithMessage:")]
> 	IntPtr Constructor (UAInAppMessage message);
> 
> 	// -(UIView * _Nonnull)viewForMessage:(UAInAppMessage * _Nonnull)message parentView:(UIView * _Nonnull)parentView;
> 	[Export ("viewForMessage:parentView:")]
> 	UIView ViewForMessage (UAInAppMessage message, UIView parentView);
> 
> 	// -(UIControl * _Nonnull)messageView:(UIView * _Nonnull)messageView buttonAtIndex:(NSUInteger)index;
> 	[Export ("messageView:buttonAtIndex:")]
> 	UIControl MessageView (UIView messageView, nuint index);
> 
> 	// -(void)messageView:(UIView * _Nonnull)messageView didChangeTouchState:(BOOL)touchDown;
> 	[Export ("messageView:didChangeTouchState:")]
> 	void MessageView (UIView messageView, bool touchDown);
> 
> 	// -(void)messageView:(UIView * _Nonnull)messageView animateInWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
> 	[Export ("messageView:animateInWithParentView:completionHandler:")]
> 	void MessageView (UIView messageView, UIView parentView, Action completionHandler);
> 
> 	// -(void)messageView:(UIView * _Nonnull)messageView animateOutWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
> 	[Export ("messageView:animateOutWithParentView:completionHandler:")]
> 	void MessageView (UIView messageView, UIView parentView, Action completionHandler);
> }
> 
> // @interface UAInAppMessageView : UIView
> [BaseType (typeof(UIView))]
> interface UAInAppMessageView
> {
> 	// -(instancetype _Nonnull)initWithPosition:(UAInAppMessagePosition)position numberOfButtons:(NSUInteger)numberOfButtons;
> 	[Export ("initWithPosition:numberOfButtons:")]
> 	IntPtr Constructor (UAInAppMessagePosition position, nuint numberOfButtons);
> 
> 	// @property (readonly, nonatomic) UIView * _Nonnull tab __attribute__((iboutlet));
> 	[Export ("tab")]
> 	UIView Tab { get; }
> 
> 	// @property (readonly, nonatomic) UILabel * _Nonnull messageLabel __attribute__((iboutlet));
> 	[Export ("messageLabel")]
> 	UILabel MessageLabel { get; }
> 
> 	// @property (readonly, nonatomic) UIButton * _Nullable button1 __attribute__((iboutlet));
> 	[NullAllowed, Export ("button1")]
> 	UIButton Button1 { get; }
> 
> 	// @property (readonly, nonatomic) UIButton * _Nullable button2 __attribute__((iboutlet));
> 	[NullAllowed, Export ("button2")]
> 	UIButton Button2 { get; }
> }
> 
> // @protocol UAInAppMessagingDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAInAppMessagingDelegate
> {
> 	// @optional -(void)pendingMessageAvailable:(UAInAppMessage * _Nonnull)message;
> 	[Export ("pendingMessageAvailable:")]
> 	void PendingMessageAvailable (UAInAppMessage message);
> 
> 	// @optional -(void)messageWillBeDisplayed:(UAInAppMessage * _Nonnull)message;
> 	[Export ("messageWillBeDisplayed:")]
> 	void MessageWillBeDisplayed (UAInAppMessage message);
> }
> 
> // @interface UAInAppMessaging : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInAppMessaging
> {
> 	// -(void)deletePendingMessage:(UAInAppMessage * _Nonnull)message;
> 	[Export ("deletePendingMessage:")]
> 	void DeletePendingMessage (UAInAppMessage message);
> 
> 	// -(void)displayMessage:(UAInAppMessage * _Nonnull)message;
> 	[Export ("displayMessage:")]
> 	void DisplayMessage (UAInAppMessage message);
> 
> 	// -(void)displayPendingMessage;
> 	[Export ("displayPendingMessage")]
> 	void DisplayPendingMessage ();
> 
> 	// @property (copy, nonatomic) UAInAppMessage * _Nullable pendingMessage;
> 	[NullAllowed, Export ("pendingMessage", ArgumentSemantic.Copy)]
> 	UAInAppMessage PendingMessage { get; set; }
> 
> 	// @property (getter = isAutoDisplayEnabled, assign, nonatomic) BOOL autoDisplayEnabled;
> 	[Export ("autoDisplayEnabled")]
> 	bool AutoDisplayEnabled { [Bind ("isAutoDisplayEnabled")] get; set; }
> 
> 	// @property (nonatomic, strong) UIFont * _Nonnull font;
> 	[Export ("font", ArgumentSemantic.Strong)]
> 	UIFont Font { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * _Nonnull defaultPrimaryColor;
> 	[Export ("defaultPrimaryColor", ArgumentSemantic.Strong)]
> 	UIColor DefaultPrimaryColor { get; set; }
> 
> 	// @property (nonatomic, strong) UIColor * _Nonnull defaultSecondaryColor;
> 	[Export ("defaultSecondaryColor", ArgumentSemantic.Strong)]
> 	UIColor DefaultSecondaryColor { get; set; }
> 
> 	// @property (assign, nonatomic) NSTimeInterval displayDelay;
> 	[Export ("displayDelay")]
> 	double DisplayDelay { get; set; }
> 
> 	// @property (getter = isDisplayASAPEnabled, assign, nonatomic) BOOL displayASAPEnabled;
> 	[Export ("displayASAPEnabled")]
> 	bool DisplayASAPEnabled { [Bind ("isDisplayASAPEnabled")] get; set; }
> 
> 	[Wrap ("WeakMessagingDelegate")]
> 	[NullAllowed]
> 	UAInAppMessagingDelegate MessagingDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAInAppMessagingDelegate> _Nullable messagingDelegate;
> 	[NullAllowed, Export ("messagingDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakMessagingDelegate { get; set; }
> 
> 	[Wrap ("WeakMessageControllerDelegate")]
> 	[NullAllowed]
> 	UAInAppMessageControllerDelegate MessageControllerDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAInAppMessageControllerDelegate> _Nullable messageControllerDelegate;
> 	[NullAllowed, Export ("messageControllerDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakMessageControllerDelegate { get; set; }
> }
> 
> // @protocol UAInboxDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAInboxDelegate
> {
> 	// @optional -(void)richPushMessageAvailable:(UAInboxMessage * _Nonnull)richPushMessage;
> 	[Export ("richPushMessageAvailable:")]
> 	void RichPushMessageAvailable (UAInboxMessage richPushMessage);
> 
> 	// @optional -(void)showInboxMessage:(UAInboxMessage * _Nonnull)message;
> 	[Export ("showInboxMessage:")]
> 	void ShowInboxMessage (UAInboxMessage message);
> 
> 	// @required -(void)showInbox;
> 	[Abstract]
> 	[Export ("showInbox")]
> 	void ShowInbox ();
> }
> 
> // @interface UAInbox : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInbox
> {
> 	// @property (nonatomic, strong) UAInboxMessageList * _Nonnull messageList;
> 	[Export ("messageList", ArgumentSemantic.Strong)]
> 	UAInboxMessageList MessageList { get; set; }
> 
> 	// @property (readonly, nonatomic, strong) UAInboxAPIClient * _Nonnull client;
> 	[Export ("client", ArgumentSemantic.Strong)]
> 	UAInboxAPIClient Client { get; }
> 
> 	[Wrap ("WeakDelegate")]
> 	[NullAllowed]
> 	UAInboxDelegate Delegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAInboxDelegate> _Nullable delegate;
> 	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
> 	NSObject WeakDelegate { get; set; }
> }
> 
> // typedef void (^UAInboxMessageCallbackBlock)(UAInboxMessage * _Nonnull);
> delegate void UAInboxMessageCallbackBlock (UAInboxMessage arg0);
> 
> // @interface UAInboxMessage : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInboxMessage
> {
> 	// @property (readonly, nonatomic) NSString * _Nonnull messageID;
> 	[Export ("messageID")]
> 	string MessageID { get; }
> 
> 	// @property (readonly, nonatomic) NSURL * _Nonnull messageBodyURL;
> 	[Export ("messageBodyURL")]
> 	NSUrl MessageBodyURL { get; }
> 
> 	// @property (readonly, nonatomic) NSURL * _Nonnull messageURL;
> 	[Export ("messageURL")]
> 	NSUrl MessageURL { get; }
> 
> 	// @property (readonly, nonatomic) NSString * _Nonnull contentType;
> 	[Export ("contentType")]
> 	string ContentType { get; }
> 
> 	// @property (readonly, nonatomic) BOOL unread;
> 	[Export ("unread")]
> 	bool Unread { get; }
> 
> 	// @property (readonly, nonatomic) BOOL deleted;
> 	[Export ("deleted")]
> 	bool Deleted { get; }
> 
> 	// @property (readonly, nonatomic) NSDate * _Nonnull messageSent;
> 	[Export ("messageSent")]
> 	NSDate MessageSent { get; }
> 
> 	// @property (readonly, nonatomic) NSDate * _Nullable messageExpiration;
> 	[NullAllowed, Export ("messageExpiration")]
> 	NSDate MessageExpiration { get; }
> 
> 	// @property (readonly, nonatomic) NSString * _Nonnull title;
> 	[Export ("title")]
> 	string Title { get; }
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull extra;
> 	[Export ("extra")]
> 	NSDictionary Extra { get; }
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull rawMessageObject;
> 	[Export ("rawMessageObject")]
> 	NSDictionary RawMessageObject { get; }
> 
> 	// @property (readonly, nonatomic, weak) UAInboxMessageList * _Nullable inbox;
> 	[NullAllowed, Export ("inbox", ArgumentSemantic.Weak)]
> 	UAInboxMessageList Inbox { get; }
> 
> 	// -(UADisposable * _Nullable)markMessageReadWithCompletionHandler:(UAInboxMessageCallbackBlock _Nullable)completionHandler;
> 	[Export ("markMessageReadWithCompletionHandler:")]
> 	[return: NullAllowed]
> 	UADisposable MarkMessageReadWithCompletionHandler ([NullAllowed] UAInboxMessageCallbackBlock completionHandler);
> 
> 	// -(BOOL)isExpired;
> 	[Export ("isExpired")]
> 	[Verify (MethodToProperty)]
> 	bool IsExpired { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAUserCreatedNotification;
> 	[Field ("UAUserCreatedNotification", "__Internal")]
> 	NSString UAUserCreatedNotification { get; }
> }
> 
> // @interface UAUser : NSObject
> [BaseType (typeof(NSObject))]
> interface UAUser
> {
> 	// @property (readonly, getter = isCreated, nonatomic) BOOL created;
> 	[Export ("created")]
> 	bool Created { [Bind ("isCreated")] get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable username;
> 	[NullAllowed, Export ("username")]
> 	string Username { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable password;
> 	[NullAllowed, Export ("password")]
> 	string Password { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable url;
> 	[NullAllowed, Export ("url")]
> 	string Url { get; }
> }
> 
> // typedef void (^UAInboxMessageListCallbackBlock)();
> delegate void UAInboxMessageListCallbackBlock ();
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAInboxMessageListWillUpdateNotification;
> 	[Field ("UAInboxMessageListWillUpdateNotification", "__Internal")]
> 	NSString UAInboxMessageListWillUpdateNotification { get; }
> 
> 	// extern NSString *const _Nonnull UAInboxMessageListUpdatedNotification;
> 	[Field ("UAInboxMessageListUpdatedNotification", "__Internal")]
> 	NSString UAInboxMessageListUpdatedNotification { get; }
> }
> 
> // @interface UAInboxMessageList : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInboxMessageList
> {
> 	// -(UADisposable * _Nullable)markMessagesRead:(NSArray * _Nonnull)messages completionHandler:(UAInboxMessageListCallbackBlock _Nullable)completionHandler;
> 	[Export ("markMessagesRead:completionHandler:")]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	UADisposable MarkMessagesRead (NSObject[] messages, [NullAllowed] UAInboxMessageListCallbackBlock completionHandler);
> 
> 	// -(UADisposable * _Nullable)markMessagesDeleted:(NSArray * _Nonnull)messages completionHandler:(UAInboxMessageListCallbackBlock _Nullable)completionHandler;
> 	[Export ("markMessagesDeleted:completionHandler:")]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	UADisposable MarkMessagesDeleted (NSObject[] messages, [NullAllowed] UAInboxMessageListCallbackBlock completionHandler);
> 
> 	// -(UADisposable * _Nullable)retrieveMessageListWithSuccessBlock:(UAInboxMessageListCallbackBlock _Nullable)successBlock withFailureBlock:(UAInboxMessageListCallbackBlock _Nullable)failureBlock;
> 	[Export ("retrieveMessageListWithSuccessBlock:withFailureBlock:")]
> 	[return: NullAllowed]
> 	UADisposable RetrieveMessageListWithSuccessBlock ([NullAllowed] UAInboxMessageListCallbackBlock successBlock, [NullAllowed] UAInboxMessageListCallbackBlock failureBlock);
> 
> 	// -(NSArray<UAInboxMessage *> * _Nonnull)messagesFilteredUsingPredicate:(NSPredicate * _Nonnull)predicate;
> 	[Export ("messagesFilteredUsingPredicate:")]
> 	UAInboxMessage[] MessagesFilteredUsingPredicate (NSPredicate predicate);
> 
> 	// -(NSUInteger)messageCount;
> 	[Export ("messageCount")]
> 	[Verify (MethodToProperty)]
> 	nuint MessageCount { get; }
> 
> 	// -(UAInboxMessage * _Nullable)messageForBodyURL:(NSURL * _Nonnull)url;
> 	[Export ("messageForBodyURL:")]
> 	[return: NullAllowed]
> 	UAInboxMessage MessageForBodyURL (NSUrl url);
> 
> 	// -(UAInboxMessage * _Nullable)messageForID:(NSString * _Nonnull)messageID;
> 	[Export ("messageForID:")]
> 	[return: NullAllowed]
> 	UAInboxMessage MessageForID (string messageID);
> 
> 	// @property (readonly, nonatomic, strong) NSArray<UAInboxMessage *> * _Nonnull messages;
> 	[Export ("messages", ArgumentSemantic.Strong)]
> 	UAInboxMessage[] Messages { get; }
> 
> 	// @property (assign) NSInteger unreadCount;
> 	[Export ("unreadCount")]
> 	nint UnreadCount { get; set; }
> 
> 	// @property (readonly) BOOL isRetrieving;
> 	[Export ("isRetrieving")]
> 	bool IsRetrieving { get; }
> 
> 	// @property (readonly) BOOL isBatchUpdating;
> 	[Export ("isBatchUpdating")]
> 	bool IsBatchUpdating { get; }
> }
> 
> // @interface UAInboxUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInboxUtils
> {
> 	// +(NSString * _Nullable)inboxMessageIDFromNotification:(NSDictionary * _Nonnull)notification;
> 	[Static]
> 	[Export ("inboxMessageIDFromNotification:")]
> 	[return: NullAllowed]
> 	string InboxMessageIDFromNotification (NSDictionary notification);
> 
> 	// +(NSString * _Nullable)inboxMessageIDFromValue:(id _Nonnull)values;
> 	[Static]
> 	[Export ("inboxMessageIDFromValue:")]
> 	[return: NullAllowed]
> 	string InboxMessageIDFromValue (NSObject values);
> }
> 
> // @interface UAIncomingInAppMessageAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAIncomingInAppMessageAction
> {
> }
> 
> // @interface UAInstallAttributionEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAInstallAttributionEvent
> {
> 	// +(instancetype _Nonnull)event;
> 	[Static]
> 	[Export ("event")]
> 	UAInstallAttributionEvent Event ();
> 
> 	// +(instancetype _Nonnull)eventWithAppPurchaseDate:(NSDate * _Nonnull)appPurchaseDate iAdImpressionDate:(NSDate * _Nonnull)iAdImpressionDate;
> 	[Static]
> 	[Export ("eventWithAppPurchaseDate:iAdImpressionDate:")]
> 	UAInstallAttributionEvent EventWithAppPurchaseDate (NSDate appPurchaseDate, NSDate iAdImpressionDate);
> }
> 
> // @interface UAWhitelist : NSObject
> [BaseType (typeof(NSObject))]
> interface UAWhitelist
> {
> 	// +(instancetype _Nonnull)whitelistWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("whitelistWithConfig:")]
> 	UAWhitelist WhitelistWithConfig (UAConfig config);
> 
> 	// -(BOOL)addEntry:(NSString * _Nonnull)patternString;
> 	[Export ("addEntry:")]
> 	bool AddEntry (string patternString);
> 
> 	// -(BOOL)isWhitelisted:(NSURL * _Nonnull)url;
> 	[Export ("isWhitelisted:")]
> 	bool IsWhitelisted (NSUrl url);
> }
> 
> // @interface UAirshipVersion : NSObject
> [BaseType (typeof(NSObject))]
> interface UAirshipVersion
> {
> 	// +(NSString * _Nonnull)get;
> 	[Static]
> 	[Export ("get")]
> 	[Verify (MethodToProperty)]
> 	string Get { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAirshipTakeOffBackgroundThreadException;
> 	[Field ("UAirshipTakeOffBackgroundThreadException", "__Internal")]
> 	NSString UAirshipTakeOffBackgroundThreadException { get; }
> }
> 
> // @interface UAirship : NSObject
> [BaseType (typeof(NSObject))]
> interface UAirship
> {
> 	// @property (readonly, nonatomic, strong) UAConfig * _Nonnull config;
> 	[Export ("config", ArgumentSemantic.Strong)]
> 	UAConfig Config { get; }
> 
> 	// @property (readonly, nonatomic, strong) UAAnalytics * _Nonnull analytics;
> 	[Export ("analytics", ArgumentSemantic.Strong)]
> 	UAAnalytics Analytics { get; }
> 
> 	// @property (readonly, nonatomic, strong) UAActionRegistry * _Nonnull actionRegistry;
> 	[Export ("actionRegistry", ArgumentSemantic.Strong)]
> 	UAActionRegistry ActionRegistry { get; }
> 
> 	// @property (readonly, nonatomic, strong) UAApplicationMetrics * _Nonnull applicationMetrics;
> 	[Export ("applicationMetrics", ArgumentSemantic.Strong)]
> 	UAApplicationMetrics ApplicationMetrics { get; }
> 
> 	// @property (readonly, assign, nonatomic) BOOL remoteNotificationBackgroundModeEnabled;
> 	[Export ("remoteNotificationBackgroundModeEnabled")]
> 	bool RemoteNotificationBackgroundModeEnabled { get; }
> 
> 	[Wrap ("WeakJsDelegate")]
> 	[NullAllowed]
> 	UAJavaScriptDelegate JsDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAJavaScriptDelegate> _Nullable jsDelegate;
> 	[NullAllowed, Export ("jsDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakJsDelegate { get; set; }
> 
> 	// @property (readonly, nonatomic, strong) UAWhitelist * _Nonnull whitelist;
> 	[Export ("whitelist", ArgumentSemantic.Strong)]
> 	UAWhitelist Whitelist { get; }
> 
> 	// +(void)setLogging:(BOOL)enabled;
> 	[Static]
> 	[Export ("setLogging:")]
> 	void SetLogging (bool enabled);
> 
> 	// +(void)setLogLevel:(UALogLevel)level;
> 	[Static]
> 	[Export ("setLogLevel:")]
> 	void SetLogLevel (UALogLevel level);
> 
> 	// +(void)setLoudImpErrorLogging:(BOOL)enabled;
> 	[Static]
> 	[Export ("setLoudImpErrorLogging:")]
> 	void SetLoudImpErrorLogging (bool enabled);
> 
> 	// +(void)takeOff:(UAConfig * _Nullable)config;
> 	[Static]
> 	[Export ("takeOff:")]
> 	void TakeOff ([NullAllowed] UAConfig config);
> 
> 	// +(void)takeOff;
> 	[Static]
> 	[Export ("takeOff")]
> 	void TakeOff ();
> 
> 	// +(UAirship * _Null_unspecified)shared;
> 	[Static]
> 	[Export ("shared")]
> 	[Verify (MethodToProperty)]
> 	UAirship Shared { get; }
> 
> 	// +(UAPush * _Null_unspecified)push;
> 	[Static]
> 	[Export ("push")]
> 	[Verify (MethodToProperty)]
> 	UAPush Push { get; }
> 
> 	// +(UAInbox * _Null_unspecified)inbox;
> 	[Static]
> 	[Export ("inbox")]
> 	[Verify (MethodToProperty)]
> 	UAInbox Inbox { get; }
> 
> 	// +(UAUser * _Null_unspecified)inboxUser;
> 	[Static]
> 	[Export ("inboxUser")]
> 	[Verify (MethodToProperty)]
> 	UAUser InboxUser { get; }
> 
> 	// +(UAInAppMessaging * _Null_unspecified)inAppMessaging;
> 	[Static]
> 	[Export ("inAppMessaging")]
> 	[Verify (MethodToProperty)]
> 	UAInAppMessaging InAppMessaging { get; }
> 
> 	// +(UADefaultMessageCenter * _Null_unspecified)defaultMessageCenter;
> 	[Static]
> 	[Export ("defaultMessageCenter")]
> 	[Verify (MethodToProperty)]
> 	UADefaultMessageCenter DefaultMessageCenter { get; }
> 
> 	// +(UANamedUser * _Null_unspecified)namedUser;
> 	[Static]
> 	[Export ("namedUser")]
> 	[Verify (MethodToProperty)]
> 	UANamedUser NamedUser { get; }
> 
> 	// +(NSBundle * _Nullable)resources;
> 	[Static]
> 	[NullAllowed, Export ("resources")]
> 	[Verify (MethodToProperty)]
> 	NSBundle Resources { get; }
> 
> 	// +(UALocation * _Null_unspecified)location;
> 	[Static]
> 	[Export ("location")]
> 	[Verify (MethodToProperty)]
> 	UALocation Location { get; }
> 
> 	// +(UAAutomation * _Null_unspecified)automation;
> 	[Static]
> 	[Export ("automation")]
> 	[Verify (MethodToProperty)]
> 	UAAutomation Automation { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAJSONMatcherErrorDomain;
> 	[Field ("UAJSONMatcherErrorDomain", "__Internal")]
> 	NSString UAJSONMatcherErrorDomain { get; }
> }
> 
> // @interface UAJSONMatcher : NSObject
> [BaseType (typeof(NSObject))]
> interface UAJSONMatcher
> {
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> 
> 	// -(BOOL)evaluateObject:(id _Nullable)object;
> 	[Export ("evaluateObject:")]
> 	bool EvaluateObject ([NullAllowed] NSObject @object);
> 
> 	// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher;
> 	[Static]
> 	[Export ("matcherWithValueMatcher:")]
> 	UAJSONMatcher MatcherWithValueMatcher (UAJSONValueMatcher valueMatcher);
> 
> 	// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key;
> 	[Static]
> 	[Export ("matcherWithValueMatcher:key:")]
> 	UAJSONMatcher MatcherWithValueMatcher (UAJSONValueMatcher valueMatcher, string key);
> 
> 	// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key scope:(NSArray<NSString *> * _Nonnull)scope;
> 	[Static]
> 	[Export ("matcherWithValueMatcher:key:scope:")]
> 	UAJSONMatcher MatcherWithValueMatcher (UAJSONValueMatcher valueMatcher, string key, string[] scope);
> 
> 	// +(instancetype _Nullable)matcherWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("matcherWithJSON:error:")]
> 	[return: NullAllowed]
> 	UAJSONMatcher MatcherWithJSON (NSObject json, [NullAllowed] out NSError error);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAJSONValueMatcherErrorDomain;
> 	[Field ("UAJSONValueMatcherErrorDomain", "__Internal")]
> 	NSString UAJSONValueMatcherErrorDomain { get; }
> }
> 
> // @interface UAJSONValueMatcher : NSObject
> [BaseType (typeof(NSObject))]
> interface UAJSONValueMatcher
> {
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> 
> 	// -(BOOL)evaluateObject:(id _Nullable)object;
> 	[Export ("evaluateObject:")]
> 	bool EvaluateObject ([NullAllowed] NSObject @object);
> 
> 	// +(instancetype _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)number;
> 	[Static]
> 	[Export ("matcherWhereNumberAtLeast:")]
> 	UAJSONValueMatcher MatcherWhereNumberAtLeast (NSNumber number);
> 
> 	// +(instancetype _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)lowerNumber atMost:(NSNumber * _Nonnull)higherNumber;
> 	[Static]
> 	[Export ("matcherWhereNumberAtLeast:atMost:")]
> 	UAJSONValueMatcher MatcherWhereNumberAtLeast (NSNumber lowerNumber, NSNumber higherNumber);
> 
> 	// +(instancetype _Nonnull)matcherWhereNumberAtMost:(NSNumber * _Nonnull)number;
> 	[Static]
> 	[Export ("matcherWhereNumberAtMost:")]
> 	UAJSONValueMatcher MatcherWhereNumberAtMost (NSNumber number);
> 
> 	// +(instancetype _Nonnull)matcherWhereNumberEquals:(NSNumber * _Nonnull)number;
> 	[Static]
> 	[Export ("matcherWhereNumberEquals:")]
> 	UAJSONValueMatcher MatcherWhereNumberEquals (NSNumber number);
> 
> 	// +(instancetype _Nonnull)matcherWhereStringEquals:(NSString * _Nonnull)string;
> 	[Static]
> 	[Export ("matcherWhereStringEquals:")]
> 	UAJSONValueMatcher MatcherWhereStringEquals (string @string);
> 
> 	// +(instancetype _Nonnull)matcherWhereValueIsPresent:(BOOL)present;
> 	[Static]
> 	[Export ("matcherWhereValueIsPresent:")]
> 	UAJSONValueMatcher MatcherWhereValueIsPresent (bool present);
> 
> 	// +(instancetype _Nullable)matcherWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("matcherWithJSON:error:")]
> 	[return: NullAllowed]
> 	UAJSONValueMatcher MatcherWithJSON (NSObject json, [NullAllowed] out NSError error);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAJSONPredicateErrorDomain;
> 	[Field ("UAJSONPredicateErrorDomain", "__Internal")]
> 	NSString UAJSONPredicateErrorDomain { get; }
> }
> 
> // @interface UAJSONPredicate : NSObject
> [BaseType (typeof(NSObject))]
> interface UAJSONPredicate
> {
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> 
> 	// -(BOOL)evaluateObject:(id _Nullable)object;
> 	[Export ("evaluateObject:")]
> 	bool EvaluateObject ([NullAllowed] NSObject @object);
> 
> 	// +(instancetype _Nonnull)predicateWithJSONMatcher:(UAJSONMatcher * _Nonnull)matcher;
> 	[Static]
> 	[Export ("predicateWithJSONMatcher:")]
> 	UAJSONPredicate PredicateWithJSONMatcher (UAJSONMatcher matcher);
> 
> 	// +(instancetype _Nonnull)andPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nonnull)subpredicates;
> 	[Static]
> 	[Export ("andPredicateWithSubpredicates:")]
> 	UAJSONPredicate AndPredicateWithSubpredicates (UAJSONPredicate[] subpredicates);
> 
> 	// +(instancetype _Nonnull)orPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nonnull)subpredicates;
> 	[Static]
> 	[Export ("orPredicateWithSubpredicates:")]
> 	UAJSONPredicate OrPredicateWithSubpredicates (UAJSONPredicate[] subpredicates);
> 
> 	// +(instancetype _Nonnull)notPredicateWithSubpredicate:(UAJSONPredicate * _Nonnull)subpredicate;
> 	[Static]
> 	[Export ("notPredicateWithSubpredicate:")]
> 	UAJSONPredicate NotPredicateWithSubpredicate (UAJSONPredicate subpredicate);
> 
> 	// +(instancetype _Nullable)predicateWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
> 	[Static]
> 	[Export ("predicateWithJSON:error:")]
> 	[return: NullAllowed]
> 	UAJSONPredicate PredicateWithJSON (NSObject json, [NullAllowed] out NSError error);
> }
> 
> // @interface UALandingPageAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UALandingPageAction
> {
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const UALandingPageURLKey;
> 	[Field ("UALandingPageURLKey", "__Internal")]
> 	NSString UALandingPageURLKey { get; }
> 
> 	// extern NSString *const UALandingPageHeightKey;
> 	[Field ("UALandingPageHeightKey", "__Internal")]
> 	NSString UALandingPageHeightKey { get; }
> 
> 	// extern NSString *const UALandingPageWidthKey;
> 	[Field ("UALandingPageWidthKey", "__Internal")]
> 	NSString UALandingPageWidthKey { get; }
> 
> 	// extern NSString *const UALandingPageAspectLockKey;
> 	[Field ("UALandingPageAspectLockKey", "__Internal")]
> 	NSString UALandingPageAspectLockKey { get; }
> 
> 	// extern NSString *const UALandingPageFill;
> 	[Field ("UALandingPageFill", "__Internal")]
> 	NSString UALandingPageFill { get; }
> }
> 
> // @interface UALandingPageOverlayController : NSObject <UIWebViewDelegate, UARichContentWindow>
> [BaseType (typeof(NSObject))]
> interface UALandingPageOverlayController : IUIWebViewDelegate, IUARichContentWindow
> {
> 	// +(void)showURL:(NSURL * _Nonnull)url withHeaders:(NSDictionary * _Nullable)headers;
> 	[Static]
> 	[Export ("showURL:withHeaders:")]
> 	void ShowURL (NSUrl url, [NullAllowed] NSDictionary headers);
> 
> 	// +(void)showURL:(NSURL * _Nonnull)url withHeaders:(NSDictionary * _Nullable)headers size:(CGSize)size aspectLock:(BOOL)aspectLock;
> 	[Static]
> 	[Export ("showURL:withHeaders:size:aspectLock:")]
> 	void ShowURL (NSUrl url, [NullAllowed] NSDictionary headers, CGSize size, bool aspectLock);
> 
> 	// +(void)showMessage:(UAInboxMessage * _Nonnull)message withHeaders:(NSDictionary * _Nullable)headers;
> 	[Static]
> 	[Export ("showMessage:withHeaders:")]
> 	void ShowMessage (UAInboxMessage message, [NullAllowed] NSDictionary headers);
> 
> 	// +(void)showMessage:(UAInboxMessage * _Nonnull)message withHeaders:(NSDictionary * _Nullable)headers size:(CGSize)size aspectLock:(BOOL)aspectLock;
> 	[Static]
> 	[Export ("showMessage:withHeaders:size:aspectLock:")]
> 	void ShowMessage (UAInboxMessage message, [NullAllowed] NSDictionary headers, CGSize size, bool aspectLock);
> 
> 	// +(void)showMessage:(UAInboxMessage * _Nonnull)message;
> 	[Static]
> 	[Export ("showMessage:")]
> 	void ShowMessage (UAInboxMessage message);
> 
> 	// +(void)closeAll:(BOOL)animated;
> 	[Static]
> 	[Export ("closeAll:")]
> 	void CloseAll (bool animated);
> }
> 
> // @protocol UALocationDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UALocationDelegate
> {
> 	// @optional -(void)locationUpdatesStarted;
> 	[Export ("locationUpdatesStarted")]
> 	void LocationUpdatesStarted ();
> 
> 	// @optional -(void)locationUpdatesStopped;
> 	[Export ("locationUpdatesStopped")]
> 	void LocationUpdatesStopped ();
> 
> 	// @optional -(void)receivedLocationUpdates:(NSArray * _Nonnull)locations;
> 	[Export ("receivedLocationUpdates:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void ReceivedLocationUpdates (NSObject[] locations);
> }
> 
> // @interface UALocation : NSObject
> [BaseType (typeof(NSObject))]
> interface UALocation
> {
> 	// @property (getter = isAutoRequestAuthorizationEnabled, assign, nonatomic) BOOL autoRequestAuthorizationEnabled;
> 	[Export ("autoRequestAuthorizationEnabled")]
> 	bool AutoRequestAuthorizationEnabled { [Bind ("isAutoRequestAuthorizationEnabled")] get; set; }
> 
> 	// @property (getter = isLocationUpdatesEnabled, assign, nonatomic) BOOL locationUpdatesEnabled;
> 	[Export ("locationUpdatesEnabled")]
> 	bool LocationUpdatesEnabled { [Bind ("isLocationUpdatesEnabled")] get; set; }
> 
> 	// @property (getter = isBackgroundLocationUpdatesAllowed, assign, nonatomic) BOOL backgroundLocationUpdatesAllowed;
> 	[Export ("backgroundLocationUpdatesAllowed")]
> 	bool BackgroundLocationUpdatesAllowed { [Bind ("isBackgroundLocationUpdatesAllowed")] get; set; }
> 
> 	[Wrap ("WeakDelegate")]
> 	[NullAllowed]
> 	UALocationDelegate Delegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UALocationDelegate> _Nullable delegate;
> 	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
> 	NSObject WeakDelegate { get; set; }
> 
> 	// @property (readonly, nonatomic) CLLocation * _Nullable lastLocation;
> 	[NullAllowed, Export ("lastLocation")]
> 	CLLocation LastLocation { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventForegroundKey;
> 	[Field ("UALocationEventForegroundKey", "__Internal")]
> 	NSString UALocationEventForegroundKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventLatitudeKey;
> 	[Field ("UALocationEventLatitudeKey", "__Internal")]
> 	NSString UALocationEventLatitudeKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventLongitudeKey;
> 	[Field ("UALocationEventLongitudeKey", "__Internal")]
> 	NSString UALocationEventLongitudeKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventDesiredAccuracyKey;
> 	[Field ("UALocationEventDesiredAccuracyKey", "__Internal")]
> 	NSString UALocationEventDesiredAccuracyKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventUpdateTypeKey;
> 	[Field ("UALocationEventUpdateTypeKey", "__Internal")]
> 	NSString UALocationEventUpdateTypeKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventProviderKey;
> 	[Field ("UALocationEventProviderKey", "__Internal")]
> 	NSString UALocationEventProviderKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventDistanceFilterKey;
> 	[Field ("UALocationEventDistanceFilterKey", "__Internal")]
> 	NSString UALocationEventDistanceFilterKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventHorizontalAccuracyKey;
> 	[Field ("UALocationEventHorizontalAccuracyKey", "__Internal")]
> 	NSString UALocationEventHorizontalAccuracyKey { get; }
> 
> 	// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventVerticalAccuracyKey;
> 	[Field ("UALocationEventVerticalAccuracyKey", "__Internal")]
> 	NSString UALocationEventVerticalAccuracyKey { get; }
> 
> 	// extern UALocationEventUpdateType *const _Nonnull UALocationEventAnalyticsType;
> 	[Field ("UALocationEventAnalyticsType", "__Internal")]
> 	NSString UALocationEventAnalyticsType { get; }
> 
> 	// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeChange;
> 	[Field ("UALocationEventUpdateTypeChange", "__Internal")]
> 	NSString UALocationEventUpdateTypeChange { get; }
> 
> 	// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeContinuous;
> 	[Field ("UALocationEventUpdateTypeContinuous", "__Internal")]
> 	NSString UALocationEventUpdateTypeContinuous { get; }
> 
> 	// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeSingle;
> 	[Field ("UALocationEventUpdateTypeSingle", "__Internal")]
> 	NSString UALocationEventUpdateTypeSingle { get; }
> 
> 	// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeNone;
> 	[Field ("UALocationEventUpdateTypeNone", "__Internal")]
> 	NSString UALocationEventUpdateTypeNone { get; }
> 
> 	// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderGps;
> 	[Field ("UALocationServiceProviderGps", "__Internal")]
> 	NSString UALocationServiceProviderGps { get; }
> 
> 	// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderNetwork;
> 	[Field ("UALocationServiceProviderNetwork", "__Internal")]
> 	NSString UALocationServiceProviderNetwork { get; }
> 
> 	// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderUnknown;
> 	[Field ("UALocationServiceProviderUnknown", "__Internal")]
> 	NSString UALocationServiceProviderUnknown { get; }
> 
> 	// extern NSString *const _Nonnull UAAnalyticsValueNone;
> 	[Field ("UAAnalyticsValueNone", "__Internal")]
> 	NSString UAAnalyticsValueNone { get; }
> }
> 
> // @interface UALocationEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UALocationEvent
> {
> 	// +(UALocationEvent * _Nonnull)locationEventWithLocation:(CLLocation * _Nonnull)location providerType:(UALocationServiceProviderType * _Nullable)providerType desiredAccuracy:(NSNumber * _Nullable)desiredAccuracy distanceFilter:(NSNumber * _Nullable)distanceFilter;
> 	[Static]
> 	[Export ("locationEventWithLocation:providerType:desiredAccuracy:distanceFilter:")]
> 	UALocationEvent LocationEventWithLocation (CLLocation location, [NullAllowed] string providerType, [NullAllowed] NSNumber desiredAccuracy, [NullAllowed] NSNumber distanceFilter);
> 
> 	// +(UALocationEvent * _Nonnull)singleLocationEventWithLocation:(CLLocation * _Nonnull)location providerType:(UALocationServiceProviderType * _Nullable)providerType desiredAccuracy:(NSNumber * _Nullable)desiredAccuracy distanceFilter:(NSNumber * _Nullable)distanceFilter;
> 	[Static]
> 	[Export ("singleLocationEventWithLocation:providerType:desiredAccuracy:distanceFilter:")]
> 	UALocationEvent SingleLocationEventWithLocation (CLLocation location, [NullAllowed] string providerType, [NullAllowed] NSNumber desiredAccuracy, [NullAllowed] NSNumber distanceFilter);
> 
> 	// +(UALocationEvent * _Nonnull)significantChangeLocationEventWithLocation:(CLLocation * _Nonnull)location providerType:(UALocationServiceProviderType * _Nullable)providerType;
> 	[Static]
> 	[Export ("significantChangeLocationEventWithLocation:providerType:")]
> 	UALocationEvent SignificantChangeLocationEventWithLocation (CLLocation location, [NullAllowed] string providerType);
> 
> 	// +(UALocationEvent * _Nonnull)standardLocationEventWithLocation:(CLLocation * _Nonnull)location providerType:(UALocationServiceProviderType * _Nullable)providerType desiredAccuracy:(NSNumber * _Nullable)desiredAccuracy distanceFilter:(NSNumber * _Nullable)distanceFilter;
> 	[Static]
> 	[Export ("standardLocationEventWithLocation:providerType:desiredAccuracy:distanceFilter:")]
> 	UALocationEvent StandardLocationEventWithLocation (CLLocation location, [NullAllowed] string providerType, [NullAllowed] NSNumber desiredAccuracy, [NullAllowed] NSNumber distanceFilter);
> }
> 
> // @interface UAMediaEventTemplate : NSObject
> [BaseType (typeof(NSObject))]
> interface UAMediaEventTemplate
> {
> 	// +(instancetype _Nonnull)browsedTemplate;
> 	[Static]
> 	[Export ("browsedTemplate")]
> 	UAMediaEventTemplate BrowsedTemplate ();
> 
> 	// +(instancetype _Nonnull)starredTemplate;
> 	[Static]
> 	[Export ("starredTemplate")]
> 	UAMediaEventTemplate StarredTemplate ();
> 
> 	// +(instancetype _Nonnull)sharedTemplate;
> 	[Static]
> 	[Export ("sharedTemplate")]
> 	UAMediaEventTemplate SharedTemplate ();
> 
> 	// +(instancetype _Nonnull)sharedTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
> 	[Static]
> 	[Export ("sharedTemplateWithSource:withMedium:")]
> 	UAMediaEventTemplate SharedTemplateWithSource ([NullAllowed] string source, [NullAllowed] string medium);
> 
> 	// +(instancetype _Nonnull)consumedTemplate;
> 	[Static]
> 	[Export ("consumedTemplate")]
> 	UAMediaEventTemplate ConsumedTemplate ();
> 
> 	// +(instancetype _Nonnull)consumedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("consumedTemplateWithValueFromString:")]
> 	UAMediaEventTemplate ConsumedTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)consumedTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("consumedTemplateWithValue:")]
> 	UAMediaEventTemplate ConsumedTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// @property (copy, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable category;
> 	[NullAllowed, Export ("category")]
> 	string Category { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable type;
> 	[NullAllowed, Export ("type")]
> 	string Type { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable eventDescription;
> 	[NullAllowed, Export ("eventDescription")]
> 	string EventDescription { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL isFeature;
> 	[Export ("isFeature")]
> 	bool IsFeature { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable author;
> 	[NullAllowed, Export ("author")]
> 	string Author { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable publishedDate;
> 	[NullAllowed, Export ("publishedDate")]
> 	string PublishedDate { get; set; }
> 
> 	// -(UACustomEvent * _Nonnull)createEvent;
> 	[Export ("createEvent")]
> 	[Verify (MethodToProperty)]
> 	UACustomEvent CreateEvent { get; }
> }
> 
> // @interface UAMessageCenterDateUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UAMessageCenterDateUtils
> {
> 	// +(NSString *)formattedDateRelativeToNow:(NSDate *)date;
> 	[Static]
> 	[Export ("formattedDateRelativeToNow:")]
> 	string FormattedDateRelativeToNow (NSDate date);
> }
> 
> // @interface UANamedUser : NSObject
> [BaseType (typeof(NSObject))]
> interface UANamedUser
> {
> 	// @property (copy, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// -(void)forceUpdate;
> 	[Export ("forceUpdate")]
> 	void ForceUpdate ();
> 
> 	// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("addTags:group:")]
> 	void AddTags (string[] tags, string tagGroupID);
> 
> 	// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("removeTags:group:")]
> 	void RemoveTags (string[] tags, string tagGroupID);
> 
> 	// -(void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("setTags:group:")]
> 	void SetTags (string[] tags, string tagGroupID);
> 
> 	// -(void)updateTags;
> 	[Export ("updateTags")]
> 	void UpdateTags ();
> }
> 
> // @interface UANotificationAction : NSObject
> [BaseType (typeof(NSObject))]
> interface UANotificationAction
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
> 	[Export ("identifier")]
> 	string Identifier { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
> 	[Export ("title")]
> 	string Title { get; }
> 
> 	// @property (readonly, assign, nonatomic) UANotificationActionOptions options;
> 	[Export ("options", ArgumentSemantic.Assign)]
> 	UANotificationActionOptions Options { get; }
> 
> 	// -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title options:(UANotificationActionOptions)options;
> 	[Export ("initWithIdentifier:title:options:")]
> 	IntPtr Constructor (string identifier, string title, UANotificationActionOptions options);
> 
> 	// +(instancetype _Nonnull)actionWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title options:(UANotificationActionOptions)options;
> 	[Static]
> 	[Export ("actionWithIdentifier:title:options:")]
> 	UANotificationAction ActionWithIdentifier (string identifier, string title, UANotificationActionOptions options);
> 
> 	// -(UIUserNotificationAction * _Nullable)asUIUserNotificationAction;
> 	[NullAllowed, Export ("asUIUserNotificationAction")]
> 	[Verify (MethodToProperty)]
> 	UIUserNotificationAction AsUIUserNotificationAction { get; }
> 
> 	// -(UNNotificationAction * _Nullable)asUNNotificationAction __attribute__((availability(ios, introduced=10.0)));
> 	[iOS (10, 0)]
> 	[NullAllowed, Export ("asUNNotificationAction")]
> 	[Verify (MethodToProperty)]
> 	UNNotificationAction AsUNNotificationAction { get; }
> }
> 
> // @interface UANotificationCategories : NSObject
> [BaseType (typeof(NSObject))]
> interface UANotificationCategories
> {
> 	// +(NSSet * _Nonnull)createCategoriesFromFile:(NSString * _Nonnull)filePath;
> 	[Static]
> 	[Export ("createCategoriesFromFile:")]
> 	NSSet CreateCategoriesFromFile (string filePath);
> 
> 	// +(UANotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray * _Nonnull)actionDefinitions;
> 	[Static]
> 	[Export ("createCategory:actions:")]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	UANotificationCategory CreateCategory (string categoryId, NSObject[] actionDefinitions);
> }
> 
> // @interface UANotificationCategory : NSObject
> [BaseType (typeof(NSObject))]
> interface UANotificationCategory
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
> 	[Export ("identifier")]
> 	string Identifier { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSArray<UANotificationAction *> * _Nonnull actions;
> 	[Export ("actions", ArgumentSemantic.Copy)]
> 	UANotificationAction[] Actions { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull intentIdentifiers;
> 	[Export ("intentIdentifiers", ArgumentSemantic.Copy)]
> 	string[] IntentIdentifiers { get; }
> 
> 	// @property (readonly, assign, nonatomic) UANotificationCategoryOptions options;
> 	[Export ("options", ArgumentSemantic.Assign)]
> 	UANotificationCategoryOptions Options { get; }
> 
> 	// +(instancetype _Nonnull)categoryWithIdentifier:(NSString * _Nonnull)identifier actions:(NSArray<UANotificationAction *> * _Nonnull)actions intentIdentifiers:(NSArray<NSString *> * _Nonnull)intentIdentifiers options:(UANotificationCategoryOptions)options;
> 	[Static]
> 	[Export ("categoryWithIdentifier:actions:intentIdentifiers:options:")]
> 	UANotificationCategory CategoryWithIdentifier (string identifier, UANotificationAction[] actions, string[] intentIdentifiers, UANotificationCategoryOptions options);
> }
> 
> // @interface UANotificationContent : NSObject
> [BaseType (typeof(NSObject))]
> interface UANotificationContent
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable alertTitle;
> 	[NullAllowed, Export ("alertTitle")]
> 	string AlertTitle { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable alertBody;
> 	[NullAllowed, Export ("alertBody")]
> 	string AlertBody { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable sound;
> 	[NullAllowed, Export ("sound")]
> 	string Sound { get; }
> 
> 	// @property (readonly, assign, nonatomic) NSNumber * _Nullable badge;
> 	[NullAllowed, Export ("badge", ArgumentSemantic.Assign)]
> 	NSNumber Badge { get; }
> 
> 	// @property (readonly, nonatomic, strong) NSNumber * _Nullable contentAvailable;
> 	[NullAllowed, Export ("contentAvailable", ArgumentSemantic.Strong)]
> 	NSNumber ContentAvailable { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable categoryIdentifier;
> 	[NullAllowed, Export ("categoryIdentifier")]
> 	string CategoryIdentifier { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable launchImage;
> 	[NullAllowed, Export ("launchImage")]
> 	string LaunchImage { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSDictionary * _Nullable localizationKeys;
> 	[NullAllowed, Export ("localizationKeys", ArgumentSemantic.Copy)]
> 	NSDictionary LocalizationKeys { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSDictionary * _Nonnull notificationInfo;
> 	[Export ("notificationInfo", ArgumentSemantic.Copy)]
> 	NSDictionary NotificationInfo { get; }
> 
> 	// @property (readonly, nonatomic, strong) UNNotification * _Nullable notification;
> 	[NullAllowed, Export ("notification", ArgumentSemantic.Strong)]
> 	UNNotification Notification { get; }
> 
> 	// +(instancetype _Nonnull)notificationWithNotificationInfo:(NSDictionary * _Nonnull)notificationInfo;
> 	[Static]
> 	[Export ("notificationWithNotificationInfo:")]
> 	UANotificationContent NotificationWithNotificationInfo (NSDictionary notificationInfo);
> 
> 	// +(instancetype _Nonnull)notificationWithUNNotification:(UNNotification * _Nonnull)notification;
> 	[Static]
> 	[Export ("notificationWithUNNotification:")]
> 	UANotificationContent NotificationWithUNNotification (UNNotification notification);
> }
> 
> // @interface UANotificationResponse : NSObject
> [BaseType (typeof(NSObject))]
> interface UANotificationResponse
> {
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull actionIdentifier;
> 	[Export ("actionIdentifier")]
> 	string ActionIdentifier { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull responseText;
> 	[Export ("responseText")]
> 	string ResponseText { get; }
> 
> 	// @property (readonly, nonatomic, strong) UANotificationContent * _Nonnull notificationContent;
> 	[Export ("notificationContent", ArgumentSemantic.Strong)]
> 	UANotificationContent NotificationContent { get; }
> 
> 	// @property (readonly, nonatomic, strong) UNNotificationResponse * _Nullable response;
> 	[NullAllowed, Export ("response", ArgumentSemantic.Strong)]
> 	UNNotificationResponse Response { get; }
> 
> 	// +(instancetype _Nonnull)notificationResponseWithNotificationInfo:(NSDictionary * _Nonnull)notificationInfo actionIdentifier:(NSString * _Nonnull)actionIdentifier responseText:(NSString * _Nullable)responseText;
> 	[Static]
> 	[Export ("notificationResponseWithNotificationInfo:actionIdentifier:responseText:")]
> 	UANotificationResponse NotificationResponseWithNotificationInfo (NSDictionary notificationInfo, string actionIdentifier, [NullAllowed] string responseText);
> 
> 	// +(instancetype _Nonnull)notificationResponseWithUNNotificationResponse:(UNNotificationResponse * _Nonnull)response;
> 	[Static]
> 	[Export ("notificationResponseWithUNNotificationResponse:")]
> 	UANotificationResponse NotificationResponseWithUNNotificationResponse (UNNotificationResponse response);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UANotificationDefaultActionIdentifier;
> 	[Field ("UANotificationDefaultActionIdentifier", "__Internal")]
> 	NSString UANotificationDefaultActionIdentifier { get; }
> 
> 	// extern NSString *const _Nonnull UANotificationDismissActionIdentifier;
> 	[Field ("UANotificationDismissActionIdentifier", "__Internal")]
> 	NSString UANotificationDismissActionIdentifier { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAOpenExternalURLActionErrorDomain;
> 	[Field ("UAOpenExternalURLActionErrorDomain", "__Internal")]
> 	NSString UAOpenExternalURLActionErrorDomain { get; }
> }
> 
> // @interface UAOpenExternalURLAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAOpenExternalURLAction
> {
> }
> 
> // @interface UAOverlayInboxMessageAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAOverlayInboxMessageAction
> {
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAOverlayInboxMessageActionErrorDomain;
> 	[Field ("UAOverlayInboxMessageActionErrorDomain", "__Internal")]
> 	NSString UAOverlayInboxMessageActionErrorDomain { get; }
> }
> 
> // @interface UAPasteboardAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAPasteboardAction
> {
> }
> 
> // @interface UAProximityRegion : NSObject
> [BaseType (typeof(NSObject))]
> interface UAProximityRegion
> {
> 	// @property (nonatomic, strong) NSNumber * _Nullable latitude;
> 	[NullAllowed, Export ("latitude", ArgumentSemantic.Strong)]
> 	NSNumber Latitude { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nullable longitude;
> 	[NullAllowed, Export ("longitude", ArgumentSemantic.Strong)]
> 	NSNumber Longitude { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nullable RSSI;
> 	[NullAllowed, Export ("RSSI", ArgumentSemantic.Strong)]
> 	NSNumber RSSI { get; set; }
> 
> 	// +(instancetype _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(NSNumber * _Nonnull)major minor:(NSNumber * _Nonnull)minor;
> 	[Static]
> 	[Export ("proximityRegionWithID:major:minor:")]
> 	[return: NullAllowed]
> 	UAProximityRegion ProximityRegionWithID (string proximityID, NSNumber major, NSNumber minor);
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAChannelCreatedEvent;
> 	[Field ("UAChannelCreatedEvent", "__Internal")]
> 	NSString UAChannelCreatedEvent { get; }
> 
> 	// extern NSString *const _Nonnull UAChannelCreatedEventChannelKey;
> 	[Field ("UAChannelCreatedEventChannelKey", "__Internal")]
> 	NSString UAChannelCreatedEventChannelKey { get; }
> 
> 	// extern NSString *const _Nonnull UAChannelCreatedEventExistingKey;
> 	[Field ("UAChannelCreatedEventExistingKey", "__Internal")]
> 	NSString UAChannelCreatedEventExistingKey { get; }
> }
> 
> // @protocol UARegistrationDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UARegistrationDelegate
> {
> 	// @optional -(void)registrationSucceededForChannelID:(NSString * _Nonnull)channelID deviceToken:(NSString * _Nonnull)deviceToken;
> 	[Export ("registrationSucceededForChannelID:deviceToken:")]
> 	void RegistrationSucceededForChannelID (string channelID, string deviceToken);
> 
> 	// @optional -(void)registrationFailed;
> 	[Export ("registrationFailed")]
> 	void RegistrationFailed ();
> 
> 	// @optional -(void)notificationRegistrationFinishedWithOptions:(UANotificationOptions)options categories:(NSSet * _Nonnull)categories;
> 	[Export ("notificationRegistrationFinishedWithOptions:categories:")]
> 	void NotificationRegistrationFinishedWithOptions (UANotificationOptions options, NSSet categories);
> 
> 	// @optional -(void)notificationAuthorizedOptionsDidChange:(UANotificationOptions)options;
> 	[Export ("notificationAuthorizedOptionsDidChange:")]
> 	void NotificationAuthorizedOptionsDidChange (UANotificationOptions options);
> }
> 
> // @protocol UAPushNotificationDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAPushNotificationDelegate
> {
> 	// @optional -(void)receivedForegroundNotification:(UANotificationContent * _Nonnull)notificationContent completionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Export ("receivedForegroundNotification:completionHandler:")]
> 	void ReceivedForegroundNotification (UANotificationContent notificationContent, Action completionHandler);
> 
> 	// @optional -(void)receivedBackgroundNotification:(UANotificationContent * _Nonnull)notificationContent completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
> 	[Export ("receivedBackgroundNotification:completionHandler:")]
> 	void ReceivedBackgroundNotification (UANotificationContent notificationContent, Action<UIBackgroundFetchResult> completionHandler);
> 
> 	// @optional -(void)receivedNotificationResponse:(UANotificationResponse * _Nonnull)notificationResponse completionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Export ("receivedNotificationResponse:completionHandler:")]
> 	void ReceivedNotificationResponse (UANotificationResponse notificationResponse, Action completionHandler);
> 
> 	// @optional -(UNNotificationPresentationOptions)presentationOptionsForNotification:(UNNotification * _Nonnull)notification;
> 	[Export ("presentationOptionsForNotification:")]
> 	UNNotificationPresentationOptions PresentationOptionsForNotification (UNNotification notification);
> }
> 
> // @interface UAPush : NSObject
> [BaseType (typeof(NSObject))]
> interface UAPush
> {
> 	// @property (assign, nonatomic) BOOL backgroundPushNotificationsEnabled;
> 	[Export ("backgroundPushNotificationsEnabled")]
> 	bool BackgroundPushNotificationsEnabled { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL backgroundPushNotificationsEnabledByDefault;
> 	[Export ("backgroundPushNotificationsEnabledByDefault")]
> 	bool BackgroundPushNotificationsEnabledByDefault { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL userPushNotificationsEnabled;
> 	[Export ("userPushNotificationsEnabled")]
> 	bool UserPushNotificationsEnabled { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL pushTokenRegistrationEnabled;
> 	[Export ("pushTokenRegistrationEnabled")]
> 	bool PushTokenRegistrationEnabled { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL allowUnregisteringUserNotificationTypes;
> 	[Export ("allowUnregisteringUserNotificationTypes")]
> 	bool AllowUnregisteringUserNotificationTypes { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL requireSettingsAppToDisableUserNotifications;
> 	[Export ("requireSettingsAppToDisableUserNotifications")]
> 	bool RequireSettingsAppToDisableUserNotifications { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL userPushNotificationsEnabledByDefault;
> 	[Export ("userPushNotificationsEnabledByDefault")]
> 	bool UserPushNotificationsEnabledByDefault { get; set; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable deviceToken;
> 	[NullAllowed, Export ("deviceToken")]
> 	string DeviceToken { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nullable channelID;
> 	[NullAllowed, Export ("channelID")]
> 	string ChannelID { get; }
> 
> 	// @property (assign, nonatomic) UANotificationOptions notificationOptions;
> 	[Export ("notificationOptions", ArgumentSemantic.Assign)]
> 	UANotificationOptions NotificationOptions { get; set; }
> 
> 	// @property (nonatomic, strong) NSSet<UANotificationCategory *> * _Nonnull customCategories;
> 	[Export ("customCategories", ArgumentSemantic.Strong)]
> 	NSSet<UANotificationCategory> CustomCategories { get; set; }
> 
> 	// @property (readonly, nonatomic) NSSet<UANotificationCategory *> * _Nonnull combinedCategories;
> 	[Export ("combinedCategories")]
> 	NSSet<UANotificationCategory> CombinedCategories { get; }
> 
> 	// @property (assign, nonatomic) BOOL requireAuthorizationForDefaultCategories;
> 	[Export ("requireAuthorizationForDefaultCategories")]
> 	bool RequireAuthorizationForDefaultCategories { get; set; }
> 
> 	[Wrap ("WeakPushNotificationDelegate")]
> 	[NullAllowed]
> 	UAPushNotificationDelegate PushNotificationDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
> 	[NullAllowed, Export ("pushNotificationDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakPushNotificationDelegate { get; set; }
> 
> 	[Wrap ("WeakRegistrationDelegate")]
> 	[NullAllowed]
> 	UARegistrationDelegate RegistrationDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UARegistrationDelegate> _Nullable registrationDelegate;
> 	[NullAllowed, Export ("registrationDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakRegistrationDelegate { get; set; }
> 
> 	// @property (readonly, nonatomic, strong) UANotificationResponse * _Nullable launchNotificationResponse;
> 	[NullAllowed, Export ("launchNotificationResponse", ArgumentSemantic.Strong)]
> 	UANotificationResponse LaunchNotificationResponse { get; }
> 
> 	// @property (readonly, assign, nonatomic) UANotificationOptions authorizedNotificationOptions;
> 	[Export ("authorizedNotificationOptions", ArgumentSemantic.Assign)]
> 	UANotificationOptions AuthorizedNotificationOptions { get; }
> 
> 	// @property (assign, nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
> 	[Export ("defaultPresentationOptions", ArgumentSemantic.Assign)]
> 	UNNotificationPresentationOptions DefaultPresentationOptions { get; set; }
> 
> 	// @property (getter = isAutobadgeEnabled, assign, nonatomic) BOOL autobadgeEnabled;
> 	[Export ("autobadgeEnabled")]
> 	bool AutobadgeEnabled { [Bind ("isAutobadgeEnabled")] get; set; }
> 
> 	// -(void)setBadgeNumber:(NSInteger)badgeNumber;
> 	[Export ("setBadgeNumber:")]
> 	void SetBadgeNumber (nint badgeNumber);
> 
> 	// -(void)resetBadge;
> 	[Export ("resetBadge")]
> 	void ResetBadge ();
> 
> 	// @property (copy, nonatomic) NSString * _Nullable alias;
> 	[NullAllowed, Export ("alias")]
> 	string Alias { get; set; }
> 
> 	// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull tags;
> 	[Export ("tags", ArgumentSemantic.Copy)]
> 	string[] Tags { get; set; }
> 
> 	// @property (getter = isChannelTagRegistrationEnabled, assign, nonatomic) BOOL channelTagRegistrationEnabled;
> 	[Export ("channelTagRegistrationEnabled")]
> 	bool ChannelTagRegistrationEnabled { [Bind ("isChannelTagRegistrationEnabled")] get; set; }
> 
> 	// -(void)addTag:(NSString * _Nonnull)tag;
> 	[Export ("addTag:")]
> 	void AddTag (string tag);
> 
> 	// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags;
> 	[Export ("addTags:")]
> 	void AddTags (string[] tags);
> 
> 	// -(void)removeTag:(NSString * _Nonnull)tag;
> 	[Export ("removeTag:")]
> 	void RemoveTag (string tag);
> 
> 	// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags;
> 	[Export ("removeTags:")]
> 	void RemoveTags (string[] tags);
> 
> 	// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("addTags:group:")]
> 	void AddTags (string[] tags, string tagGroupID);
> 
> 	// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("removeTags:group:")]
> 	void RemoveTags (string[] tags, string tagGroupID);
> 
> 	// -(void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
> 	[Export ("setTags:group:")]
> 	void SetTags (string[] tags, string tagGroupID);
> 
> 	// @property (readonly, copy, nonatomic) NSDictionary * _Nullable quietTime;
> 	[NullAllowed, Export ("quietTime", ArgumentSemantic.Copy)]
> 	NSDictionary QuietTime { get; }
> 
> 	// @property (nonatomic, strong) NSTimeZone * _Nonnull timeZone;
> 	[Export ("timeZone", ArgumentSemantic.Strong)]
> 	NSTimeZone TimeZone { get; set; }
> 
> 	// @property (getter = isQuietTimeEnabled, assign, nonatomic) BOOL quietTimeEnabled;
> 	[Export ("quietTimeEnabled")]
> 	bool QuietTimeEnabled { [Bind ("isQuietTimeEnabled")] get; set; }
> 
> 	// -(void)setQuietTimeStartHour:(NSUInteger)startHour startMinute:(NSUInteger)startMinute endHour:(NSUInteger)endHour endMinute:(NSUInteger)endMinute;
> 	[Export ("setQuietTimeStartHour:startMinute:endHour:endMinute:")]
> 	void SetQuietTimeStartHour (nuint startHour, nuint startMinute, nuint endHour, nuint endMinute);
> 
> 	// -(void)enableChannelCreation;
> 	[Export ("enableChannelCreation")]
> 	void EnableChannelCreation ();
> 
> 	// -(void)updateRegistration;
> 	[Export ("updateRegistration")]
> 	void UpdateRegistration ();
> }
> 
> // @interface UARegionEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UARegionEvent
> {
> 	// @property (nonatomic, strong) UAProximityRegion * _Nullable proximityRegion;
> 	[NullAllowed, Export ("proximityRegion", ArgumentSemantic.Strong)]
> 	UAProximityRegion ProximityRegion { get; set; }
> 
> 	// @property (nonatomic, strong) UACircularRegion * _Nullable circularRegion;
> 	[NullAllowed, Export ("circularRegion", ArgumentSemantic.Strong)]
> 	UACircularRegion CircularRegion { get; set; }
> 
> 	// +(instancetype _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(UABoundaryEvent)boundaryEvent;
> 	[Static]
> 	[Export ("regionEventWithRegionID:source:boundaryEvent:")]
> 	[return: NullAllowed]
> 	UARegionEvent RegionEventWithRegionID (string regionID, string source, UABoundaryEvent boundaryEvent);
> }
> 
> // @interface UARemoveTagsAction : UAModifyTagsAction
> [BaseType (typeof(UAModifyTagsAction))]
> interface UARemoveTagsAction
> {
> }
> 
> // @interface UARetailEventTemplate : NSObject
> [BaseType (typeof(NSObject))]
> interface UARetailEventTemplate
> {
> 	// +(instancetype _Nonnull)browsedTemplate;
> 	[Static]
> 	[Export ("browsedTemplate")]
> 	UARetailEventTemplate BrowsedTemplate ();
> 
> 	// +(instancetype _Nonnull)browsedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("browsedTemplateWithValueFromString:")]
> 	UARetailEventTemplate BrowsedTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)browsedTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("browsedTemplateWithValue:")]
> 	UARetailEventTemplate BrowsedTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// +(instancetype _Nonnull)addedToCartTemplate;
> 	[Static]
> 	[Export ("addedToCartTemplate")]
> 	UARetailEventTemplate AddedToCartTemplate ();
> 
> 	// +(instancetype _Nonnull)addedToCartTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("addedToCartTemplateWithValueFromString:")]
> 	UARetailEventTemplate AddedToCartTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)addedToCartTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("addedToCartTemplateWithValue:")]
> 	UARetailEventTemplate AddedToCartTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// +(instancetype _Nonnull)starredProductTemplate;
> 	[Static]
> 	[Export ("starredProductTemplate")]
> 	UARetailEventTemplate StarredProductTemplate ();
> 
> 	// +(instancetype _Nonnull)starredProductTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("starredProductTemplateWithValueFromString:")]
> 	UARetailEventTemplate StarredProductTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)starredProductTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("starredProductTemplateWithValue:")]
> 	UARetailEventTemplate StarredProductTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// +(instancetype _Nonnull)purchasedTemplate;
> 	[Static]
> 	[Export ("purchasedTemplate")]
> 	UARetailEventTemplate PurchasedTemplate ();
> 
> 	// +(instancetype _Nonnull)purchasedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("purchasedTemplateWithValueFromString:")]
> 	UARetailEventTemplate PurchasedTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)purchasedTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("purchasedTemplateWithValue:")]
> 	UARetailEventTemplate PurchasedTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// +(instancetype _Nonnull)sharedProductTemplate;
> 	[Static]
> 	[Export ("sharedProductTemplate")]
> 	UARetailEventTemplate SharedProductTemplate ();
> 
> 	// +(instancetype _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)eventValue;
> 	[Static]
> 	[Export ("sharedProductTemplateWithValueFromString:")]
> 	UARetailEventTemplate SharedProductTemplateWithValueFromString ([NullAllowed] string eventValue);
> 
> 	// +(instancetype _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)eventValue;
> 	[Static]
> 	[Export ("sharedProductTemplateWithValue:")]
> 	UARetailEventTemplate SharedProductTemplateWithValue ([NullAllowed] NSNumber eventValue);
> 
> 	// +(instancetype _Nonnull)sharedProductTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
> 	[Static]
> 	[Export ("sharedProductTemplateWithSource:withMedium:")]
> 	UARetailEventTemplate SharedProductTemplateWithSource ([NullAllowed] string source, [NullAllowed] string medium);
> 
> 	// +(instancetype _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)eventValue withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
> 	[Static]
> 	[Export ("sharedProductTemplateWithValueFromString:withSource:withMedium:")]
> 	UARetailEventTemplate SharedProductTemplateWithValueFromString ([NullAllowed] string eventValue, [NullAllowed] string source, [NullAllowed] string medium);
> 
> 	// +(instancetype _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)eventValue withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
> 	[Static]
> 	[Export ("sharedProductTemplateWithValue:withSource:withMedium:")]
> 	UARetailEventTemplate SharedProductTemplateWithValue ([NullAllowed] NSNumber eventValue, [NullAllowed] string source, [NullAllowed] string medium);
> 
> 	// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
> 	[NullAllowed, Export ("eventValue", ArgumentSemantic.Strong)]
> 	NSDecimalNumber EventValue { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable transactionID;
> 	[NullAllowed, Export ("transactionID")]
> 	string TransactionID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable category;
> 	[NullAllowed, Export ("category")]
> 	string Category { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable eventDescription;
> 	[NullAllowed, Export ("eventDescription")]
> 	string EventDescription { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable brand;
> 	[NullAllowed, Export ("brand")]
> 	string Brand { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL isNewItem;
> 	[Export ("isNewItem")]
> 	bool IsNewItem { get; set; }
> 
> 	// -(UACustomEvent * _Nonnull)createEvent;
> 	[Export ("createEvent")]
> 	[Verify (MethodToProperty)]
> 	UACustomEvent CreateEvent { get; }
> }
> 
> // @interface UAScheduleAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAScheduleAction
> {
> }
> 
> // @interface UAShareAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UAShareAction
> {
> }
> 
> // @interface UAURLProtocol : NSURLProtocol
> [BaseType (typeof(NSUrlProtocol))]
> interface UAURLProtocol
> {
> 	// +(void)addCachableURL:(NSURL * _Nonnull)url;
> 	[Static]
> 	[Export ("addCachableURL:")]
> 	void AddCachableURL (NSUrl url);
> 
> 	// +(void)removeCachableURL:(NSURL * _Nonnull)url;
> 	[Static]
> 	[Export ("removeCachableURL:")]
> 	void RemoveCachableURL (NSUrl url);
> 
> 	// +(void)clearCache;
> 	[Static]
> 	[Export ("clearCache")]
> 	void ClearCache ();
> }
> 
> // @interface UAUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UAUtils
> {
> 	// +(NSString * _Nonnull)deviceModelName;
> 	[Static]
> 	[Export ("deviceModelName")]
> 	[Verify (MethodToProperty)]
> 	string DeviceModelName { get; }
> 
> 	// +(NSString * _Nonnull)deviceID;
> 	[Static]
> 	[Export ("deviceID")]
> 	[Verify (MethodToProperty)]
> 	string DeviceID { get; }
> 
> 	// +(void)logFailedRequest:(UARequest * _Nonnull)request withMessage:(NSString * _Nonnull)message withError:(NSError * _Nullable)error withResponse:(NSHTTPURLResponse * _Nullable)response;
> 	[Static]
> 	[Export ("logFailedRequest:withMessage:withError:withResponse:")]
> 	void LogFailedRequest (UARequest request, string message, [NullAllowed] NSError error, [NullAllowed] NSHttpUrlResponse response);
> 
> 	// +(NSString * _Nonnull)userAuthHeaderString;
> 	[Static]
> 	[Export ("userAuthHeaderString")]
> 	[Verify (MethodToProperty)]
> 	string UserAuthHeaderString { get; }
> 
> 	// +(NSString * _Nonnull)appAuthHeaderString;
> 	[Static]
> 	[Export ("appAuthHeaderString")]
> 	[Verify (MethodToProperty)]
> 	string AppAuthHeaderString { get; }
> 
> 	// +(NSString * _Nonnull)pluralize:(int)count singularForm:(NSString * _Nonnull)singular pluralForm:(NSString * _Nonnull)plural;
> 	[Static]
> 	[Export ("pluralize:singularForm:pluralForm:")]
> 	string Pluralize (int count, string singular, string plural);
> 
> 	// +(NSString * _Nonnull)getReadableFileSizeFromBytes:(double)bytes;
> 	[Static]
> 	[Export ("getReadableFileSizeFromBytes:")]
> 	string GetReadableFileSizeFromBytes (double bytes);
> 
> 	// +(NSDateFormatter * _Nonnull)ISODateFormatterUTC;
> 	[Static]
> 	[Export ("ISODateFormatterUTC")]
> 	[Verify (MethodToProperty)]
> 	NSDateFormatter ISODateFormatterUTC { get; }
> 
> 	// +(NSDateFormatter * _Nonnull)ISODateFormatterUTCWithDelimiter;
> 	[Static]
> 	[Export ("ISODateFormatterUTCWithDelimiter")]
> 	[Verify (MethodToProperty)]
> 	NSDateFormatter ISODateFormatterUTCWithDelimiter { get; }
> 
> 	// +(BOOL)addSkipBackupAttributeToItemAtURL:(NSURL * _Nonnull)url;
> 	[Static]
> 	[Export ("addSkipBackupAttributeToItemAtURL:")]
> 	bool AddSkipBackupAttributeToItemAtURL (NSUrl url);
> 
> 	// +(UIWindow * _Nullable)mainWindow;
> 	[Static]
> 	[NullAllowed, Export ("mainWindow")]
> 	[Verify (MethodToProperty)]
> 	UIWindow MainWindow { get; }
> 
> 	// +(UIViewController * _Nullable)topController;
> 	[Static]
> 	[NullAllowed, Export ("topController")]
> 	[Verify (MethodToProperty)]
> 	UIViewController TopController { get; }
> 
> 	// +(NSString * _Nonnull)connectionType;
> 	[Static]
> 	[Export ("connectionType")]
> 	[Verify (MethodToProperty)]
> 	string ConnectionType { get; }
> 
> 	// +(BOOL)isSilentPush:(NSDictionary * _Nonnull)notification;
> 	[Static]
> 	[Export ("isSilentPush:")]
> 	bool IsSilentPush (NSDictionary notification);
> }
> 
> // @interface UAWebViewCallData : NSObject
> [BaseType (typeof(NSObject))]
> interface UAWebViewCallData
> {
> 	// +(UAWebViewCallData * _Nonnull)callDataForURL:(NSURL * _Nonnull)url webView:(UIWebView * _Nonnull)webView;
> 	[Static]
> 	[Export ("callDataForURL:webView:")]
> 	UAWebViewCallData CallDataForURL (NSUrl url, UIWebView webView);
> 
> 	// +(UAWebViewCallData * _Nonnull)callDataForURL:(NSURL * _Nonnull)url webView:(UIWebView * _Nonnull)webView message:(UAInboxMessage * _Nullable)message;
> 	[Static]
> 	[Export ("callDataForURL:webView:message:")]
> 	UAWebViewCallData CallDataForURL (NSUrl url, UIWebView webView, [NullAllowed] UAInboxMessage message);
> 
> 	// @property (copy, nonatomic) NSString * _Nullable name;
> 	[NullAllowed, Export ("name")]
> 	string Name { get; set; }
> 
> 	// @property (nonatomic, strong) NSArray<NSString *> * _Nullable arguments;
> 	[NullAllowed, Export ("arguments", ArgumentSemantic.Strong)]
> 	string[] Arguments { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nullable options;
> 	[NullAllowed, Export ("options", ArgumentSemantic.Strong)]
> 	NSDictionary Options { get; set; }
> 
> 	// @property (nonatomic, strong) UIWebView * _Nonnull webView;
> 	[Export ("webView", ArgumentSemantic.Strong)]
> 	UIWebView WebView { get; set; }
> 
> 	// @property (nonatomic, strong) NSURL * _Nonnull url;
> 	[Export ("url", ArgumentSemantic.Strong)]
> 	NSUrl Url { get; set; }
> 
> 	// @property (nonatomic, strong) UAInboxMessage * _Nullable message;
> 	[NullAllowed, Export ("message", ArgumentSemantic.Strong)]
> 	UAInboxMessage Message { get; set; }
> }
> 
> // @interface UAWebViewDelegate : NSObject <UIWebViewDelegate, UARichContentWindow>
> [BaseType (typeof(NSObject))]
> interface UAWebViewDelegate : IUIWebViewDelegate, IUARichContentWindow
> {
> 	[Wrap ("WeakForwardDelegate")]
> 	[NullAllowed]
> 	UIWebViewDelegate ForwardDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UIWebViewDelegate> _Nullable forwardDelegate;
> 	[NullAllowed, Export ("forwardDelegate", ArgumentSemantic.Weak)]
> 	NSObject WeakForwardDelegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UARichContentWindow> _Nullable richContentWindow;
> 	[NullAllowed, Export ("richContentWindow", ArgumentSemantic.Weak)]
> 	UARichContentWindow RichContentWindow { get; set; }
> }
> 
> // @interface UAAdditions (UIWebView)
> [Category]
> [BaseType (typeof(UIWebView))]
> interface UIWebView_UAAdditions
> {
> 	// -(void)injectInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation;
> 	[Export ("injectInterfaceOrientation:")]
> 	void InjectInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation);
> }
> 
> // @interface  (UAAction)
> [Category]
> [BaseType (typeof(UAAction))]
> interface UAAction_
> {
> 	// @property (copy, nonatomic) UAActionBlock _Nullable actionBlock;
> 	[NullAllowed, Export ("actionBlock", ArgumentSemantic.Copy)]
> 	UAActionBlock ActionBlock { get; set; }
> 
> 	// @property (copy, nonatomic) UAActionPredicate _Nullable acceptsArgumentsBlock;
> 	[NullAllowed, Export ("acceptsArgumentsBlock", ArgumentSemantic.Copy)]
> 	UAActionPredicate AcceptsArgumentsBlock { get; set; }
> 
> 	// -(void)runWithArguments:(UAActionArguments * _Nonnull)arguments completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
> 	[Export ("runWithArguments:completionHandler:")]
> 	void RunWithArguments (UAActionArguments arguments, UAActionCompletionHandler completionHandler);
> }
> 
> // @interface  (UAActionArguments)
> [Category]
> [BaseType (typeof(UAActionArguments))]
> interface UAActionArguments_
> {
> 	// @property (readonly, nonatomic) NSString * _Nonnull situationString;
> 	[Export ("situationString")]
> 	string SituationString { get; }
> 
> 	// @property (copy, nonatomic) NSDictionary * _Nullable metadata;
> 	[NullAllowed, Export ("metadata", ArgumentSemantic.Copy)]
> 	NSDictionary Metadata { get; set; }
> 
> 	// @property (assign, nonatomic) UASituation situation;
> 	[Export ("situation", ArgumentSemantic.Assign)]
> 	UASituation Situation { get; set; }
> 
> 	// @property (nonatomic, strong) id _Nullable value;
> 	[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
> 	NSObject Value { get; set; }
> }
> 
> // @interface  (UAActionRegistry)
> [Category]
> [BaseType (typeof(UAActionRegistry))]
> interface UAActionRegistry_
> {
> 	// @property (nonatomic, strong) NSMutableDictionary * _Nonnull registeredActionEntries;
> 	[Export ("registeredActionEntries", ArgumentSemantic.Strong)]
> 	NSMutableDictionary RegisteredActionEntries { get; set; }
> 
> 	// @property (nonatomic, strong) NSMutableArray * _Nonnull reservedEntryNames;
> 	[Export ("reservedEntryNames", ArgumentSemantic.Strong)]
> 	NSMutableArray ReservedEntryNames { get; set; }
> 
> 	// -(BOOL)registerReservedAction:(UAAction * _Nonnull)action name:(NSString * _Nonnull)name predicate:(UAActionPredicate _Nullable)predicate;
> 	[Export ("registerReservedAction:name:predicate:")]
> 	bool RegisterReservedAction (UAAction action, string name, [NullAllowed] UAActionPredicate predicate);
> 
> 	// -(void)registerDefaultActions;
> 	[Export ("registerDefaultActions")]
> 	void RegisterDefaultActions ();
> }
> 
> // @interface  (UAActionRegistryEntry)
> [Category]
> [BaseType (typeof(UAActionRegistryEntry))]
> interface UAActionRegistryEntry_
> {
> 	// @property (nonatomic, strong) NSMutableArray * _Nonnull mutableNames;
> 	[Export ("mutableNames", ArgumentSemantic.Strong)]
> 	NSMutableArray MutableNames { get; set; }
> 
> 	// -(void)addSituationOverride:(UASituation)situation withAction:(UAAction * _Nonnull)action;
> 	[Export ("addSituationOverride:withAction:")]
> 	void AddSituationOverride (UASituation situation, UAAction action);
> }
> 
> // @interface  (UAActionResult)
> [Category]
> [BaseType (typeof(UAActionResult))]
> interface UAActionResult_
> {
> 	// +(instancetype _Nonnull)rejectedArgumentsResult;
> 	[Static]
> 	[Export ("rejectedArgumentsResult")]
> 	UAActionResult RejectedArgumentsResult ();
> 
> 	// +(instancetype _Nonnull)actionNotFoundResult;
> 	[Static]
> 	[Export ("actionNotFoundResult")]
> 	UAActionResult ActionNotFoundResult ();
> 
> 	// @property (nonatomic, strong) id _Nullable value;
> 	[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
> 	NSObject Value { get; set; }
> 
> 	// @property (assign, nonatomic) UAActionFetchResult fetchResult;
> 	[Export ("fetchResult", ArgumentSemantic.Assign)]
> 	UAActionFetchResult FetchResult { get; set; }
> 
> 	// @property (nonatomic, strong) NSError * _Nullable error;
> 	[NullAllowed, Export ("error", ArgumentSemantic.Strong)]
> 	NSError Error { get; set; }
> 
> 	// @property (assign, nonatomic) UAActionStatus status;
> 	[Export ("status", ArgumentSemantic.Assign)]
> 	UAActionStatus Status { get; set; }
> }
> 
> // @interface  (UAActionRunner)
> [Category]
> [BaseType (typeof(UAActionRunner))]
> interface UAActionRunner_
> {
> 	// +(void)runActionsWithActionValues:(NSDictionary * _Nonnull)actionValues situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata completionHandler:(UAActionCompletionHandler _Nullable)completionHandler;
> 	[Static]
> 	[Export ("runActionsWithActionValues:situation:metadata:completionHandler:")]
> 	void RunActionsWithActionValues (NSDictionary actionValues, UASituation situation, [NullAllowed] NSDictionary metadata, [NullAllowed] UAActionCompletionHandler completionHandler);
> }
> 
> // @interface  (UAActionSchedule)
> [Category]
> [BaseType (typeof(UAActionSchedule))]
> interface UAActionSchedule_
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull identifier;
> 	[Export ("identifier")]
> 	string Identifier { get; set; }
> 
> 	// @property (nonatomic, strong) UAActionScheduleInfo * _Nonnull info;
> 	[Export ("info", ArgumentSemantic.Strong)]
> 	UAActionScheduleInfo Info { get; set; }
> 
> 	// +(instancetype _Nonnull)actionScheduleWithIdentifier:(NSString * _Nonnull)identifier info:(UAActionScheduleInfo * _Nonnull)info;
> 	[Static]
> 	[Export ("actionScheduleWithIdentifier:info:")]
> 	UAActionSchedule ActionScheduleWithIdentifier (string identifier, UAActionScheduleInfo info);
> }
> 
> // @interface UAActionScheduleData : NSManagedObject
> [BaseType (typeof(NSManagedObject))]
> interface UAActionScheduleData
> {
> 	// @property (retain, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier", ArgumentSemantic.Retain)]
> 	string Identifier { get; set; }
> 
> 	// @property (retain, nonatomic) NSString * _Nullable group;
> 	[NullAllowed, Export ("group", ArgumentSemantic.Retain)]
> 	string Group { get; set; }
> 
> 	// @property (retain, nonatomic) NSNumber * _Nullable limit;
> 	[NullAllowed, Export ("limit", ArgumentSemantic.Retain)]
> 	NSNumber Limit { get; set; }
> 
> 	// @property (retain, nonatomic) NSNumber * _Nullable triggeredCount;
> 	[NullAllowed, Export ("triggeredCount", ArgumentSemantic.Retain)]
> 	NSNumber TriggeredCount { get; set; }
> 
> 	// @property (retain, nonatomic) NSString * _Nullable actions;
> 	[NullAllowed, Export ("actions", ArgumentSemantic.Retain)]
> 	string Actions { get; set; }
> 
> 	// @property (retain, nonatomic) NSSet<NSManagedObject *> * _Nullable triggers;
> 	[NullAllowed, Export ("triggers", ArgumentSemantic.Retain)]
> 	NSSet<NSManagedObject> Triggers { get; set; }
> 
> 	// @property (retain, nonatomic) NSDate * _Nullable start;
> 	[NullAllowed, Export ("start", ArgumentSemantic.Retain)]
> 	NSDate Start { get; set; }
> 
> 	// @property (retain, nonatomic) NSDate * _Nullable end;
> 	[NullAllowed, Export ("end", ArgumentSemantic.Retain)]
> 	NSDate End { get; set; }
> }
> 
> // @protocol UAAnalyticsDelegate <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAAnalyticsDelegate
> {
> 	// @optional -(void)customEventAdded:(UACustomEvent * _Nonnull)event;
> 	[Export ("customEventAdded:")]
> 	void CustomEventAdded (UACustomEvent @event);
> 
> 	// @optional -(void)regionEventAdded:(UARegionEvent * _Nonnull)event;
> 	[Export ("regionEventAdded:")]
> 	void RegionEventAdded (UARegionEvent @event);
> 
> 	// @optional -(void)screenTracked:(NSString * _Nonnull)screenName;
> 	[Export ("screenTracked:")]
> 	void ScreenTracked (string screenName);
> }
> 
> // @interface  (UAAnalytics)
> [Category]
> [BaseType (typeof(UAAnalytics))]
> interface UAAnalytics_
> {
> 	[Wrap ("WeakDelegate")]
> 	[NullAllowed]
> 	UAAnalyticsDelegate Delegate { get; set; }
> 
> 	// @property (nonatomic, weak) id<UAAnalyticsDelegate> _Nullable delegate;
> 	[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
> 	NSObject WeakDelegate { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable conversionSendID;
> 	[NullAllowed, Export ("conversionSendID")]
> 	string ConversionSendID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable conversionPushMetadata;
> 	[NullAllowed, Export ("conversionPushMetadata")]
> 	string ConversionPushMetadata { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable conversionRichPushID;
> 	[NullAllowed, Export ("conversionRichPushID")]
> 	string ConversionRichPushID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable sessionID;
> 	[NullAllowed, Export ("sessionID")]
> 	string SessionID { get; set; }
> 
> 	// +(instancetype _Nonnull)analyticsWithConfig:(UAConfig * _Nonnull)airshipConfig dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("analyticsWithConfig:dataStore:")]
> 	UAAnalytics AnalyticsWithConfig (UAConfig airshipConfig, UAPreferenceDataStore dataStore);
> 
> 	// +(instancetype _Nonnull)analyticsWithConfig:(UAConfig * _Nonnull)airshipConfig dataStore:(UAPreferenceDataStore * _Nonnull)dataStore eventManager:(UAEventManager * _Nonnull)eventManager;
> 	[Static]
> 	[Export ("analyticsWithConfig:dataStore:eventManager:")]
> 	UAAnalytics AnalyticsWithConfig (UAConfig airshipConfig, UAPreferenceDataStore dataStore, UAEventManager eventManager);
> 
> 	// -(void)launchedFromNotification:(NSDictionary * _Nonnull)notification;
> 	[Export ("launchedFromNotification:")]
> 	void LaunchedFromNotification (NSDictionary notification);
> 
> 	// -(void)cancelUpload;
> 	[Export ("cancelUpload")]
> 	void CancelUpload ();
> }
> 
> // @interface UARequestBuilder : NSObject
> [BaseType (typeof(NSObject))]
> interface UARequestBuilder
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull method;
> 	[Export ("method")]
> 	string Method { get; set; }
> 
> 	// @property (nonatomic, strong) NSURL * _Nonnull URL;
> 	[Export ("URL", ArgumentSemantic.Strong)]
> 	NSUrl URL { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable username;
> 	[NullAllowed, Export ("username")]
> 	string Username { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable password;
> 	[NullAllowed, Export ("password")]
> 	string Password { get; set; }
> 
> 	// @property (copy, nonatomic) NSData * _Nullable body;
> 	[NullAllowed, Export ("body", ArgumentSemantic.Copy)]
> 	NSData Body { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL compressBody;
> 	[Export ("compressBody")]
> 	bool CompressBody { get; set; }
> 
> 	// -(void)setValue:(id _Nonnull)value forHeader:(NSString * _Nonnull)header;
> 	[Export ("setValue:forHeader:")]
> 	void SetValue (NSObject value, string header);
> }
> 
> // @interface UARequest : NSObject
> [BaseType (typeof(NSObject))]
> interface UARequest
> {
> 	// @property (readonly, nonatomic) NSString * _Nullable method;
> 	[NullAllowed, Export ("method")]
> 	string Method { get; }
> 
> 	// @property (readonly, nonatomic) NSURL * _Nullable URL;
> 	[NullAllowed, Export ("URL")]
> 	NSUrl URL { get; }
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull headers;
> 	[Export ("headers")]
> 	NSDictionary Headers { get; }
> 
> 	// @property (readonly, nonatomic) NSData * _Nullable body;
> 	[NullAllowed, Export ("body")]
> 	NSData Body { get; }
> 
> 	// +(instancetype _Nonnull)requestWithBuilderBlock:(void (^ _Nonnull)(UARequestBuilder * _Nonnull))builderBlock;
> 	[Static]
> 	[Export ("requestWithBuilderBlock:")]
> 	UARequest RequestWithBuilderBlock (Action<UARequestBuilder> builderBlock);
> }
> 
> // typedef void (^UARequestCompletionHandler)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable);
> delegate void UARequestCompletionHandler ([NullAllowed] NSData arg0, [NullAllowed] NSUrlResponse arg1, [NullAllowed] NSError arg2);
> 
> // typedef BOOL (^UARequestRetryBlock)(NSData * _Nullable, NSURLResponse * _Nullable);
> delegate bool UARequestRetryBlock ([NullAllowed] NSData arg0, [NullAllowed] NSUrlResponse arg1);
> 
> // @interface UARequestSession : NSObject
> [BaseType (typeof(NSObject))]
> interface UARequestSession
> {
> 	// +(instancetype _Nonnull)sessionWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("sessionWithConfig:")]
> 	UARequestSession SessionWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)sessionWithConfig:(UAConfig * _Nonnull)config NSURLSession:(NSURLSession * _Nonnull)session;
> 	[Static]
> 	[Export ("sessionWithConfig:NSURLSession:")]
> 	UARequestSession SessionWithConfig (UAConfig config, NSUrlSession session);
> 
> 	// +(instancetype _Nonnull)sessionWithConfig:(UAConfig * _Nonnull)config NSURLSession:(NSURLSession * _Nonnull)session queue:(NSOperationQueue * _Nonnull)queue;
> 	[Static]
> 	[Export ("sessionWithConfig:NSURLSession:queue:")]
> 	UARequestSession SessionWithConfig (UAConfig config, NSUrlSession session, NSOperationQueue queue);
> 
> 	// -(void)setValue:(id _Nonnull)value forHeader:(NSString * _Nonnull)header;
> 	[Export ("setValue:forHeader:")]
> 	void SetValue (NSObject value, string header);
> 
> 	// -(void)dataTaskWithRequest:(UARequest * _Nonnull)request completionHandler:(UARequestCompletionHandler _Nonnull)completionHandler;
> 	[Export ("dataTaskWithRequest:completionHandler:")]
> 	void DataTaskWithRequest (UARequest request, UARequestCompletionHandler completionHandler);
> 
> 	// -(void)dataTaskWithRequest:(UARequest * _Nonnull)request retryWhere:(UARequestRetryBlock _Nullable)retryBlock completionHandler:(UARequestCompletionHandler _Nonnull)completionHandler;
> 	[Export ("dataTaskWithRequest:retryWhere:completionHandler:")]
> 	void DataTaskWithRequest (UARequest request, [NullAllowed] UARequestRetryBlock retryBlock, UARequestCompletionHandler completionHandler);
> 
> 	// -(void)cancelAllRequests;
> 	[Export ("cancelAllRequests")]
> 	void CancelAllRequests ();
> }
> 
> // @interface UAAPIClient : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAPIClient
> {
> 	// @property (readonly, nonatomic) UAConfig * _Nonnull config;
> 	[Export ("config")]
> 	UAConfig Config { get; }
> 
> 	// @property (readonly, nonatomic) UARequestSession * _Nonnull session;
> 	[Export ("session")]
> 	UARequestSession Session { get; }
> 
> 	// -(instancetype _Nonnull)initWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Export ("initWithConfig:session:")]
> 	IntPtr Constructor (UAConfig config, UARequestSession session);
> 
> 	// -(void)cancelAllRequests;
> 	[Export ("cancelAllRequests")]
> 	void CancelAllRequests ();
> }
> 
> // @protocol UAAPNSRegistrationProtocol <NSObject>
> [Protocol, Model]
> [BaseType (typeof(NSObject))]
> interface UAAPNSRegistrationProtocol
> {
> 	// @optional -(void)getCurrentAuthorizationOptionsWithCompletionHandler:(void (^ _Nonnull)(UANotificationOptions))completionHandler;
> 	[Export ("getCurrentAuthorizationOptionsWithCompletionHandler:")]
> 	void GetCurrentAuthorizationOptionsWithCompletionHandler (Action<UANotificationOptions> completionHandler);
> 
> 	// @optional -(void)updateRegistrationWithOptions:(UANotificationOptions)options categories:(NSSet<UANotificationCategory *> * _Nonnull)categories completionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Export ("updateRegistrationWithOptions:categories:completionHandler:")]
> 	void UpdateRegistrationWithOptions (UANotificationOptions options, NSSet<UANotificationCategory> categories, Action completionHandler);
> }
> 
> // @interface UAAPNSRegistration : NSObject <UAAPNSRegistrationProtocol>
> [BaseType (typeof(NSObject))]
> interface UAAPNSRegistration : IUAAPNSRegistrationProtocol
> {
> 	// -(void)getCurrentAuthorizationOptionsWithCompletionHandler:(void (^ _Nonnull)(UANotificationOptions))completionHandler;
> 	[Export ("getCurrentAuthorizationOptionsWithCompletionHandler:")]
> 	void GetCurrentAuthorizationOptionsWithCompletionHandler (Action<UANotificationOptions> completionHandler);
> 
> 	// -(void)updateRegistrationWithOptions:(UANotificationOptions)options categories:(NSSet<UANotificationCategory *> * _Nonnull)categories completionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Export ("updateRegistrationWithOptions:categories:completionHandler:")]
> 	void UpdateRegistrationWithOptions (UANotificationOptions options, NSSet<UANotificationCategory> categories, Action completionHandler);
> }
> 
> // @interface UAAppExitEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAAppExitEvent
> {
> 	// +(instancetype _Nonnull)event;
> 	[Static]
> 	[Export ("event")]
> 	UAAppExitEvent Event ();
> }
> 
> // @interface UAAppBackgroundEvent : UAAppExitEvent
> [BaseType (typeof(UAAppExitEvent))]
> interface UAAppBackgroundEvent
> {
> }
> 
> // @interface UAAppInitEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAAppInitEvent
> {
> 	// +(instancetype _Nonnull)event;
> 	[Static]
> 	[Export ("event")]
> 	UAAppInitEvent Event ();
> 
> 	// -(NSMutableDictionary * _Nonnull)gatherData;
> 	[Export ("gatherData")]
> 	[Verify (MethodToProperty)]
> 	NSMutableDictionary GatherData { get; }
> }
> 
> // @interface UAAppForegroundEvent : UAAppInitEvent
> [BaseType (typeof(UAAppInitEvent))]
> interface UAAppForegroundEvent
> {
> }
> 
> // @interface  (UAAppIntegration)
> [Category]
> [BaseType (typeof(UAAppIntegration))]
> interface UAAppIntegration_
> {
> 	// +(void)handleForegroundNotification:(UNNotification * _Nonnull)notification mergedOptions:(UNNotificationPresentationOptions)options withCompletionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Static]
> 	[Export ("handleForegroundNotification:mergedOptions:withCompletionHandler:")]
> 	void HandleForegroundNotification (UNNotification notification, UNNotificationPresentationOptions options, Action completionHandler);
> }
> 
> // @interface  (UAApplicationMetrics)
> [Category]
> [BaseType (typeof(UAApplicationMetrics))]
> interface UAApplicationMetrics_
> {
> 	// @property (nonatomic, strong) NSDate * _Nullable lastApplicationOpenDate;
> 	[NullAllowed, Export ("lastApplicationOpenDate", ArgumentSemantic.Strong)]
> 	NSDate LastApplicationOpenDate { get; set; }
> 
> 	// -(void)didBecomeActive;
> 	[Export ("didBecomeActive")]
> 	void DidBecomeActive ();
> }
> 
> // @interface UAAssociateIdentifiersEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAAssociateIdentifiersEvent
> {
> 	// +(instancetype)eventWithIDs:(UAAssociatedIdentifiers *)identifiers;
> 	[Static]
> 	[Export ("eventWithIDs:")]
> 	UAAssociateIdentifiersEvent EventWithIDs (UAAssociatedIdentifiers identifiers);
> }
> 
> // @interface UAAsyncOperation : NSOperation
> [BaseType (typeof(NSOperation))]
> interface UAAsyncOperation
> {
> 	// +(instancetype)operationWithBlock:(void (^)(UAAsyncOperation *))block;
> 	[Static]
> 	[Export ("operationWithBlock:")]
> 	UAAsyncOperation OperationWithBlock (Action<UAAsyncOperation> block);
> 
> 	// -(void)startAsyncOperation;
> 	[Export ("startAsyncOperation")]
> 	void StartAsyncOperation ();
> 
> 	// -(void)finish;
> 	[Export ("finish")]
> 	void Finish ();
> }
> 
> // @interface UAAutoIntegrationDummyDelegate : NSObject <UNUserNotificationCenterDelegate>
> [BaseType (typeof(NSObject))]
> interface UAAutoIntegrationDummyDelegate : IUNUserNotificationCenterDelegate
> {
> }
> 
> // @interface UAAutoIntegration : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAutoIntegration
> {
> 	// +(void)integrate;
> 	[Static]
> 	[Export ("integrate")]
> 	void Integrate ();
> 
> 	// +(void)reset;
> 	[Static]
> 	[Export ("reset")]
> 	void Reset ();
> }
> 
> // @interface  (UAAutomation) <UAAnalyticsDelegate>
> [Category]
> [BaseType (typeof(UAAutomation))]
> interface UAAutomation_ : IUAAnalyticsDelegate
> {
> 	// @property (nonatomic, strong) UAAutomationStore * automationStore;
> 	[Export ("automationStore", ArgumentSemantic.Strong)]
> 	UAAutomationStore AutomationStore { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * preferenceDataStore;
> 	[Export ("preferenceDataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore PreferenceDataStore { get; set; }
> 
> 	// +(instancetype)automationWithConfig:(UAConfig *)config dataStore:(UAPreferenceDataStore *)dataStore;
> 	[Static]
> 	[Export ("automationWithConfig:dataStore:")]
> 	UAAutomation AutomationWithConfig (UAConfig config, UAPreferenceDataStore dataStore);
> }
> 
> // @interface UAAutomationStore : NSObject
> [BaseType (typeof(NSObject))]
> interface UAAutomationStore
> {
> 	// +(instancetype)automationStoreWithConfig:(UAConfig *)config;
> 	[Static]
> 	[Export ("automationStoreWithConfig:")]
> 	UAAutomationStore AutomationStoreWithConfig (UAConfig config);
> 
> 	// -(void)saveSchedule:(UAActionSchedule *)schedule limit:(NSUInteger)limit completionHandler:(void (^)(BOOL))completionHandler;
> 	[Export ("saveSchedule:limit:completionHandler:")]
> 	void SaveSchedule (UAActionSchedule schedule, nuint limit, Action<bool> completionHandler);
> 
> 	// -(void)deleteSchedulesWithPredicate:(NSPredicate *)predicate;
> 	[Export ("deleteSchedulesWithPredicate:")]
> 	void DeleteSchedulesWithPredicate (NSPredicate predicate);
> 
> 	// -(void)fetchSchedulesWithPredicate:(NSPredicate *)predicate limit:(NSUInteger)limit completionHandler:(void (^)(NSArray<UAActionScheduleData *> *))completionHandler;
> 	[Export ("fetchSchedulesWithPredicate:limit:completionHandler:")]
> 	void FetchSchedulesWithPredicate (NSPredicate predicate, nuint limit, Action<NSArray<UAActionScheduleData>> completionHandler);
> 
> 	// -(void)fetchTriggersWithPredicate:(NSPredicate *)predicate completionHandler:(void (^)(NSArray<UAScheduleTriggerData *> *))completionHandler;
> 	[Export ("fetchTriggersWithPredicate:completionHandler:")]
> 	void FetchTriggersWithPredicate (NSPredicate predicate, Action<NSArray<UAScheduleTriggerData>> completionHandler);
> }
> 
> // typedef void (^UAChannelAPIClientCreateSuccessBlock)(NSString * _Nonnull, NSString * _Nonnull, BOOL);
> delegate void UAChannelAPIClientCreateSuccessBlock (string arg0, string arg1, bool arg2);
> 
> // typedef void (^UAChannelAPIClientUpdateSuccessBlock)();
> delegate void UAChannelAPIClientUpdateSuccessBlock ();
> 
> // typedef void (^UAChannelAPIClientFailureBlock)(NSUInteger);
> delegate void UAChannelAPIClientFailureBlock (nuint arg0);
> 
> // @interface UAChannelAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UAChannelAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("clientWithConfig:")]
> 	UAChannelAPIClient ClientWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Static]
> 	[Export ("clientWithConfig:session:")]
> 	UAChannelAPIClient ClientWithConfig (UAConfig config, UARequestSession session);
> 
> 	// -(void)createChannelWithPayload:(UAChannelRegistrationPayload * _Nonnull)payload onSuccess:(UAChannelAPIClientCreateSuccessBlock _Nonnull)successBlock onFailure:(UAChannelAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("createChannelWithPayload:onSuccess:onFailure:")]
> 	void CreateChannelWithPayload (UAChannelRegistrationPayload payload, UAChannelAPIClientCreateSuccessBlock successBlock, UAChannelAPIClientFailureBlock failureBlock);
> 
> 	// -(void)updateChannelWithLocation:(NSString * _Nonnull)channelLocation withPayload:(UAChannelRegistrationPayload * _Nonnull)payload onSuccess:(UAChannelAPIClientUpdateSuccessBlock _Nonnull)successBlock onFailure:(UAChannelAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("updateChannelWithLocation:withPayload:onSuccess:onFailure:")]
> 	void UpdateChannelWithLocation (string channelLocation, UAChannelRegistrationPayload payload, UAChannelAPIClientUpdateSuccessBlock successBlock, UAChannelAPIClientFailureBlock failureBlock);
> }
> 
> // @interface  (UAChannelRegistrar)
> [Category]
> [BaseType (typeof(UAChannelRegistrar))]
> interface UAChannelRegistrar_
> {
> 	// @property (nonatomic, strong) UAChannelAPIClient * _Nonnull channelAPIClient;
> 	[Export ("channelAPIClient", ArgumentSemantic.Strong)]
> 	UAChannelAPIClient ChannelAPIClient { get; set; }
> 
> 	// @property (nonatomic, strong) UAChannelRegistrationPayload * _Nullable lastSuccessPayload;
> 	[NullAllowed, Export ("lastSuccessPayload", ArgumentSemantic.Strong)]
> 	UAChannelRegistrationPayload LastSuccessPayload { get; set; }
> 
> 	// @property (assign, atomic) BOOL isRegistrationInProgress;
> 	[Export ("isRegistrationInProgress")]
> 	bool IsRegistrationInProgress { get; set; }
> 
> 	// +(instancetype _Nonnull)channelRegistrarWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("channelRegistrarWithConfig:")]
> 	UAChannelRegistrar ChannelRegistrarWithConfig (UAConfig config);
> }
> 
> // @interface UAChannelRegistrationPayload : NSObject <NSCopying>
> [BaseType (typeof(NSObject))]
> interface UAChannelRegistrationPayload : INSCopying
> {
> 	// @property (copy, nonatomic) NSString * _Nullable userID;
> 	[NullAllowed, Export ("userID")]
> 	string UserID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable deviceID;
> 	[NullAllowed, Export ("deviceID")]
> 	string DeviceID { get; set; }
> 
> 	// @property (getter = isOptedIn, assign, nonatomic) BOOL optedIn;
> 	[Export ("optedIn")]
> 	bool OptedIn { [Bind ("isOptedIn")] get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull pushAddress;
> 	[Export ("pushAddress")]
> 	string PushAddress { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL setTags;
> 	[Export ("setTags")]
> 	bool SetTags { get; set; }
> 
> 	// @property (nonatomic, strong) NSArray<NSString *> * _Nullable tags;
> 	[NullAllowed, Export ("tags", ArgumentSemantic.Strong)]
> 	string[] Tags { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable alias;
> 	[NullAllowed, Export ("alias")]
> 	string Alias { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nullable quietTime;
> 	[NullAllowed, Export ("quietTime", ArgumentSemantic.Strong)]
> 	NSDictionary QuietTime { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable timeZone;
> 	[NullAllowed, Export ("timeZone")]
> 	string TimeZone { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nullable badge;
> 	[NullAllowed, Export ("badge", ArgumentSemantic.Strong)]
> 	NSNumber Badge { get; set; }
> 
> 	// @property (getter = isBackgroundEnabled, assign, nonatomic) BOOL backgroundEnabled;
> 	[Export ("backgroundEnabled")]
> 	bool BackgroundEnabled { [Bind ("isBackgroundEnabled")] get; set; }
> 
> 	// -(NSData * _Nonnull)asJSONData;
> 	[Export ("asJSONData")]
> 	[Verify (MethodToProperty)]
> 	NSData AsJSONData { get; }
> 
> 	// -(BOOL)isEqualToPayload:(UAChannelRegistrationPayload * _Nullable)payload;
> 	[Export ("isEqualToPayload:")]
> 	bool IsEqualToPayload ([NullAllowed] UAChannelRegistrationPayload payload);
> 
> 	// -(NSDictionary * _Nonnull)payloadDictionary;
> 	[Export ("payloadDictionary")]
> 	[Verify (MethodToProperty)]
> 	NSDictionary PayloadDictionary { get; }
> }
> 
> // @interface  (UACircularRegion)
> [Category]
> [BaseType (typeof(UACircularRegion))]
> interface UACircularRegion_
> {
> 	// @property (nonatomic, strong) NSNumber * _Nonnull latitude;
> 	[Export ("latitude", ArgumentSemantic.Strong)]
> 	NSNumber Latitude { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nonnull longitude;
> 	[Export ("longitude", ArgumentSemantic.Strong)]
> 	NSNumber Longitude { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nonnull radius;
> 	[Export ("radius", ArgumentSemantic.Strong)]
> 	NSNumber Radius { get; set; }
> 
> 	// -(BOOL)isValid;
> 	[Export ("isValid")]
> 	[Verify (MethodToProperty)]
> 	bool IsValid { get; }
> }
> 
> // @interface UACloseWindowAction : UAAction
> [BaseType (typeof(UAAction))]
> interface UACloseWindowAction
> {
> }
> 
> // @interface UAColorUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UAColorUtils
> {
> 	// +(UIColor * _Nullable)colorWithHexString:(NSString * _Nonnull)hexString;
> 	[Static]
> 	[Export ("colorWithHexString:")]
> 	[return: NullAllowed]
> 	UIColor ColorWithHexString (string hexString);
> 
> 	// +(NSString * _Nullable)hexStringWithColor:(UIColor * _Nonnull)color;
> 	[Static]
> 	[Export ("hexStringWithColor:")]
> 	[return: NullAllowed]
> 	string HexStringWithColor (UIColor color);
> }
> 
> // @interface  (UAConfig)
> [Category]
> [BaseType (typeof(UAConfig))]
> interface UAConfig_
> {
> 	// @property (copy, nonatomic) NSString * _Nullable profilePath;
> 	[NullAllowed, Export ("profilePath")]
> 	string ProfilePath { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable testingMasterSecret;
> 	[NullAllowed, Export ("testingMasterSecret")]
> 	string TestingMasterSecret { get; set; }
> 
> 	// @property (readonly, nonatomic) BOOL isSimulator;
> 	[Export ("isSimulator")]
> 	bool IsSimulator { get; }
> 
> 	// @property (assign, nonatomic) BOOL defaultDetectProvisioningMode;
> 	[Export ("defaultDetectProvisioningMode")]
> 	bool DefaultDetectProvisioningMode { get; set; }
> 
> 	// -(BOOL)usesProductionPushServer;
> 	[Export ("usesProductionPushServer")]
> 	[Verify (MethodToProperty)]
> 	bool UsesProductionPushServer { get; }
> 
> 	// +(BOOL)isProductionProvisioningProfile:(NSString * _Nonnull)profilePath;
> 	[Static]
> 	[Export ("isProductionProvisioningProfile:")]
> 	bool IsProductionProvisioningProfile (string profilePath);
> 
> 	// +(NSDictionary * _Nonnull)normalizeDictionary:(NSDictionary * _Nonnull)keyedValues;
> 	[Static]
> 	[Export ("normalizeDictionary:")]
> 	NSDictionary NormalizeDictionary (NSDictionary keyedValues);
> }
> 
> // @interface  (UACustomEvent)
> [Category]
> [BaseType (typeof(UACustomEvent))]
> interface UACustomEvent_
> {
> 	// @property (copy, nonatomic) NSString * _Nullable conversionSendID;
> 	[NullAllowed, Export ("conversionSendID")]
> 	string ConversionSendID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable conversionPushMetadata;
> 	[NullAllowed, Export ("conversionPushMetadata")]
> 	string ConversionPushMetadata { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable templateType;
> 	[NullAllowed, Export ("templateType")]
> 	string TemplateType { get; set; }
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> }
> 
> // @interface UADelayOperation : NSBlockOperation
> [BaseType (typeof(NSBlockOperation))]
> interface UADelayOperation
> {
> 	// +(instancetype _Nonnull)operationWithDelayInSeconds:(NSTimeInterval)seconds;
> 	[Static]
> 	[Export ("operationWithDelayInSeconds:")]
> 	UADelayOperation OperationWithDelayInSeconds (double seconds);
> 
> 	// @property (readonly, assign, nonatomic) NSTimeInterval seconds;
> 	[Export ("seconds")]
> 	double Seconds { get; }
> }
> 
> // @interface UADeviceRegistrationEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UADeviceRegistrationEvent
> {
> 	// +(instancetype _Nonnull)event;
> 	[Static]
> 	[Export ("event")]
> 	UADeviceRegistrationEvent Event ();
> }
> 
> // @interface  (UAEvent)
> [Category]
> [BaseType (typeof(UAEvent))]
> interface UAEvent_
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull time;
> 	[Export ("time")]
> 	string Time { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull eventID;
> 	[Export ("eventID")]
> 	string EventID { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nonnull data;
> 	[Export ("data", ArgumentSemantic.Strong)]
> 	NSDictionary Data { get; set; }
> 
> 	// @property (readonly, nonatomic) UAEventPriority priority;
> 	[Export ("priority")]
> 	UAEventPriority Priority { get; }
> 
> 	// @property (readonly, nonatomic) NSUInteger jsonEventSize;
> 	[Export ("jsonEventSize")]
> 	nuint JsonEventSize { get; }
> 
> 	// -(NSString * _Nonnull)carrierName;
> 	[Export ("carrierName")]
> 	[Verify (MethodToProperty)]
> 	string CarrierName { get; }
> 
> 	// -(NSArray * _Nonnull)notificationTypes;
> 	[Export ("notificationTypes")]
> 	[Verify (MethodToProperty), Verify (StronglyTypedNSArray)]
> 	NSObject[] NotificationTypes { get; }
> }
> 
> // @interface UAEventAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UAEventAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("clientWithConfig:")]
> 	UAEventAPIClient ClientWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Static]
> 	[Export ("clientWithConfig:session:")]
> 	UAEventAPIClient ClientWithConfig (UAConfig config, UARequestSession session);
> 
> 	// -(void)uploadEvents:(NSArray * _Nonnull)events completionHandler:(void (^ _Nonnull)(NSHTTPURLResponse * _Nonnull))completionHandler;
> 	[Export ("uploadEvents:completionHandler:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void UploadEvents (NSObject[] events, Action<NSHTTPURLResponse> completionHandler);
> }
> 
> // @interface UAEventData : NSManagedObject
> [BaseType (typeof(NSManagedObject))]
> interface UAEventData
> {
> 	// @property (retain, nonatomic) NSString * _Nullable sessionID;
> 	[NullAllowed, Export ("sessionID", ArgumentSemantic.Retain)]
> 	string SessionID { get; set; }
> 
> 	// @property (retain, nonatomic) NSData * _Nullable data;
> 	[NullAllowed, Export ("data", ArgumentSemantic.Retain)]
> 	NSData Data { get; set; }
> 
> 	// @property (retain, nonatomic) NSString * _Nullable time;
> 	[NullAllowed, Export ("time", ArgumentSemantic.Retain)]
> 	string Time { get; set; }
> 
> 	// @property (retain, nonatomic) NSNumber * _Nullable bytes;
> 	[NullAllowed, Export ("bytes", ArgumentSemantic.Retain)]
> 	NSNumber Bytes { get; set; }
> 
> 	// @property (retain, nonatomic) NSString * _Nullable type;
> 	[NullAllowed, Export ("type", ArgumentSemantic.Retain)]
> 	string Type { get; set; }
> 
> 	// @property (retain, nonatomic) NSString * _Nullable identifier;
> 	[NullAllowed, Export ("identifier", ArgumentSemantic.Retain)]
> 	string Identifier { get; set; }
> 
> 	// @property (retain, nonatomic) NSDate * _Nullable storeDate;
> 	[NullAllowed, Export ("storeDate", ArgumentSemantic.Retain)]
> 	NSDate StoreDate { get; set; }
> }
> 
> // @interface UAEventManager : NSObject
> [BaseType (typeof(NSObject))]
> interface UAEventManager
> {
> 	// @property (readonly, nonatomic, strong) NSDate * lastSendTime;
> 	[Export ("lastSendTime", ArgumentSemantic.Strong)]
> 	NSDate LastSendTime { get; }
> 
> 	// +(instancetype)eventManagerWithConfig:(UAConfig *)config dataStore:(UAPreferenceDataStore *)dataStore;
> 	[Static]
> 	[Export ("eventManagerWithConfig:dataStore:")]
> 	UAEventManager EventManagerWithConfig (UAConfig config, UAPreferenceDataStore dataStore);
> 
> 	// +(instancetype)eventManagerWithConfig:(UAConfig *)config dataStore:(UAPreferenceDataStore *)dataStore eventStore:(UAEventStore *)eventStore client:(UAEventAPIClient *)client queue:(NSOperationQueue *)queue;
> 	[Static]
> 	[Export ("eventManagerWithConfig:dataStore:eventStore:client:queue:")]
> 	UAEventManager EventManagerWithConfig (UAConfig config, UAPreferenceDataStore dataStore, UAEventStore eventStore, UAEventAPIClient client, NSOperationQueue queue);
> 
> 	// -(void)addEvent:(UAEvent *)event sessionID:(NSString *)sessionID;
> 	[Export ("addEvent:sessionID:")]
> 	void AddEvent (UAEvent @event, string sessionID);
> 
> 	// -(void)deleteAllEvents;
> 	[Export ("deleteAllEvents")]
> 	void DeleteAllEvents ();
> 
> 	// -(void)scheduleUpload;
> 	[Export ("scheduleUpload")]
> 	void ScheduleUpload ();
> 
> 	// -(void)cancelUpload;
> 	[Export ("cancelUpload")]
> 	void CancelUpload ();
> }
> 
> // @interface UAEventStore : NSObject
> [BaseType (typeof(NSObject))]
> interface UAEventStore
> {
> 	// +(instancetype)eventStoreWithConfig:(UAConfig *)config;
> 	[Static]
> 	[Export ("eventStoreWithConfig:")]
> 	UAEventStore EventStoreWithConfig (UAConfig config);
> 
> 	// -(void)saveEvent:(UAEvent *)event sessionID:(NSString *)sessionID;
> 	[Export ("saveEvent:sessionID:")]
> 	void SaveEvent (UAEvent @event, string sessionID);
> 
> 	// -(void)fetchEventsWithMaxBatchSize:(NSUInteger)maxBatchSize completionHandler:(void (^)(NSArray<UAEventData *> *))completionHandler;
> 	[Export ("fetchEventsWithMaxBatchSize:completionHandler:")]
> 	void FetchEventsWithMaxBatchSize (nuint maxBatchSize, Action<NSArray<UAEventData>> completionHandler);
> 
> 	// -(void)deleteEventsWithIDs:(NSArray<NSString *> *)eventIds;
> 	[Export ("deleteEventsWithIDs:")]
> 	void DeleteEventsWithIDs (string[] eventIds);
> 
> 	// -(void)trimEventsToStoreSize:(NSUInteger)bytes;
> 	[Export ("trimEventsToStoreSize:")]
> 	void TrimEventsToStoreSize (nuint bytes);
> 
> 	// -(void)deleteAllEvents;
> 	[Export ("deleteAllEvents")]
> 	void DeleteAllEvents ();
> }
> 
> // @interface UAInAppDisplayEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAInAppDisplayEvent
> {
> 	// +(instancetype _Nonnull)eventWithMessage:(UAInAppMessage * _Nonnull)message;
> 	[Static]
> 	[Export ("eventWithMessage:")]
> 	UAInAppDisplayEvent EventWithMessage (UAInAppMessage message);
> }
> 
> // @interface UAInAppMessageController : NSObject <UIGestureRecognizerDelegate>
> [BaseType (typeof(NSObject))]
> interface UAInAppMessageController : IUIGestureRecognizerDelegate
> {
> 	// @property (readonly, nonatomic) UAInAppMessage * _Nonnull message;
> 	[Export ("message")]
> 	UAInAppMessage Message { get; }
> 
> 	// @property (readonly, nonatomic) BOOL isShowing;
> 	[Export ("isShowing")]
> 	bool IsShowing { get; }
> 
> 	[Wrap ("WeakDefaultDelegate")]
> 	UAInAppMessageControllerDefaultDelegate DefaultDelegate { get; set; }
> 
> 	// @property (nonatomic, strong) UAInAppMessageControllerDefaultDelegate * _Nonnull defaultDelegate;
> 	[NullAllowed, Export ("defaultDelegate", ArgumentSemantic.Strong)]
> 	NSObject WeakDefaultDelegate { get; set; }
> 
> 	[Wrap ("WeakUserDelegate")]
> 	[NullAllowed]
> 	UAInAppMessageControllerDelegate UserDelegate { get; set; }
> 
> 	// @property (nonatomic, strong) id<UAInAppMessageControllerDelegate> _Nullable userDelegate;
> 	[NullAllowed, Export ("userDelegate", ArgumentSemantic.Strong)]
> 	NSObject WeakUserDelegate { get; set; }
> 
> 	// +(instancetype _Nonnull)controllerWithMessage:(UAInAppMessage * _Nonnull)message delegate:(id<UAInAppMessageControllerDelegate> _Nonnull)delegate dismissalBlock:(void (^ _Nonnull)(UAInAppMessageController * _Nonnull))dismissalBlock;
> 	[Static]
> 	[Export ("controllerWithMessage:delegate:dismissalBlock:")]
> 	UAInAppMessageController ControllerWithMessage (UAInAppMessage message, UAInAppMessageControllerDelegate @delegate, Action<UAInAppMessageController> dismissalBlock);
> 
> 	// -(BOOL)show;
> 	[Export ("show")]
> 	[Verify (MethodToProperty)]
> 	bool Show { get; }
> 
> 	// -(void)dismiss;
> 	[Export ("dismiss")]
> 	void Dismiss ();
> }
> 
> // @interface  (UAInAppMessageView)
> [Category]
> [BaseType (typeof(UAInAppMessageView))]
> interface UAInAppMessageView_
> {
> 	// @property (copy, nonatomic) void (^ _Nonnull)(void) onLayoutSubviews;
> 	[Export ("onLayoutSubviews", ArgumentSemantic.Copy)]
> 	Action OnLayoutSubviews { get; set; }
> }
> 
> // @interface  (UAInAppMessaging)
> [Category]
> [BaseType (typeof(UAInAppMessaging))]
> interface UAInAppMessaging_
> {
> 	// @property (getter = isKeyboardDisplayed, assign, nonatomic) BOOL keyboardDisplayed;
> 	[Export ("keyboardDisplayed")]
> 	bool KeyboardDisplayed { [Bind ("isKeyboardDisplayed")] get; set; }
> 
> 	// +(instancetype _Nonnull)inAppMessagingWithAnalytics:(UAAnalytics * _Nonnull)analytics dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("inAppMessagingWithAnalytics:dataStore:")]
> 	UAInAppMessaging InAppMessagingWithAnalytics (UAAnalytics analytics, UAPreferenceDataStore dataStore);
> 
> 	// -(void)invalidateAutoDisplayTimer;
> 	[Export ("invalidateAutoDisplayTimer")]
> 	void InvalidateAutoDisplayTimer ();
> }
> 
> // @interface UAInAppResolutionEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAInAppResolutionEvent
> {
> 	// +(instancetype _Nonnull)expiredMessageResolutionWithMessage:(UAInAppMessage * _Nonnull)message;
> 	[Static]
> 	[Export ("expiredMessageResolutionWithMessage:")]
> 	UAInAppResolutionEvent ExpiredMessageResolutionWithMessage (UAInAppMessage message);
> 
> 	// +(instancetype _Nonnull)replacedResolutionWithMessage:(UAInAppMessage * _Nonnull)message replacement:(UAInAppMessage * _Nonnull)replacement;
> 	[Static]
> 	[Export ("replacedResolutionWithMessage:replacement:")]
> 	UAInAppResolutionEvent ReplacedResolutionWithMessage (UAInAppMessage message, UAInAppMessage replacement);
> 
> 	// +(instancetype _Nonnull)buttonClickedResolutionWithMessage:(UAInAppMessage * _Nonnull)message buttonIdentifier:(NSString * _Nullable)buttonID buttonTitle:(NSString * _Nullable)buttonTitle displayDuration:(NSTimeInterval)duration;
> 	[Static]
> 	[Export ("buttonClickedResolutionWithMessage:buttonIdentifier:buttonTitle:displayDuration:")]
> 	UAInAppResolutionEvent ButtonClickedResolutionWithMessage (UAInAppMessage message, [NullAllowed] string buttonID, [NullAllowed] string buttonTitle, double duration);
> 
> 	// +(instancetype _Nonnull)messageClickedResolutionWithMessage:(UAInAppMessage * _Nonnull)message displayDuration:(NSTimeInterval)duration;
> 	[Static]
> 	[Export ("messageClickedResolutionWithMessage:displayDuration:")]
> 	UAInAppResolutionEvent MessageClickedResolutionWithMessage (UAInAppMessage message, double duration);
> 
> 	// +(instancetype _Nonnull)dismissedResolutionWithMessage:(UAInAppMessage * _Nonnull)message displayDuration:(NSTimeInterval)duration;
> 	[Static]
> 	[Export ("dismissedResolutionWithMessage:displayDuration:")]
> 	UAInAppResolutionEvent DismissedResolutionWithMessage (UAInAppMessage message, double duration);
> 
> 	// +(instancetype _Nonnull)timedOutResolutionWithMessage:(UAInAppMessage * _Nonnull)message displayDuration:(NSTimeInterval)duration;
> 	[Static]
> 	[Export ("timedOutResolutionWithMessage:displayDuration:")]
> 	UAInAppResolutionEvent TimedOutResolutionWithMessage (UAInAppMessage message, double duration);
> 
> 	// +(instancetype _Nonnull)directOpenResolutionWithMessage:(UAInAppMessage * _Nonnull)message;
> 	[Static]
> 	[Export ("directOpenResolutionWithMessage:")]
> 	UAInAppResolutionEvent DirectOpenResolutionWithMessage (UAInAppMessage message);
> }
> 
> // @interface  (UAInbox)
> [Category]
> [BaseType (typeof(UAInbox))]
> interface UAInbox_
> {
> 	// @property (nonatomic, strong) UAInboxAPIClient * _Nonnull client;
> 	[Export ("client", ArgumentSemantic.Strong)]
> 	UAInboxAPIClient Client { get; set; }
> 
> 	// @property (nonatomic, strong) UAUser * _Nonnull user;
> 	[Export ("user", ArgumentSemantic.Strong)]
> 	UAUser User { get; set; }
> 
> 	// +(instancetype _Nonnull)inboxWithUser:(UAUser * _Nonnull)user config:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("inboxWithUser:config:dataStore:")]
> 	UAInbox InboxWithUser (UAUser user, UAConfig config, UAPreferenceDataStore dataStore);
> }
> 
> // typedef void (^UAInboxClientMessageRetrievalSuccessBlock)(NSUInteger, NSArray * _Nullable);
> delegate void UAInboxClientMessageRetrievalSuccessBlock (nuint arg0, [NullAllowed] NSObject[] arg1);
> 
> // typedef void (^UAInboxClientSuccessBlock)();
> delegate void UAInboxClientSuccessBlock ();
> 
> // typedef void (^UAInboxClientFailureBlock)(NSUInteger);
> delegate void UAInboxClientFailureBlock (nuint arg0);
> 
> // @interface UAInboxAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UAInboxAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session user:(UAUser * _Nonnull)user dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("clientWithConfig:session:user:dataStore:")]
> 	UAInboxAPIClient ClientWithConfig (UAConfig config, UARequestSession session, UAUser user, UAPreferenceDataStore dataStore);
> 
> 	// -(void)retrieveMessageListOnSuccess:(UAInboxClientMessageRetrievalSuccessBlock _Nonnull)successBlock onFailure:(UAInboxClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("retrieveMessageListOnSuccess:onFailure:")]
> 	void RetrieveMessageListOnSuccess (UAInboxClientMessageRetrievalSuccessBlock successBlock, UAInboxClientFailureBlock failureBlock);
> 
> 	// -(void)performBatchDeleteForMessages:(NSArray * _Nonnull)messages onSuccess:(UAInboxClientSuccessBlock _Nonnull)successBlock onFailure:(UAInboxClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("performBatchDeleteForMessages:onSuccess:onFailure:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void PerformBatchDeleteForMessages (NSObject[] messages, UAInboxClientSuccessBlock successBlock, UAInboxClientFailureBlock failureBlock);
> 
> 	// -(void)performBatchMarkAsReadForMessages:(NSArray * _Nonnull)messages onSuccess:(UAInboxClientSuccessBlock _Nonnull)successBlock onFailure:(UAInboxClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("performBatchMarkAsReadForMessages:onSuccess:onFailure:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void PerformBatchMarkAsReadForMessages (NSObject[] messages, UAInboxClientSuccessBlock successBlock, UAInboxClientFailureBlock failureBlock);
> 
> 	// -(void)clearLastModifiedTime;
> 	[Export ("clearLastModifiedTime")]
> 	void ClearLastModifiedTime ();
> 
> 	// -(UARequest * _Nonnull)requestToRetrieveMessageList;
> 	[Export ("requestToRetrieveMessageList")]
> 	[Verify (MethodToProperty)]
> 	UARequest RequestToRetrieveMessageList { get; }
> 
> 	// -(UARequest * _Nonnull)requestToPerformBatchDeleteForMessages:(NSArray * _Nonnull)messages;
> 	[Export ("requestToPerformBatchDeleteForMessages:")]
> 	[Verify (StronglyTypedNSArray)]
> 	UARequest RequestToPerformBatchDeleteForMessages (NSObject[] messages);
> 
> 	// -(UARequest * _Nonnull)requestToPerformBatchMarkReadForMessages:(NSArray * _Nonnull)messages;
> 	[Export ("requestToPerformBatchMarkReadForMessages:")]
> 	[Verify (StronglyTypedNSArray)]
> 	UARequest RequestToPerformBatchMarkReadForMessages (NSObject[] messages);
> }
> 
> // @interface UAInboxDBManager : NSObject
> [BaseType (typeof(NSObject))]
> interface UAInboxDBManager
> {
> 	// @property (readonly) NSURL * _Nonnull storeURL;
> 	[Export ("storeURL")]
> 	NSUrl StoreURL { get; }
> 
> 	// @property (readonly) NSManagedObjectContext * _Nonnull mainContext;
> 	[Export ("mainContext")]
> 	NSManagedObjectContext MainContext { get; }
> 
> 	// @property (readonly) NSManagedObjectContext * _Nonnull privateContext;
> 	[Export ("privateContext")]
> 	NSManagedObjectContext PrivateContext { get; }
> 
> 	// @property (readonly) NSManagedObjectModel * _Nonnull managedObjectModel;
> 	[Export ("managedObjectModel")]
> 	NSManagedObjectModel ManagedObjectModel { get; }
> 
> 	// @property (readonly) NSPersistentStoreCoordinator * _Nonnull persistentStoreCoordinator;
> 	[Export ("persistentStoreCoordinator")]
> 	NSPersistentStoreCoordinator PersistentStoreCoordinator { get; }
> 
> 	// -(instancetype _Nonnull)initWithConfig:(UAConfig * _Nonnull)config;
> 	[Export ("initWithConfig:")]
> 	IntPtr Constructor (UAConfig config);
> 
> 	// -(void)fetchMessagesWithPredicate:(NSPredicate * _Nonnull)predicate context:(NSManagedObjectContext * _Nonnull)context completionHandler:(void (^ _Nonnull)(NSArray * _Nonnull))completionHandler;
> 	[Export ("fetchMessagesWithPredicate:context:completionHandler:")]
> 	void FetchMessagesWithPredicate (NSPredicate predicate, NSManagedObjectContext context, Action<NSArray> completionHandler);
> 
> 	// -(BOOL)updateMessageWithDictionary:(NSDictionary * _Nonnull)dictionary context:(NSManagedObjectContext * _Nonnull)context;
> 	[Export ("updateMessageWithDictionary:context:")]
> 	bool UpdateMessageWithDictionary (NSDictionary dictionary, NSManagedObjectContext context);
> 
> 	// -(UAInboxMessage * _Nonnull)addMessageFromDictionary:(NSDictionary * _Nonnull)dictionary context:(NSManagedObjectContext * _Nonnull)context;
> 	[Export ("addMessageFromDictionary:context:")]
> 	UAInboxMessage AddMessageFromDictionary (NSDictionary dictionary, NSManagedObjectContext context);
> 
> 	// -(void)deleteMessages:(NSArray * _Nonnull)messages context:(NSManagedObjectContext * _Nonnull)context;
> 	[Export ("deleteMessages:context:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void DeleteMessages (NSObject[] messages, NSManagedObjectContext context);
> }
> 
> // @interface UAInboxMessageData : NSManagedObject
> [BaseType (typeof(NSManagedObject))]
> interface UAInboxMessageData
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull messageID;
> 	[Export ("messageID")]
> 	string MessageID { get; set; }
> 
> 	// @property (nonatomic, strong) NSURL * _Nonnull messageBodyURL;
> 	[Export ("messageBodyURL", ArgumentSemantic.Strong)]
> 	NSUrl MessageBodyURL { get; set; }
> 
> 	// @property (nonatomic, strong) NSURL * _Nonnull messageURL;
> 	[Export ("messageURL", ArgumentSemantic.Strong)]
> 	NSUrl MessageURL { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull contentType;
> 	[Export ("contentType")]
> 	string ContentType { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL unread;
> 	[Export ("unread")]
> 	bool Unread { get; set; }
> 
> 	// @property (assign) BOOL unreadClient;
> 	[Export ("unreadClient")]
> 	bool UnreadClient { get; set; }
> 
> 	// @property (assign) BOOL deletedClient;
> 	[Export ("deletedClient")]
> 	bool DeletedClient { get; set; }
> 
> 	// @property (nonatomic, strong) NSDate * _Nonnull messageSent;
> 	[Export ("messageSent", ArgumentSemantic.Strong)]
> 	NSDate MessageSent { get; set; }
> 
> 	// @property (nonatomic, strong) NSDate * _Nullable messageExpiration;
> 	[NullAllowed, Export ("messageExpiration", ArgumentSemantic.Strong)]
> 	NSDate MessageExpiration { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull title;
> 	[Export ("title")]
> 	string Title { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nonnull extra;
> 	[Export ("extra", ArgumentSemantic.Strong)]
> 	NSDictionary Extra { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nonnull rawMessageObject;
> 	[Export ("rawMessageObject", ArgumentSemantic.Strong)]
> 	NSDictionary RawMessageObject { get; set; }
> 
> 	// @property (readonly, nonatomic) BOOL isGone;
> 	[Export ("isGone")]
> 	bool IsGone { get; }
> }
> 
> // @interface  (UAInboxMessage)
> [Category]
> [BaseType (typeof(UAInboxMessage))]
> interface UAInboxMessage_
> {
> 	// @property (nonatomic, strong) UAInboxMessageData * _Nonnull data;
> 	[Export ("data", ArgumentSemantic.Strong)]
> 	UAInboxMessageData Data { get; set; }
> 
> 	// @property (nonatomic, weak) UAInboxMessageList * _Nullable inbox;
> 	[NullAllowed, Export ("inbox", ArgumentSemantic.Weak)]
> 	UAInboxMessageList Inbox { get; set; }
> 
> 	// +(instancetype _Nonnull)messageWithData:(UAInboxMessageData * _Nonnull)data;
> 	[Static]
> 	[Export ("messageWithData:")]
> 	UAInboxMessage MessageWithData (UAInboxMessageData data);
> }
> 
> // @interface  (UAInboxMessageList)
> [Category]
> [BaseType (typeof(UAInboxMessageList))]
> interface UAInboxMessageList_
> {
> 	// @property (nonatomic, strong) UAInboxAPIClient * _Nonnull client;
> 	[Export ("client", ArgumentSemantic.Strong)]
> 	UAInboxAPIClient Client { get; set; }
> 
> 	// @property (nonatomic, strong) UAUser * _Nonnull user;
> 	[Export ("user", ArgumentSemantic.Strong)]
> 	UAUser User { get; set; }
> 
> 	// @property (nonatomic, strong) UAInboxDBManager * _Nonnull inboxDBManager;
> 	[Export ("inboxDBManager", ArgumentSemantic.Strong)]
> 	UAInboxDBManager InboxDBManager { get; set; }
> 
> 	// @property (assign, atomic) NSUInteger batchOperationCount;
> 	[Export ("batchOperationCount")]
> 	nuint BatchOperationCount { get; set; }
> 
> 	// @property (assign, atomic) NSUInteger retrieveOperationCount;
> 	[Export ("retrieveOperationCount")]
> 	nuint RetrieveOperationCount { get; set; }
> 
> 	// @property (nonatomic, strong) NSArray<UAInboxMessage *> * _Nonnull messages;
> 	[Export ("messages", ArgumentSemantic.Strong)]
> 	UAInboxMessage[] Messages { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nonnull messageIDMap;
> 	[Export ("messageIDMap", ArgumentSemantic.Strong)]
> 	NSDictionary MessageIDMap { get; set; }
> 
> 	// @property (nonatomic, strong) NSDictionary * _Nonnull messageURLMap;
> 	[Export ("messageURLMap", ArgumentSemantic.Strong)]
> 	NSDictionary MessageURLMap { get; set; }
> 
> 	// -(void)loadSavedMessages;
> 	[Export ("loadSavedMessages")]
> 	void LoadSavedMessages ();
> 
> 	// +(instancetype _Nonnull)messageListWithUser:(UAUser * _Nonnull)user client:(UAInboxAPIClient * _Nonnull)client config:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("messageListWithUser:client:config:")]
> 	UAInboxMessageList MessageListWithUser (UAUser user, UAInboxAPIClient client, UAConfig config);
> }
> 
> // @interface UAInteractiveNotificationEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAInteractiveNotificationEvent
> {
> 	// +(instancetype _Nonnull)eventWithNotificationAction:(UANotificationAction * _Nonnull)action categoryID:(NSString * _Nonnull)category notification:(NSDictionary * _Nonnull)notification;
> 	[Static]
> 	[Export ("eventWithNotificationAction:categoryID:notification:")]
> 	UAInteractiveNotificationEvent EventWithNotificationAction (UANotificationAction action, string category, NSDictionary notification);
> 
> 	// +(instancetype _Nonnull)eventWithNotificationAction:(UANotificationAction * _Nonnull)action categoryID:(NSString * _Nonnull)category notification:(NSDictionary * _Nonnull)notification responseText:(NSString * _Nullable)responseText;
> 	[Static]
> 	[Export ("eventWithNotificationAction:categoryID:notification:responseText:")]
> 	UAInteractiveNotificationEvent EventWithNotificationAction (UANotificationAction action, string category, NSDictionary notification, [NullAllowed] string responseText);
> }
> 
> // @interface  (UAirship)
> [Category]
> [BaseType (typeof(UAirship))]
> interface UAirship_
> {
> 	// @property (nonatomic, strong) UAConfig * _Nonnull config;
> 	[Export ("config", ArgumentSemantic.Strong)]
> 	UAConfig Config { get; set; }
> 
> 	// @property (nonatomic, strong) UAAnalytics * _Nonnull analytics;
> 	[Export ("analytics", ArgumentSemantic.Strong)]
> 	UAAnalytics Analytics { get; set; }
> 
> 	// @property (nonatomic, strong) UAActionRegistry * _Nonnull actionRegistry;
> 	[Export ("actionRegistry", ArgumentSemantic.Strong)]
> 	UAActionRegistry ActionRegistry { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL remoteNotificationBackgroundModeEnabled;
> 	[Export ("remoteNotificationBackgroundModeEnabled")]
> 	bool RemoteNotificationBackgroundModeEnabled { get; set; }
> 
> 	[Wrap ("WeakActionJSDelegate")]
> 	[NullAllowed]
> 	UAJavaScriptDelegate ActionJSDelegate { get; set; }
> 
> 	// @property (nonatomic, strong) id<UAJavaScriptDelegate> _Nullable actionJSDelegate;
> 	[NullAllowed, Export ("actionJSDelegate", ArgumentSemantic.Strong)]
> 	NSObject WeakActionJSDelegate { get; set; }
> 
> 	// @property (nonatomic, strong) UAApplicationMetrics * _Nonnull applicationMetrics;
> 	[Export ("applicationMetrics", ArgumentSemantic.Strong)]
> 	UAApplicationMetrics ApplicationMetrics { get; set; }
> 
> 	// @property (nonatomic, strong) UAWhitelist * _Nonnull whitelist;
> 	[Export ("whitelist", ArgumentSemantic.Strong)]
> 	UAWhitelist Whitelist { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * _Nonnull dataStore;
> 	[Export ("dataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore DataStore { get; set; }
> 
> 	// @property (nonatomic, strong) UAChannelCapture * _Nonnull channelCapture;
> 	[Export ("channelCapture", ArgumentSemantic.Strong)]
> 	UAChannelCapture ChannelCapture { get; set; }
> 
> 	// @property (nonatomic, strong) UAPush * _Nonnull sharedPush;
> 	[Export ("sharedPush", ArgumentSemantic.Strong)]
> 	UAPush SharedPush { get; set; }
> 
> 	// @property (nonatomic, strong) UAUser * _Nonnull sharedInboxUser;
> 	[Export ("sharedInboxUser", ArgumentSemantic.Strong)]
> 	UAUser SharedInboxUser { get; set; }
> 
> 	// @property (nonatomic, strong) UAInbox * _Nonnull sharedInbox;
> 	[Export ("sharedInbox", ArgumentSemantic.Strong)]
> 	UAInbox SharedInbox { get; set; }
> 
> 	// @property (nonatomic, strong) UAInAppMessaging * _Nonnull sharedInAppMessaging;
> 	[Export ("sharedInAppMessaging", ArgumentSemantic.Strong)]
> 	UAInAppMessaging SharedInAppMessaging { get; set; }
> 
> 	// @property (nonatomic, strong) UADefaultMessageCenter * _Nonnull sharedDefaultMessageCenter;
> 	[Export ("sharedDefaultMessageCenter", ArgumentSemantic.Strong)]
> 	UADefaultMessageCenter SharedDefaultMessageCenter { get; set; }
> 
> 	// @property (nonatomic, strong) UALocation * _Nonnull sharedLocation;
> 	[Export ("sharedLocation", ArgumentSemantic.Strong)]
> 	UALocation SharedLocation { get; set; }
> 
> 	// @property (nonatomic, strong) UANamedUser * _Nonnull sharedNamedUser;
> 	[Export ("sharedNamedUser", ArgumentSemantic.Strong)]
> 	UANamedUser SharedNamedUser { get; set; }
> 
> 	// @property (nonatomic, strong) UAAutomation * _Nonnull sharedAutomation;
> 	[Export ("sharedAutomation", ArgumentSemantic.Strong)]
> 	UAAutomation SharedAutomation { get; set; }
> 
> 	// +(void)handleAppDidFinishLaunchingNotification:(NSNotification * _Nonnull)notification;
> 	[Static]
> 	[Export ("handleAppDidFinishLaunchingNotification:")]
> 	void HandleAppDidFinishLaunchingNotification (NSNotification notification);
> 
> 	// +(void)handleAppTerminationNotification:(NSNotification * _Nonnull)notification;
> 	[Static]
> 	[Export ("handleAppTerminationNotification:")]
> 	void HandleAppTerminationNotification (NSNotification notification);
> 
> 	// +(void)land;
> 	[Static]
> 	[Export ("land")]
> 	void Land ();
> }
> 
> // @interface UAJSONValueTransformer : NSValueTransformer
> [BaseType (typeof(NSValueTransformer))]
> interface UAJSONValueTransformer
> {
> }
> 
> // @interface UAKeychainUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UAKeychainUtils
> {
> 	// +(BOOL)createKeychainValueForUsername:(NSString * _Nonnull)username withPassword:(NSString * _Nonnull)password forIdentifier:(NSString * _Nonnull)identifier;
> 	[Static]
> 	[Export ("createKeychainValueForUsername:withPassword:forIdentifier:")]
> 	bool CreateKeychainValueForUsername (string username, string password, string identifier);
> 
> 	// +(void)deleteKeychainValue:(NSString * _Nonnull)identifier;
> 	[Static]
> 	[Export ("deleteKeychainValue:")]
> 	void DeleteKeychainValue (string identifier);
> 
> 	// +(BOOL)updateKeychainValueForUsername:(NSString * _Nonnull)username withPassword:(NSString * _Nonnull)password forIdentifier:(NSString * _Nonnull)identifier;
> 	[Static]
> 	[Export ("updateKeychainValueForUsername:withPassword:forIdentifier:")]
> 	bool UpdateKeychainValueForUsername (string username, string password, string identifier);
> 
> 	// +(NSString * _Nullable)getPassword:(NSString * _Nonnull)identifier;
> 	[Static]
> 	[Export ("getPassword:")]
> 	[return: NullAllowed]
> 	string GetPassword (string identifier);
> 
> 	// +(NSString * _Nullable)getUsername:(NSString * _Nonnull)identifier;
> 	[Static]
> 	[Export ("getUsername:")]
> 	[return: NullAllowed]
> 	string GetUsername (string identifier);
> 
> 	// +(NSString * _Nonnull)getDeviceID;
> 	[Static]
> 	[Export ("getDeviceID")]
> 	[Verify (MethodToProperty)]
> 	string DeviceID { get; }
> }
> 
> // @interface UALegacyAPNSRegistration : NSObject <UAAPNSRegistrationProtocol>
> [BaseType (typeof(NSObject))]
> interface UALegacyAPNSRegistration : IUAAPNSRegistrationProtocol
> {
> 	// -(void)getCurrentAuthorizationOptionsWithCompletionHandler:(void (^ _Nonnull)(UANotificationOptions))completionHandler;
> 	[Export ("getCurrentAuthorizationOptionsWithCompletionHandler:")]
> 	void GetCurrentAuthorizationOptionsWithCompletionHandler (Action<UANotificationOptions> completionHandler);
> 
> 	// -(void)updateRegistrationWithOptions:(UANotificationOptions)options categories:(NSSet<UANotificationCategory *> * _Nonnull)categories completionHandler:(void (^ _Nonnull)())completionHandler;
> 	[Export ("updateRegistrationWithOptions:categories:completionHandler:")]
> 	void UpdateRegistrationWithOptions (UANotificationOptions options, NSSet<UANotificationCategory> categories, Action completionHandler);
> }
> 
> // @interface  (UALocation) <CLLocationManagerDelegate>
> [Category]
> [BaseType (typeof(UALocation))]
> interface UALocation_ : ICLLocationManagerDelegate
> {
> 	// @property (nonatomic, strong) CLLocationManager * _Nonnull locationManager;
> 	[Export ("locationManager", ArgumentSemantic.Strong)]
> 	CLLocationManager LocationManager { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * _Nonnull dataStore;
> 	[Export ("dataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore DataStore { get; set; }
> 
> 	// @property (nonatomic, strong) UAAnalytics * _Nonnull analytics;
> 	[Export ("analytics", ArgumentSemantic.Strong)]
> 	UAAnalytics Analytics { get; set; }
> 
> 	// @property (getter = isLocationUpdatesStarted, assign, nonatomic) BOOL locationUpdatesStarted;
> 	[Export ("locationUpdatesStarted")]
> 	bool LocationUpdatesStarted { [Bind ("isLocationUpdatesStarted")] get; set; }
> 
> 	// +(instancetype _Nonnull)locationWithAnalytics:(UAAnalytics * _Nonnull)analytics dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("locationWithAnalytics:dataStore:")]
> 	UALocation LocationWithAnalytics (UAAnalytics analytics, UAPreferenceDataStore dataStore);
> }
> 
> // @interface  (UANamedUser)
> [Category]
> [BaseType (typeof(UANamedUser))]
> interface UANamedUser_
> {
> 	// @property (copy, nonatomic) NSString * _Nullable changeToken;
> 	[NullAllowed, Export ("changeToken")]
> 	string ChangeToken { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable lastUpdatedToken;
> 	[NullAllowed, Export ("lastUpdatedToken")]
> 	string LastUpdatedToken { get; set; }
> 
> 	// @property (nonatomic, strong) UANamedUserAPIClient * _Nonnull namedUserAPIClient;
> 	[Export ("namedUserAPIClient", ArgumentSemantic.Strong)]
> 	UANamedUserAPIClient NamedUserAPIClient { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * _Nonnull dataStore;
> 	[Export ("dataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore DataStore { get; set; }
> 
> 	// @property (nonatomic, strong) UAPush * _Nonnull push;
> 	[Export ("push", ArgumentSemantic.Strong)]
> 	UAPush Push { get; set; }
> 
> 	// @property (nonatomic, strong) UAConfig * _Nonnull config;
> 	[Export ("config", ArgumentSemantic.Strong)]
> 	UAConfig Config { get; set; }
> 
> 	// @property (nonatomic, strong) UATagGroupsAPIClient * _Nonnull tagGroupsAPIClient;
> 	[Export ("tagGroupsAPIClient", ArgumentSemantic.Strong)]
> 	UATagGroupsAPIClient TagGroupsAPIClient { get; set; }
> 
> 	// +(instancetype _Nonnull)namedUserWithPush:(UAPush * _Nonnull)push config:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("namedUserWithPush:config:dataStore:")]
> 	UANamedUser NamedUserWithPush (UAPush push, UAConfig config, UAPreferenceDataStore dataStore);
> 
> 	// -(void)update;
> 	[Export ("update")]
> 	void Update ();
> 
> 	// -(void)disassociateNamedUserIfNil;
> 	[Export ("disassociateNamedUserIfNil")]
> 	void DisassociateNamedUserIfNil ();
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UANamedUserIDKey;
> 	[Field ("UANamedUserIDKey", "__Internal")]
> 	NSString UANamedUserIDKey { get; }
> 
> 	// extern NSString *const _Nonnull UANamedUserChangeTokenKey;
> 	[Field ("UANamedUserChangeTokenKey", "__Internal")]
> 	NSString UANamedUserChangeTokenKey { get; }
> 
> 	// extern NSString *const _Nonnull UANamedUserLastUpdatedTokenKey;
> 	[Field ("UANamedUserLastUpdatedTokenKey", "__Internal")]
> 	NSString UANamedUserLastUpdatedTokenKey { get; }
> 
> 	// extern NSString *const _Nonnull UANamedUserAddTagGroupsSettingsKey;
> 	[Field ("UANamedUserAddTagGroupsSettingsKey", "__Internal")]
> 	NSString UANamedUserAddTagGroupsSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UANamedUserRemoveTagGroupsSettingsKey;
> 	[Field ("UANamedUserRemoveTagGroupsSettingsKey", "__Internal")]
> 	NSString UANamedUserRemoveTagGroupsSettingsKey { get; }
> }
> 
> // typedef void (^UANamedUserAPIClientSuccessBlock)();
> delegate void UANamedUserAPIClientSuccessBlock ();
> 
> // typedef void (^UANamedUserAPIClientFailureBlock)(NSUInteger);
> delegate void UANamedUserAPIClientFailureBlock (nuint arg0);
> 
> // @interface UANamedUserAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UANamedUserAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("clientWithConfig:")]
> 	UANamedUserAPIClient ClientWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Static]
> 	[Export ("clientWithConfig:session:")]
> 	UANamedUserAPIClient ClientWithConfig (UAConfig config, UARequestSession session);
> 
> 	// -(void)associate:(NSString * _Nonnull)identifier channelID:(NSString * _Nonnull)channelID onSuccess:(UANamedUserAPIClientSuccessBlock _Nonnull)successBlock onFailure:(UANamedUserAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("associate:channelID:onSuccess:onFailure:")]
> 	void Associate (string identifier, string channelID, UANamedUserAPIClientSuccessBlock successBlock, UANamedUserAPIClientFailureBlock failureBlock);
> 
> 	// -(void)disassociate:(NSString * _Nonnull)channelID onSuccess:(UANamedUserAPIClientSuccessBlock _Nonnull)successBlock onFailure:(UANamedUserAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("disassociate:onSuccess:onFailure:")]
> 	void Disassociate (string channelID, UANamedUserAPIClientSuccessBlock successBlock, UANamedUserAPIClientFailureBlock failureBlock);
> }
> 
> // @interface  (UANotificationAction)
> [Category]
> [BaseType (typeof(UANotificationAction))]
> interface UANotificationAction_
> {
> 	// -(BOOL)isEqualToUIUserNotificationAction:(UIUserNotificationAction * _Nonnull)notificationAction;
> 	[Export ("isEqualToUIUserNotificationAction:")]
> 	bool IsEqualToUIUserNotificationAction (UIUserNotificationAction notificationAction);
> 
> 	// -(BOOL)isEqualToUNNotificationAction:(UNNotificationAction * _Nonnull)notificationAction;
> 	[Export ("isEqualToUNNotificationAction:")]
> 	bool IsEqualToUNNotificationAction (UNNotificationAction notificationAction);
> }
> 
> // @interface  (UANotificationCategories)
> [Category]
> [BaseType (typeof(UANotificationCategories))]
> interface UANotificationCategories_
> {
> 	// +(NSSet * _Nonnull)defaultCategories;
> 	[Static]
> 	[Export ("defaultCategories")]
> 	[Verify (MethodToProperty)]
> 	NSSet DefaultCategories { get; }
> 
> 	// +(NSSet * _Nonnull)defaultCategoriesWithRequireAuth:(BOOL)requireAuth;
> 	[Static]
> 	[Export ("defaultCategoriesWithRequireAuth:")]
> 	NSSet DefaultCategoriesWithRequireAuth (bool requireAuth);
> }
> 
> // @interface  (UANotificationCategory)
> [Category]
> [BaseType (typeof(UANotificationCategory))]
> interface UANotificationCategory_
> {
> 	// -(UIUserNotificationCategory * _Nonnull)asUIUserNotificationCategory;
> 	[Export ("asUIUserNotificationCategory")]
> 	[Verify (MethodToProperty)]
> 	UIUserNotificationCategory AsUIUserNotificationCategory { get; }
> 
> 	// -(UNNotificationCategory * _Null_unspecified)asUNNotificationCategory;
> 	[Export ("asUNNotificationCategory")]
> 	[Verify (MethodToProperty)]
> 	UNNotificationCategory AsUNNotificationCategory { get; }
> 
> 	// -(BOOL)isEqualToUIUserNotificationCategory:(UIUserNotificationCategory * _Nonnull)category;
> 	[Export ("isEqualToUIUserNotificationCategory:")]
> 	bool IsEqualToUIUserNotificationCategory (UIUserNotificationCategory category);
> 
> 	// -(BOOL)isEqualToUNNotificationCategory:(UNNotificationCategory * _Nonnull)category;
> 	[Export ("isEqualToUNNotificationCategory:")]
> 	bool IsEqualToUNNotificationCategory (UNNotificationCategory category);
> }
> 
> // @interface UAPreferenceDataStore : NSObject
> [BaseType (typeof(NSObject))]
> interface UAPreferenceDataStore
> {
> 	// +(instancetype _Nonnull)preferenceDataStoreWithKeyPrefix:(NSString * _Nonnull)keyPrefix;
> 	[Static]
> 	[Export ("preferenceDataStoreWithKeyPrefix:")]
> 	UAPreferenceDataStore PreferenceDataStoreWithKeyPrefix (string keyPrefix);
> 
> 	// -(void)migrateUnprefixedKeys:(NSArray * _Nonnull)keys;
> 	[Export ("migrateUnprefixedKeys:")]
> 	[Verify (StronglyTypedNSArray)]
> 	void MigrateUnprefixedKeys (NSObject[] keys);
> 
> 	// -(id _Nonnull)objectForKey:(NSString * _Nonnull)key;
> 	[Export ("objectForKey:")]
> 	NSObject ObjectForKey (string key);
> 
> 	// -(void)removeObjectForKey:(NSString * _Nonnull)key;
> 	[Export ("removeObjectForKey:")]
> 	void RemoveObjectForKey (string key);
> 
> 	// -(NSString * _Nullable)stringForKey:(NSString * _Nonnull)key;
> 	[Export ("stringForKey:")]
> 	[return: NullAllowed]
> 	string StringForKey (string key);
> 
> 	// -(NSArray * _Nullable)arrayForKey:(NSString * _Nonnull)key;
> 	[Export ("arrayForKey:")]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	NSObject[] ArrayForKey (string key);
> 
> 	// -(NSDictionary * _Nullable)dictionaryForKey:(NSString * _Nonnull)key;
> 	[Export ("dictionaryForKey:")]
> 	[return: NullAllowed]
> 	NSDictionary DictionaryForKey (string key);
> 
> 	// -(NSData * _Nullable)dataForKey:(NSString * _Nonnull)key;
> 	[Export ("dataForKey:")]
> 	[return: NullAllowed]
> 	NSData DataForKey (string key);
> 
> 	// -(NSArray * _Nullable)stringArrayForKey:(NSString * _Nonnull)key;
> 	[Export ("stringArrayForKey:")]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	NSObject[] StringArrayForKey (string key);
> 
> 	// -(NSInteger)integerForKey:(NSString * _Nonnull)key;
> 	[Export ("integerForKey:")]
> 	nint IntegerForKey (string key);
> 
> 	// -(float)floatForKey:(NSString * _Nonnull)key;
> 	[Export ("floatForKey:")]
> 	float FloatForKey (string key);
> 
> 	// -(double)doubleForKey:(NSString * _Nonnull)key;
> 	[Export ("doubleForKey:")]
> 	double DoubleForKey (string key);
> 
> 	// -(BOOL)boolForKey:(NSString * _Nonnull)key;
> 	[Export ("boolForKey:")]
> 	bool BoolForKey (string key);
> 
> 	// -(NSURL * _Nullable)URLForKey:(NSString * _Nonnull)key;
> 	[Export ("URLForKey:")]
> 	[return: NullAllowed]
> 	NSUrl URLForKey (string key);
> 
> 	// -(void)setInteger:(NSInteger)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setInteger:forKey:")]
> 	void SetInteger (nint value, string key);
> 
> 	// -(void)setFloat:(float)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setFloat:forKey:")]
> 	void SetFloat (float value, string key);
> 
> 	// -(void)setDouble:(double)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setDouble:forKey:")]
> 	void SetDouble (double value, string key);
> 
> 	// -(void)setBool:(BOOL)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setBool:forKey:")]
> 	void SetBool (bool value, string key);
> 
> 	// -(void)setURL:(NSURL * _Nullable)url forKey:(NSString * _Nonnull)key;
> 	[Export ("setURL:forKey:")]
> 	void SetURL ([NullAllowed] NSUrl url, string key);
> 
> 	// -(void)setObject:(id _Nullable)value forKey:(NSString * _Nonnull)key;
> 	[Export ("setObject:forKey:")]
> 	void SetObject ([NullAllowed] NSObject value, string key);
> 
> 	// -(void)removeAll;
> 	[Export ("removeAll")]
> 	void RemoveAll ();
> }
> 
> // @interface UATagGroupsMutation : NSObject
> [BaseType (typeof(NSObject))]
> interface UATagGroupsMutation
> {
> 	// +(instancetype _Nonnull)mutationToAddTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
> 	[Static]
> 	[Export ("mutationToAddTags:group:")]
> 	UATagGroupsMutation MutationToAddTags (string[] tags, string group);
> 
> 	// +(instancetype _Nonnull)mutationToRemoveTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
> 	[Static]
> 	[Export ("mutationToRemoveTags:group:")]
> 	UATagGroupsMutation MutationToRemoveTags (string[] tags, string group);
> 
> 	// +(instancetype _Nonnull)mutationToSetTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)group;
> 	[Static]
> 	[Export ("mutationToSetTags:group:")]
> 	UATagGroupsMutation MutationToSetTags (string[] tags, string group);
> 
> 	// +(instancetype _Nonnull)mutationWithAddTags:(NSDictionary * _Nullable)addTags removeTags:(NSDictionary * _Nullable)removeTags;
> 	[Static]
> 	[Export ("mutationWithAddTags:removeTags:")]
> 	UATagGroupsMutation MutationWithAddTags ([NullAllowed] NSDictionary addTags, [NullAllowed] NSDictionary removeTags);
> 
> 	// +(NSArray<UATagGroupsMutation *> * _Nonnull)collapseMutations:(NSArray<UATagGroupsMutation *> * _Nonnull)mutations;
> 	[Static]
> 	[Export ("collapseMutations:")]
> 	UATagGroupsMutation[] CollapseMutations (UATagGroupsMutation[] mutations);
> 
> 	// -(NSDictionary * _Nonnull)payload;
> 	[Export ("payload")]
> 	[Verify (MethodToProperty)]
> 	NSDictionary Payload { get; }
> }
> 
> // @interface TagGroupsMutation (UAPreferenceDataStore)
> [Category]
> [BaseType (typeof(UAPreferenceDataStore))]
> interface UAPreferenceDataStore_TagGroupsMutation
> {
> 	// -(void)addTagGroupsMutation:(UATagGroupsMutation * _Nonnull)mutation atBeginning:(BOOL)atBeginning forKey:(NSString * _Nonnull)key;
> 	[Export ("addTagGroupsMutation:atBeginning:forKey:")]
> 	void AddTagGroupsMutation (UATagGroupsMutation mutation, bool atBeginning, string key);
> 
> 	// -(UATagGroupsMutation * _Nullable)pollTagGroupsMutationForKey:(NSString * _Nonnull)key;
> 	[Export ("pollTagGroupsMutationForKey:")]
> 	[return: NullAllowed]
> 	UATagGroupsMutation PollTagGroupsMutationForKey (string key);
> 
> 	// -(void)migrateTagGroupSettingsForAddTagsKey:(NSString * _Nonnull)addTagsKey removeTagsKey:(NSString * _Nonnull)removeTagsKey newKey:(NSString * _Nonnull)key;
> 	[Export ("migrateTagGroupSettingsForAddTagsKey:removeTagsKey:newKey:")]
> 	void MigrateTagGroupSettingsForAddTagsKey (string addTagsKey, string removeTagsKey, string key);
> }
> 
> // @interface  (UAProximityRegion)
> [Category]
> [BaseType (typeof(UAProximityRegion))]
> interface UAProximityRegion_
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull proximityID;
> 	[Export ("proximityID")]
> 	string ProximityID { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nonnull major;
> 	[Export ("major", ArgumentSemantic.Strong)]
> 	NSNumber Major { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nonnull minor;
> 	[Export ("minor", ArgumentSemantic.Strong)]
> 	NSNumber Minor { get; set; }
> 
> 	// -(BOOL)isValid;
> 	[Export ("isValid")]
> 	[Verify (MethodToProperty)]
> 	bool IsValid { get; }
> }
> 
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern NSString *const _Nonnull UAUserPushNotificationsEnabledKey;
> 	[Field ("UAUserPushNotificationsEnabledKey", "__Internal")]
> 	NSString UAUserPushNotificationsEnabledKey { get; }
> 
> 	// extern NSString *const _Nonnull UABackgroundPushNotificationsEnabledKey;
> 	[Field ("UABackgroundPushNotificationsEnabledKey", "__Internal")]
> 	NSString UABackgroundPushNotificationsEnabledKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushTokenRegistrationEnabledKey;
> 	[Field ("UAPushTokenRegistrationEnabledKey", "__Internal")]
> 	NSString UAPushTokenRegistrationEnabledKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushAliasSettingsKey;
> 	[Field ("UAPushAliasSettingsKey", "__Internal")]
> 	NSString UAPushAliasSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushTagsSettingsKey;
> 	[Field ("UAPushTagsSettingsKey", "__Internal")]
> 	NSString UAPushTagsSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushBadgeSettingsKey;
> 	[Field ("UAPushBadgeSettingsKey", "__Internal")]
> 	NSString UAPushBadgeSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushQuietTimeSettingsKey;
> 	[Field ("UAPushQuietTimeSettingsKey", "__Internal")]
> 	NSString UAPushQuietTimeSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushQuietTimeEnabledSettingsKey;
> 	[Field ("UAPushQuietTimeEnabledSettingsKey", "__Internal")]
> 	NSString UAPushQuietTimeEnabledSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushTimeZoneSettingsKey;
> 	[Field ("UAPushTimeZoneSettingsKey", "__Internal")]
> 	NSString UAPushTimeZoneSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushQuietTimeStartKey;
> 	[Field ("UAPushQuietTimeStartKey", "__Internal")]
> 	NSString UAPushQuietTimeStartKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushQuietTimeEndKey;
> 	[Field ("UAPushQuietTimeEndKey", "__Internal")]
> 	NSString UAPushQuietTimeEndKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushChannelCreationOnForeground;
> 	[Field ("UAPushChannelCreationOnForeground", "__Internal")]
> 	NSString UAPushChannelCreationOnForeground { get; }
> 
> 	// extern NSString *const _Nonnull UAPushEnabledSettingsMigratedKey;
> 	[Field ("UAPushEnabledSettingsMigratedKey", "__Internal")]
> 	NSString UAPushEnabledSettingsMigratedKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushChannelIDKey;
> 	[Field ("UAPushChannelIDKey", "__Internal")]
> 	NSString UAPushChannelIDKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushChannelLocationKey;
> 	[Field ("UAPushChannelLocationKey", "__Internal")]
> 	NSString UAPushChannelLocationKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushAddTagGroupsSettingsKey;
> 	[Field ("UAPushAddTagGroupsSettingsKey", "__Internal")]
> 	NSString UAPushAddTagGroupsSettingsKey { get; }
> 
> 	// extern NSString *const _Nonnull UAPushRemoveTagGroupsSettingsKey;
> 	[Field ("UAPushRemoveTagGroupsSettingsKey", "__Internal")]
> 	NSString UAPushRemoveTagGroupsSettingsKey { get; }
> }
> 
> // @interface  (UAPush) <UAChannelRegistrarDelegate>
> [Category]
> [BaseType (typeof(UAPush))]
> interface UAPush_ : IUAChannelRegistrarDelegate
> {
> 	// @property (copy, nonatomic) NSString * _Nullable deviceToken;
> 	[NullAllowed, Export ("deviceToken")]
> 	string DeviceToken { get; set; }
> 
> 	// @property (getter = isChannelCreationEnabled, assign, nonatomic) BOOL channelCreationEnabled;
> 	[Export ("channelCreationEnabled")]
> 	bool ChannelCreationEnabled { [Bind ("isChannelCreationEnabled")] get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable channelID;
> 	[NullAllowed, Export ("channelID")]
> 	string ChannelID { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable channelLocation;
> 	[NullAllowed, Export ("channelLocation")]
> 	string ChannelLocation { get; set; }
> 
> 	// @property (nonatomic, strong) UAChannelRegistrar * _Nonnull channelRegistrar;
> 	[Export ("channelRegistrar", ArgumentSemantic.Strong)]
> 	UAChannelRegistrar ChannelRegistrar { get; set; }
> 
> 	// @property (nonatomic, strong) UANotificationResponse * _Nullable launchNotificationResponse;
> 	[NullAllowed, Export ("launchNotificationResponse", ArgumentSemantic.Strong)]
> 	UANotificationResponse LaunchNotificationResponse { get; set; }
> 
> 	// @property (assign, nonatomic) UIBackgroundTaskIdentifier registrationBackgroundTask;
> 	[Export ("registrationBackgroundTask")]
> 	nuint RegistrationBackgroundTask { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL shouldUpdateAPNSRegistration;
> 	[Export ("shouldUpdateAPNSRegistration")]
> 	bool ShouldUpdateAPNSRegistration { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * _Nonnull dataStore;
> 	[Export ("dataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore DataStore { get; set; }
> 
> 	// @property (nonatomic, strong) UATagGroupsAPIClient * _Nonnull tagGroupsAPIClient;
> 	[Export ("tagGroupsAPIClient", ArgumentSemantic.Strong)]
> 	UATagGroupsAPIClient TagGroupsAPIClient { get; set; }
> 
> 	// @property (assign, nonatomic) UANotificationOptions authorizedNotificationOptions;
> 	[Export ("authorizedNotificationOptions", ArgumentSemantic.Assign)]
> 	UANotificationOptions AuthorizedNotificationOptions { get; set; }
> 
> 	// @property (nonatomic, strong) id<UAAPNSRegistrationProtocol> _Nonnull pushRegistration;
> 	[Export ("pushRegistration", ArgumentSemantic.Strong)]
> 	UAAPNSRegistrationProtocol PushRegistration { get; set; }
> 
> 	// +(instancetype _Nonnull)pushWithConfig:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("pushWithConfig:dataStore:")]
> 	UAPush PushWithConfig (UAConfig config, UAPreferenceDataStore dataStore);
> 
> 	// -(NSTimeZone * _Nonnull)defaultTimeZoneForQuietTime;
> 	[Export ("defaultTimeZoneForQuietTime")]
> 	[Verify (MethodToProperty)]
> 	NSTimeZone DefaultTimeZoneForQuietTime { get; }
> 
> 	// -(void)applicationDidBecomeActive;
> 	[Export ("applicationDidBecomeActive")]
> 	void ApplicationDidBecomeActive ();
> 
> 	// -(void)applicationDidEnterBackground;
> 	[Export ("applicationDidEnterBackground")]
> 	void ApplicationDidEnterBackground ();
> 
> 	// -(void)applicationBackgroundRefreshStatusChanged;
> 	[Export ("applicationBackgroundRefreshStatusChanged")]
> 	void ApplicationBackgroundRefreshStatusChanged ();
> 
> 	// -(void)registrationFailedWithPayload:(UAChannelRegistrationPayload * _Nonnull)payload;
> 	[Export ("registrationFailedWithPayload:")]
> 	void RegistrationFailedWithPayload (UAChannelRegistrationPayload payload);
> 
> 	// -(void)registrationSucceededWithPayload:(UAChannelRegistrationPayload * _Nonnull)payload;
> 	[Export ("registrationSucceededWithPayload:")]
> 	void RegistrationSucceededWithPayload (UAChannelRegistrationPayload payload);
> 
> 	// -(void)channelCreated:(NSString * _Nonnull)channelID channelLocation:(NSString * _Nonnull)channelLocation existing:(BOOL)existing;
> 	[Export ("channelCreated:channelLocation:existing:")]
> 	void ChannelCreated (string channelID, string channelLocation, bool existing);
> 
> 	// -(UAChannelRegistrationPayload * _Nonnull)createChannelPayload;
> 	[Export ("createChannelPayload")]
> 	[Verify (MethodToProperty)]
> 	UAChannelRegistrationPayload CreateChannelPayload { get; }
> 
> 	// -(void)updateChannelRegistrationForcefully:(BOOL)forcefully;
> 	[Export ("updateChannelRegistrationForcefully:")]
> 	void UpdateChannelRegistrationForcefully (bool forcefully);
> 
> 	// -(BOOL)backgroundPushNotificationsAllowed;
> 	[Export ("backgroundPushNotificationsAllowed")]
> 	[Verify (MethodToProperty)]
> 	bool BackgroundPushNotificationsAllowed { get; }
> 
> 	// -(BOOL)userPushNotificationsAllowed;
> 	[Export ("userPushNotificationsAllowed")]
> 	[Verify (MethodToProperty)]
> 	bool UserPushNotificationsAllowed { get; }
> 
> 	// -(void)migratePushSettings;
> 	[Export ("migratePushSettings")]
> 	void MigratePushSettings ();
> 
> 	// -(void)updateAPNSRegistration;
> 	[Export ("updateAPNSRegistration")]
> 	void UpdateAPNSRegistration ();
> 
> 	// -(void)updateAuthorizedNotificationTypes;
> 	[Export ("updateAuthorizedNotificationTypes")]
> 	void UpdateAuthorizedNotificationTypes ();
> 
> 	// -(UNNotificationPresentationOptions)presentationOptionsForNotification:(UNNotification * _Nonnull)notification;
> 	[Export ("presentationOptionsForNotification:")]
> 	UNNotificationPresentationOptions PresentationOptionsForNotification (UNNotification notification);
> 
> 	// -(void)handleNotificationResponse:(UANotificationResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)())handler;
> 	[Export ("handleNotificationResponse:completionHandler:")]
> 	void HandleNotificationResponse (UANotificationResponse response, Action handler);
> 
> 	// -(void)handleRemoteNotification:(UANotificationContent * _Nonnull)notification foreground:(BOOL)foreground completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))handler;
> 	[Export ("handleRemoteNotification:foreground:completionHandler:")]
> 	void HandleRemoteNotification (UANotificationContent notification, bool foreground, Action<UIBackgroundFetchResult> handler);
> }
> 
> // @interface UAPushReceivedEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAPushReceivedEvent
> {
> 	// +(instancetype _Nonnull)eventWithNotification:(NSDictionary * _Nonnull)notification;
> 	[Static]
> 	[Export ("eventWithNotification:")]
> 	UAPushReceivedEvent EventWithNotification (NSDictionary notification);
> }
> 
> // @interface  (UARegionEvent)
> [Category]
> [BaseType (typeof(UARegionEvent))]
> interface UARegionEvent_
> {
> 	// @property (copy, nonatomic) NSString * _Nonnull source;
> 	[Export ("source")]
> 	string Source { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull regionID;
> 	[Export ("regionID")]
> 	string RegionID { get; set; }
> 
> 	// @property (assign, nonatomic) UABoundaryEvent boundaryEvent;
> 	[Export ("boundaryEvent", ArgumentSemantic.Assign)]
> 	UABoundaryEvent BoundaryEvent { get; set; }
> 
> 	// +(BOOL)regionEventRSSIIsValid:(NSNumber * _Nullable)RSSI;
> 	[Static]
> 	[Export ("regionEventRSSIIsValid:")]
> 	bool RegionEventRSSIIsValid ([NullAllowed] NSNumber RSSI);
> 
> 	// +(BOOL)regionEventRadiusIsValid:(NSNumber * _Nullable)radius;
> 	[Static]
> 	[Export ("regionEventRadiusIsValid:")]
> 	bool RegionEventRadiusIsValid ([NullAllowed] NSNumber radius);
> 
> 	// +(BOOL)regionEventLatitudeIsValid:(NSNumber * _Nullable)latitude;
> 	[Static]
> 	[Export ("regionEventLatitudeIsValid:")]
> 	bool RegionEventLatitudeIsValid ([NullAllowed] NSNumber latitude);
> 
> 	// +(BOOL)regionEventLongitudeIsValid:(NSNumber * _Nullable)longitude;
> 	[Static]
> 	[Export ("regionEventLongitudeIsValid:")]
> 	bool RegionEventLongitudeIsValid ([NullAllowed] NSNumber longitude);
> 
> 	// +(BOOL)regionEventCharacterCountIsValid:(NSString * _Nullable)string;
> 	[Static]
> 	[Export ("regionEventCharacterCountIsValid:")]
> 	bool RegionEventCharacterCountIsValid ([NullAllowed] string @string);
> 
> 	// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
> 	[Export ("payload")]
> 	NSDictionary Payload { get; }
> }
> 
> // @interface  (UAScheduleTrigger)
> [Category]
> [BaseType (typeof(UAScheduleTrigger))]
> interface UAScheduleTrigger_
> {
> 	// @property (assign, nonatomic) UAScheduleTriggerType type;
> 	[Export ("type", ArgumentSemantic.Assign)]
> 	UAScheduleTriggerType Type { get; set; }
> 
> 	// @property (nonatomic, strong) NSNumber * _Nonnull goal;
> 	[Export ("goal", ArgumentSemantic.Strong)]
> 	NSNumber Goal { get; set; }
> 
> 	// @property (nonatomic, strong) UAJSONPredicate * _Nullable predicate;
> 	[NullAllowed, Export ("predicate", ArgumentSemantic.Strong)]
> 	UAJSONPredicate Predicate { get; set; }
> 
> 	// +(instancetype _Nonnull)triggerWithType:(UAScheduleTriggerType)type goal:(NSNumber * _Nonnull)goal predicate:(UAJSONPredicate * _Nullable)predicate;
> 	[Static]
> 	[Export ("triggerWithType:goal:predicate:")]
> 	UAScheduleTrigger TriggerWithType (UAScheduleTriggerType type, NSNumber goal, [NullAllowed] UAJSONPredicate predicate);
> }
> 
> // @interface UAScheduleTriggerData : NSManagedObject
> [BaseType (typeof(NSManagedObject))]
> interface UAScheduleTriggerData
> {
> 	// @property (retain, nonatomic) NSNumber * _Nullable goal;
> 	[NullAllowed, Export ("goal", ArgumentSemantic.Retain)]
> 	NSNumber Goal { get; set; }
> 
> 	// @property (retain, nonatomic) NSNumber * _Nullable goalProgress;
> 	[NullAllowed, Export ("goalProgress", ArgumentSemantic.Retain)]
> 	NSNumber GoalProgress { get; set; }
> 
> 	// @property (retain, nonatomic) NSData * _Nullable predicateData;
> 	[NullAllowed, Export ("predicateData", ArgumentSemantic.Retain)]
> 	NSData PredicateData { get; set; }
> 
> 	// @property (retain, nonatomic) NSNumber * _Nullable type;
> 	[NullAllowed, Export ("type", ArgumentSemantic.Retain)]
> 	NSNumber Type { get; set; }
> 
> 	// @property (retain, nonatomic) UAActionScheduleData * _Nullable schedule;
> 	[NullAllowed, Export ("schedule", ArgumentSemantic.Retain)]
> 	UAActionScheduleData Schedule { get; set; }
> 
> 	// @property (retain, nonatomic) NSDate * _Nullable start;
> 	[NullAllowed, Export ("start", ArgumentSemantic.Retain)]
> 	NSDate Start { get; set; }
> }
> 
> // @interface UAScreenTrackingEvent : UAEvent
> [BaseType (typeof(UAEvent))]
> interface UAScreenTrackingEvent
> {
> 	// @property (assign, nonatomic) NSTimeInterval startTime;
> 	[Export ("startTime")]
> 	double StartTime { get; set; }
> 
> 	// @property (assign, nonatomic) NSTimeInterval stopTime;
> 	[Export ("stopTime")]
> 	double StopTime { get; set; }
> 
> 	// @property (assign, nonatomic) NSTimeInterval duration;
> 	[Export ("duration")]
> 	double Duration { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nonnull screen;
> 	[Export ("screen")]
> 	string Screen { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable previousScreen;
> 	[NullAllowed, Export ("previousScreen")]
> 	string PreviousScreen { get; set; }
> 
> 	// +(instancetype _Nullable)eventWithScreen:(NSString * _Nonnull)screen startTime:(NSTimeInterval)startTime;
> 	[Static]
> 	[Export ("eventWithScreen:startTime:")]
> 	[return: NullAllowed]
> 	UAScreenTrackingEvent EventWithScreen (string screen, double startTime);
> }
> 
> // @interface UASQLite : NSObject
> [BaseType (typeof(NSObject))]
> interface UASQLite
> {
> 	// @property (assign, atomic) NSInteger busyRetryTimeout;
> 	[Export ("busyRetryTimeout")]
> 	nint BusyRetryTimeout { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable dbPath;
> 	[NullAllowed, Export ("dbPath")]
> 	string DbPath { get; set; }
> 
> 	// -(instancetype _Nonnull)initWithDBPath:(NSString * _Nonnull)aDBPath;
> 	[Export ("initWithDBPath:")]
> 	IntPtr Constructor (string aDBPath);
> 
> 	// -(BOOL)open:(NSString * _Nonnull)aDBPath;
> 	[Export ("open:")]
> 	bool Open (string aDBPath);
> 
> 	// -(void)close;
> 	[Export ("close")]
> 	void Close ();
> 
> 	// -(NSString * _Nullable)lastErrorMessage;
> 	[NullAllowed, Export ("lastErrorMessage")]
> 	[Verify (MethodToProperty)]
> 	string LastErrorMessage { get; }
> 
> 	// -(NSInteger)lastErrorCode;
> 	[Export ("lastErrorCode")]
> 	[Verify (MethodToProperty)]
> 	nint LastErrorCode { get; }
> 
> 	// -(NSArray * _Nullable)executeQuery:(NSString * _Nonnull)sql, ...;
> 	[Internal]
> 	[Export ("executeQuery:", IsVariadic = true)]
> 	[Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	NSObject[] ExecuteQuery (string sql, IntPtr varArgs);
> 
> 	// -(NSArray * _Nullable)executeQuery:(NSString * _Nonnull)sql arguments:(NSArray * _Nullable)args;
> 	[Export ("executeQuery:arguments:")]
> 	[Verify (StronglyTypedNSArray), Verify (StronglyTypedNSArray)]
> 	[return: NullAllowed]
> 	NSObject[] ExecuteQuery (string sql, [NullAllowed] NSObject[] args);
> 
> 	// -(BOOL)executeUpdate:(NSString * _Nonnull)sql, ...;
> 	[Internal]
> 	[Export ("executeUpdate:", IsVariadic = true)]
> 	bool ExecuteUpdate (string sql, IntPtr varArgs);
> 
> 	// -(BOOL)executeUpdate:(NSString * _Nonnull)sql arguments:(NSArray * _Nullable)args;
> 	[Export ("executeUpdate:arguments:")]
> 	[Verify (StronglyTypedNSArray)]
> 	bool ExecuteUpdate (string sql, [NullAllowed] NSObject[] args);
> 
> 	// -(BOOL)commit;
> 	[Export ("commit")]
> 	[Verify (MethodToProperty)]
> 	bool Commit { get; }
> 
> 	// -(BOOL)rollback;
> 	[Export ("rollback")]
> 	[Verify (MethodToProperty)]
> 	bool Rollback { get; }
> 
> 	// -(BOOL)beginTransaction;
> 	[Export ("beginTransaction")]
> 	[Verify (MethodToProperty)]
> 	bool BeginTransaction { get; }
> 
> 	// -(BOOL)beginDeferredTransaction;
> 	[Export ("beginDeferredTransaction")]
> 	[Verify (MethodToProperty)]
> 	bool BeginDeferredTransaction { get; }
> 
> 	// -(BOOL)tableExists:(NSString * _Nonnull)tableName;
> 	[Export ("tableExists:")]
> 	bool TableExists (string tableName);
> 
> 	// -(BOOL)indexExists:(NSString * _Nonnull)indexName;
> 	[Export ("indexExists:")]
> 	bool IndexExists (string indexName);
> }
> 
> // @interface UATagGroupsAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UATagGroupsAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("clientWithConfig:")]
> 	UATagGroupsAPIClient ClientWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Static]
> 	[Export ("clientWithConfig:session:")]
> 	UATagGroupsAPIClient ClientWithConfig (UAConfig config, UARequestSession session);
> 
> 	// -(void)updateChannel:(NSString * _Nonnull)channelId tagGroupsMutation:(UATagGroupsMutation * _Nonnull)mutation completionHandler:(void (^ _Nonnull)(NSUInteger))completionHandler;
> 	[Export ("updateChannel:tagGroupsMutation:completionHandler:")]
> 	void UpdateChannel (string channelId, UATagGroupsMutation mutation, Action<nuint> completionHandler);
> 
> 	// -(void)updateNamedUser:(NSString * _Nonnull)identifier tagGroupsMutation:(UATagGroupsMutation * _Nonnull)mutation completionHandler:(void (^ _Nonnull)(NSUInteger))completionHandler;
> 	[Export ("updateNamedUser:tagGroupsMutation:completionHandler:")]
> 	void UpdateNamedUser (string identifier, UATagGroupsMutation mutation, Action<nuint> completionHandler);
> }
> 
> // @interface UATagUtils : NSObject
> [BaseType (typeof(NSObject))]
> interface UATagUtils
> {
> 	// +(NSArray<NSString *> * _Nonnull)normalizeTags:(NSArray * _Nonnull)tags;
> 	[Static]
> 	[Export ("normalizeTags:")]
> 	[Verify (StronglyTypedNSArray)]
> 	string[] NormalizeTags (NSObject[] tags);
> 
> 	// +(NSString * _Nullable)normalizeTagGroupID:(NSString * _Nonnull)tagGroupID;
> 	[Static]
> 	[Export ("normalizeTagGroupID:")]
> 	[return: NullAllowed]
> 	string NormalizeTagGroupID (string tagGroupID);
> }
> 
> // @interface UAURLRequestOperation : UAAsyncOperation
> [BaseType (typeof(UAAsyncOperation))]
> interface UAURLRequestOperation
> {
> 	// +(instancetype _Nonnull)operationWithRequest:(NSURLRequest * _Nonnull)request session:(NSURLSession * _Nonnull)session completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
> 	[Static]
> 	[Export ("operationWithRequest:session:completionHandler:")]
> 	UAURLRequestOperation OperationWithRequest (NSUrlRequest request, NSUrlSession session, Action<NSData, NSURLResponse, NSError> completionHandler);
> }
> 
> // @interface  (UAUser)
> [Category]
> [BaseType (typeof(UAUser))]
> interface UAUser_
> {
> 	// +(instancetype _Nonnull)userWithPush:(UAPush * _Nonnull)push config:(UAConfig * _Nonnull)config dataStore:(UAPreferenceDataStore * _Nonnull)dataStore;
> 	[Static]
> 	[Export ("userWithPush:config:dataStore:")]
> 	UAUser UserWithPush (UAPush push, UAConfig config, UAPreferenceDataStore dataStore);
> 
> 	// -(void)updateUser;
> 	[Export ("updateUser")]
> 	void UpdateUser ();
> 
> 	// -(void)createUser;
> 	[Export ("createUser")]
> 	void CreateUser ();
> 
> 	// @property (nonatomic, strong) UAUserAPIClient * _Nonnull apiClient;
> 	[Export ("apiClient", ArgumentSemantic.Strong)]
> 	UAUserAPIClient ApiClient { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable username;
> 	[NullAllowed, Export ("username")]
> 	string Username { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable password;
> 	[NullAllowed, Export ("password")]
> 	string Password { get; set; }
> 
> 	// @property (copy, nonatomic) NSString * _Nullable url;
> 	[NullAllowed, Export ("url")]
> 	string Url { get; set; }
> 
> 	// @property (assign, nonatomic) BOOL creatingUser;
> 	[Export ("creatingUser")]
> 	bool CreatingUser { get; set; }
> 
> 	// @property (nonatomic, strong) UAPreferenceDataStore * _Nonnull dataStore;
> 	[Export ("dataStore", ArgumentSemantic.Strong)]
> 	UAPreferenceDataStore DataStore { get; set; }
> 
> 	// @property (nonatomic, strong) UAConfig * _Nonnull config;
> 	[Export ("config", ArgumentSemantic.Strong)]
> 	UAConfig Config { get; set; }
> }
> 
> // typedef void (^UAUserAPIClientCreateSuccessBlock)(UAUserData * _Nonnull, NSDictionary * _Nonnull);
> delegate void UAUserAPIClientCreateSuccessBlock (UAUserData arg0, NSDictionary arg1);
> 
> // typedef void (^UAUserAPIClientUpdateSuccessBlock)();
> delegate void UAUserAPIClientUpdateSuccessBlock ();
> 
> // typedef void (^UAUserAPIClientFailureBlock)(NSUInteger);
> delegate void UAUserAPIClientFailureBlock (nuint arg0);
> 
> // @interface UAUserAPIClient : UAAPIClient
> [BaseType (typeof(UAAPIClient))]
> interface UAUserAPIClient
> {
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config;
> 	[Static]
> 	[Export ("clientWithConfig:")]
> 	UAUserAPIClient ClientWithConfig (UAConfig config);
> 
> 	// +(instancetype _Nonnull)clientWithConfig:(UAConfig * _Nonnull)config session:(UARequestSession * _Nonnull)session;
> 	[Static]
> 	[Export ("clientWithConfig:session:")]
> 	UAUserAPIClient ClientWithConfig (UAConfig config, UARequestSession session);
> 
> 	// -(void)createUserWithChannelID:(NSString * _Nonnull)channelID onSuccess:(UAUserAPIClientCreateSuccessBlock _Nonnull)successBlock onFailure:(UAUserAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("createUserWithChannelID:onSuccess:onFailure:")]
> 	void CreateUserWithChannelID (string channelID, UAUserAPIClientCreateSuccessBlock successBlock, UAUserAPIClientFailureBlock failureBlock);
> 
> 	// -(void)updateUser:(UAUser * _Nonnull)user channelID:(NSString * _Nonnull)channelID onSuccess:(UAUserAPIClientUpdateSuccessBlock _Nonnull)successBlock onFailure:(UAUserAPIClientFailureBlock _Nonnull)failureBlock;
> 	[Export ("updateUser:channelID:onSuccess:onFailure:")]
> 	void UpdateUser (UAUser user, string channelID, UAUserAPIClientUpdateSuccessBlock successBlock, UAUserAPIClientFailureBlock failureBlock);
> }
> 
> // @interface UAUserData : NSObject
> [BaseType (typeof(NSObject))]
> interface UAUserData
> {
> 	// +(instancetype _Nonnull)dataWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password url:(NSString * _Nonnull)url;
> 	[Static]
> 	[Export ("dataWithUsername:password:url:")]
> 	UAUserData DataWithUsername (string username, string password, string url);
> 
> 	// -(instancetype _Nonnull)initWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password url:(NSString * _Nonnull)url;
> 	[Export ("initWithUsername:password:url:")]
> 	IntPtr Constructor (string username, string password, string url);
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull username;
> 	[Export ("username")]
> 	string Username { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull password;
> 	[Export ("password")]
> 	string Password { get; }
> 
> 	// @property (readonly, copy, nonatomic) NSString * _Nonnull url;
> 	[Export ("url")]
> 	string Url { get; }
> }
17,2841c6066,6076
< 	// @protocol UAJavaScriptDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UAJavaScriptDelegate
< 	{
< 		// @required -(void)callWithData:(UAWebViewCallData * _Nonnull)data withCompletionHandler:(UAJavaScriptDelegateCompletionHandler _Nonnull)completionHandler;
< 		[Abstract]
< 		[Export ("callWithData:withCompletionHandler:")]
< 		void Call (UAWebViewCallData data, UAJavaScriptDelegateCompletionHandler completionHandler);
< 	}
< 
< 	// @interface UAWhitelist : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAWhitelist
< 	{
< 		// +(instancetype _Nonnull)whitelistWithConfig:(UAConfig * _Nonnull)config;
< 		[Static]
< 		[Export ("whitelistWithConfig:")]
< 		UAWhitelist Whitelist (UAConfig config);
< 
< 		// -(BOOL)addEntry:(NSString * _Nonnull)patternString;
< 		[Export ("addEntry:")]
< 		bool AddEntry (string patternString);
< 
< 		// -(BOOL)isWhitelisted:(NSURL * _Nonnull)url;
< 		[Export ("isWhitelisted:")]
< 		bool IsWhitelisted (NSUrl url);
< 	}
< 		
< 	[Static]
< 	partial interface Constants
< 	{
< 		// extern NSString *const _Nonnull UAirshipTakeOffBackgroundThreadException;
< 		[Field ("UAirshipTakeOffBackgroundThreadException", "__Internal")]
< 		NSString UAirshipTakeOffBackgroundThreadException { get; }
< 
< 		// extern NSString *const _Nonnull UAUserCreatedNotification;
< 		[Field ("UAUserCreatedNotification", "__Internal")]
< 		NSString UAUserCreatedNotification { get; }
< 
< 		// extern NSString *const _Nonnull UAInboxMessageListWillUpdateNotification;
< 		[Field ("UAInboxMessageListWillUpdateNotification", "__Internal")]
< 		NSString UAInboxMessageListWillUpdateNotification { get; }
< 
< 		// extern NSString *const _Nonnull UAInboxMessageListUpdatedNotification;
< 		[Field ("UAInboxMessageListUpdatedNotification", "__Internal")]
< 		NSString UAInboxMessageListUpdatedNotification { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataWebViewKey;
< 		[Field ("UAActionMetadataWebViewKey", "__Internal")]
< 		NSString UAActionMetadataWebViewKey { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataPushPayloadKey;
< 		[Field ("UAActionMetadataPushPayloadKey", "__Internal")]
< 		NSString UAActionMetadataPushPayloadKey { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataInboxMessageKey;
< 		[Field ("UAActionMetadataInboxMessageKey", "__Internal")]
< 		NSString UAActionMetadataInboxMessageKey { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataUserNotificationActionIDKey;
< 		[Field ("UAActionMetadataUserNotificationActionIDKey", "__Internal")]
< 		NSString UAActionMetadataUserNotificationActionIDKey { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataResponseInfoKey;
< 		[Field ("UAActionMetadataResponseInfoKey", "__Internal")]
< 		NSString UAActionMetadataResponseInfoKey { get; }
< 
< 		// extern NSString *const _Nonnull UAActionMetadataRegisteredName;
< 		[Field ("UAActionMetadataRegisteredName", "__Internal")]
< 		NSString UAActionMetadataRegisteredName { get; }
< 
< 		// extern NSString *const _Nonnull UAActionOperatorErrorDomain;
< 		[Field ("UAActionOperatorErrorDomain", "__Internal")]
< 		NSString UAActionOperatorErrorDomain { get; }
< 
< 		// extern NSString *const _Nonnull UAAddCustomEventActionErrorDomain;
< 		[Field ("UAAddCustomEventActionErrorDomain", "__Internal")]
< 		NSString UAAddCustomEventActionErrorDomain { get; }
< 
< 		// extern NSString *const _Nonnull UAOpenExternalURLActionErrorDomain;
< 		[Field ("UAOpenExternalURLActionErrorDomain", "__Internal")]
< 		NSString UAOpenExternalURLActionErrorDomain { get; }
< 
< 		// extern NSString *const _Nonnull UAOverlayInboxMessageActionErrorDomain;
< 		[Field ("UAOverlayInboxMessageActionErrorDomain", "__Internal")]
< 		NSString UAOverlayInboxMessageActionErrorDomain { get; }
< 
< 		// extern const NSUInteger UACustomEventCharacterLimit;
< 		[Field ("UACustomEventCharacterLimit", "__Internal")]
< 		nuint UACustomEventCharacterLimit { get; }
< 
< 		// extern const NSUInteger UACustomEventMaxPropertiesCount;
< 		[Field ("UACustomEventMaxPropertiesCount", "__Internal")]
< 		nuint UACustomEventMaxPropertiesCount { get; }
< 
< 		// extern NSString *const _Nonnull UAAnalyticsValueNone;
< 		[Field ("UAAnalyticsValueNone", "__Internal")]
< 		NSString UAAnalyticsValueNone { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventForegroundKey;
< 		[Field("UALocationEventForegroundKey", "__Internal")]
< 		NSString UALocationEventForegroundKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventLatitudeKey;
< 		[Field("UALocationEventLatitudeKey", "__Internal")]
< 		NSString UALocationEventLatitudeKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventLongitudeKey;
< 		[Field("UALocationEventLongitudeKey", "__Internal")]
< 		NSString UALocationEventLongitudeKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventDesiredAccuracyKey;
< 		[Field("UALocationEventDesiredAccuracyKey", "__Internal")]
< 		NSString UALocationEventDesiredAccuracyKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventUpdateTypeKey;
< 		[Field("UALocationEventUpdateTypeKey", "__Internal")]
< 		NSString UALocationEventUpdateTypeKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventProviderKey;
< 		[Field("UALocationEventProviderKey", "__Internal")]
< 		NSString UALocationEventProviderKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventDistanceFilterKey;
< 		[Field("UALocationEventDistanceFilterKey", "__Internal")]
< 		NSString UALocationEventDistanceFilterKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventHorizontalAccuracyKey;
< 		[Field("UALocationEventHorizontalAccuracyKey", "__Internal")]
< 		NSString UALocationEventHorizontalAccuracyKey { get; }
< 
< 		// extern UALocationEventAnalyticsKey *const _Nonnull UALocationEventVerticalAccuracyKey;
< 		[Field("UALocationEventVerticalAccuracyKey", "__Internal")]
< 		NSString UALocationEventVerticalAccuracyKey { get; }
< 
< 
< 		// extern UALocationEventUpdateType *const _Nonnull UALocationEventAnalyticsType;
< 		[Field("UALocationEventAnalyticsType", "__Internal")]
< 		NSString UALocationEventAnalyticsType { get; }
< 
< 		// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeChange;
< 		[Field("UALocationEventUpdateTypeChange", "__Internal")]
< 		NSString UALocationEventUpdateTypeChange { get; }
< 
< 		// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeContinuous;
< 		[Field("UALocationEventUpdateTypeContinuous", "__Internal")]
< 		NSString UALocationEventUpdateTypeContinuous { get; }
< 
< 		// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeSingle;
< 		[Field("UALocationEventUpdateTypeSingle", "__Internal")]
< 		NSString UALocationEventUpdateTypeSingle { get; }
< 
< 		// extern UALocationEventUpdateType *const _Nonnull UALocationEventUpdateTypeNone;
< 		[Field("UALocationEventUpdateTypeNone", "__Internal")]
< 		NSString UALocationEventUpdateTypeNone { get; }
< 
< 		// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderGps;
< 		[Field("UALocationServiceProviderGps", "__Internal")]
< 		NSString UALocationServiceProviderGps { get; }
< 
< 		// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderNetwork;
< 		[Field("UALocationServiceProviderNetwork", "__Internal")]
< 		NSString UALocationServiceProviderNetwork { get; }
< 
< 		// extern UALocationServiceProviderType *const _Nonnull UALocationServiceProviderUnknown;
< 		[Field("UALocationServiceProviderUnknown", "__Internal")]
< 		NSString UALocationServiceProviderUnknown { get; }
< 
< 		// extern const NSUInteger UAAssociatedIdentifiersMaxCharacterCount;
< 		[Field ("UAAssociatedIdentifiersMaxCharacterCount", "__Internal")]
< 		nuint UAAssociatedIdentifiersMaxCharacterCount { get; }
< 
< 		// extern const NSUInteger UAAssociatedIdentifiersMaxCount;
< 		[Field ("UAAssociatedIdentifiersMaxCount", "__Internal")]
< 		nuint UAAssociatedIdentifiersMaxCount { get; }
< 
< 		// extern NSString *const UACancelSchedulesActionAll;
< 		[Field("UACancelSchedulesActionAll", "__Internal")]
< 		NSString UACancelSchedulesActionAll { get; }
< 
< 		// extern NSString *const UACancelSchedulesActionIDs;
< 		[Field("UACancelSchedulesActionIDs", "__Internal")]
< 		NSString UACancelSchedulesActionIDs { get; }
< 
< 		// extern NSString *const UACancelSchedulesActionGroups;
< 		[Field("UACancelSchedulesActionGroups", "__Internal")]
< 		NSString UACancelSchedulesActionGroups { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerTypeKey;
< 		[Field("UAScheduleTriggerTypeKey", "__Internal")]
< 		NSString UAScheduleTriggerTypeKey { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerPredicateKey;
< 		[Field("UAScheduleTriggerPredicateKey", "__Internal")]
< 		NSString UAScheduleTriggerPredicateKey { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerGoalKey;
< 		[Field("UAScheduleTriggerGoalKey", "__Internal")]
< 		NSString UAScheduleTriggerGoalKey { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerAppForegroundName;
< 		[Field("UAScheduleTriggerAppForegroundName", "__Internal")]
< 		NSString UAScheduleTriggerAppForegroundName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerAppBackgroundName;
< 		[Field("UAScheduleTriggerAppBackgroundName", "__Internal")]
< 		NSString UAScheduleTriggerAppBackgroundName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerRegionEnterName;
< 		[Field("UAScheduleTriggerRegionEnterName", "__Internal")]
< 		NSString UAScheduleTriggerRegionEnterName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerRegionExitName;
< 		[Field("UAScheduleTriggerRegionExitName", "__Internal")]
< 		NSString UAScheduleTriggerRegionExitName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerCustomEventCountName;
< 		[Field("UAScheduleTriggerCustomEventCountName", "__Internal")]
< 		NSString UAScheduleTriggerCustomEventCountName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerCustomEventValueName;
< 		[Field("UAScheduleTriggerCustomEventValueName", "__Internal")]
< 		NSString UAScheduleTriggerCustomEventValueName { get; }
< 
< 		// extern NSString *const _Nonnull UAScheduleTriggerScreenName;
< 		[Field("UAScheduleTriggerScreenName", "__Internal")]
< 		NSString UAScheduleTriggerScreenName { get; }
< 
< 		// extern NSString *const _Nonnull UANotificationDefaultActionIdentifier;
< 		[Field("UANotificationDefaultActionIdentifier", "__Internal")]
< 		NSString UANotificationDefaultActionIdentifier { get; }
< 
< 		// extern NSString *const _Nonnull UANotificationDismissActionIdentifier;
< 		[Field("UANotificationDismissActionIdentifier", "__Internal")]
< 		NSString UANotificationDismissActionIdentifier { get; }
< 
< 		// extern NSString *const _Nonnull UAChannelCreatedEvent;
< 		[Field("UAChannelCreatedEvent", "__Internal")]
< 		NSString UAChannelCreatedEvent { get; }
< 
< 		// extern NSString *const _Nonnull UAChannelCreatedEventChannelKey;
< 		[Field("UAChannelCreatedEventChannelKey", "__Internal")]
< 		NSString UAChannelCreatedEventChannelKey { get; }
< 
< 		// extern NSString *const _Nonnull UAChannelCreatedEventExistingKey;
< 		[Field("UAChannelCreatedEventExistingKey", "__Internal")]
< 		NSString UAChannelCreatedEventExistingKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventNameKey;
< 		[Field("UACustomEventNameKey", "__Internal")]
< 		NSString UACustomEventNameKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventValueKey;
< 		[Field("UACustomEventValueKey", "__Internal")]
< 		NSString UACustomEventValueKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventPropertiesKey;
< 		[Field("UACustomEventPropertiesKey", "__Internal")]
< 		NSString UACustomEventPropertiesKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventTransactionIDKey;
< 		[Field("UACustomEventTransactionIDKey", "__Internal")]
< 		NSString UACustomEventTransactionIDKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventInteractionIDKey;
< 		[Field("UACustomEventInteractionIDKey", "__Internal")]
< 		NSString UACustomEventInteractionIDKey { get; }
< 
< 		// extern NSString *const _Nonnull UACustomEventInteractionTypeKey;
< 		[Field("UACustomEventInteractionTypeKey", "__Internal")]
< 		NSString UACustomEventInteractionTypeKey { get; }
< 	}
< 
< 	// @interface UAirship : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAirship
< 	{
< 		// @property (readonly, nonatomic, strong) UAConfig * _Nonnull config;
< 		[Export ("config", ArgumentSemantic.Strong)]
< 		UAConfig Config { get; }
< 
< 		// @property (readonly, nonatomic, strong) UAAnalytics * _Nonnull analytics;
< 		[Export ("analytics", ArgumentSemantic.Strong)]
< 		UAAnalytics Analytics { get; }
< 
< 		// @property (readonly, nonatomic, strong) UAActionRegistry * _Nonnull actionRegistry;
< 		[Export ("actionRegistry", ArgumentSemantic.Strong)]
< 		UAActionRegistry ActionRegistry { get; }
< 
< 		// @property (readonly, assign, nonatomic) BOOL remoteNotificationBackgroundModeEnabled;
< 		[Export ("remoteNotificationBackgroundModeEnabled")]
< 		bool RemoteNotificationBackgroundModeEnabled { get; }
< 
< 		[Wrap ("WeakJsDelegate")]
< 		[NullAllowed]
< 		UAJavaScriptDelegate JsDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UAJavaScriptDelegate> _Nullable jsDelegate;
< 		[NullAllowed, Export ("jsDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakJsDelegate { get; set; }
< 
< 		// @property (readonly, nonatomic, strong) UAWhitelist * _Nonnull whitelist;
< 		[Export ("whitelist", ArgumentSemantic.Strong)]
< 		UAWhitelist Whitelist { get; }
< 
< 		// +(void)setLogging:(BOOL)enabled;
< 		[Static]
< 		[Export ("setLogging:")]
< 		void SetLogging (bool enabled);
< 
< 		// +(void)setLogLevel:(UALogLevel)level;
< 		[Static]
< 		[Export ("setLogLevel:")]
< 		void SetLogLevel (UALogLevel level);
< 
< 		// +(void)setLoudImpErrorLogging:(BOOL)enabled;
< 		[Static]
< 		[Export ("setLoudImpErrorLogging:")]
< 		void SetLoudImpErrorLogging (bool enabled);
< 
< 		// +(void)takeOff:(UAConfig * _Nullable)config;
< 		[Static]
< 		[Export ("takeOff:")]
< 		void TakeOff ([NullAllowed] UAConfig config);
< 
< 		// +(void)takeOff;
< 		[Static]
< 		[Export ("takeOff")]
< 		void TakeOff ();
< 
< 		// +(UAirship * _Null_unspecified)shared;
< 		[Static]
< 		[Export ("shared")]
< 		UAirship Shared { get; }
< 
< 		// +(UAPush * _Null_unspecified)push;
< 		[Static]
< 		[Export ("push")]
< 		UAPush Push { get; }
< 
< 		// +(UAInbox * _Null_unspecified)inbox;
< 		[Static]
< 		[Export ("inbox")]
< 		UAInbox Inbox { get; }
< 
< 		// +(UAUser * _Null_unspecified)inboxUser;
< 		[Static]
< 		[Export ("inboxUser")]
< 		UAUser InboxUser { get; }
< 
< 		// +(UAInAppMessaging * _Null_unspecified)inAppMessaging;
< 		[Static]
< 		[Export ("inAppMessaging")]
< 		UAInAppMessaging InAppMessaging { get; }
< 
< 		// +(UANamedUser * _Null_unspecified)namedUser;
< 		[Static]
< 		[Export("namedUser")]
< 		UANamedUser NamedUser { get; }
< 
< 		// +(UADefaultMessageCenter * _Null_unspecified)defaultMessageCenter;
< 		[Static]
< 		[ExportAttribute ("defaultMessageCenter")]
< 		UADefaultMessageCenter DefaultMessageCenter { get;}
< 
< 		// +(NSBundle * _Null_unspecified)resources;
< 		[Static]
< 		[ExportAttribute ("resources")]
< 		NSBundle Resources { get;}
< 
< 		// +(UALocation * _Null_unspecified)location;
< 		[Static]
< 		[Export("location")]
< 		UALocation Location { get; }
< 
< 		// +(UAAutomation * _Null_unspecified)automation;
< 		[Static]
< 		[Export("automation")]
< 		UAAutomation Automation { get; }
< 	}
< 
< 	// @interface UAAppIntegration : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAAppIntegration
< 	{
< 		// +(void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)())completionHandler;
< 		[Static]
< 		[Export("userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:")]
< 		void UserNotificationCenterDidReceiveNotificationResponse(UNUserNotificationCenter center, UNNotificationResponse response, Action completionHandler);
< 
< 		// +(void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
< 		[Static]
< 		[Export("userNotificationCenter:willPresentNotification:withCompletionHandler:")]
< 		void UserNotificationCenterWillPresentNotification(UNUserNotificationCenter center, UNNotification notification, Action<UNNotificationPresentationOptions> completionHandler);
< 
< 		// +(void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
< 		[Static]
< 		[Export("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
< 		void ApplicationDidRegisterForRemoteNotifications(UIApplication application, NSData deviceToken);
< 
< 		// +(void)application:(UIApplication * _Nonnull)application didReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
< 		[Static]
< 		[Export("application:didReceiveRemoteNotification:fetchCompletionHandler:")]
< 		void ApplicationDidReceiveRemoteNotification(UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler);
< 
< 		// +(void)application:(UIApplication * _Nonnull)application didRegisterUserNotificationSettings:(UIUserNotificationSettings * _Nonnull)notificationSettings;
< 		[Static]
< 		[Export("application:didRegisterUserNotificationSettings:")]
< 		void ApplicationDidRegisterUserNotificationSettings(UIApplication application, UIUserNotificationSettings notificationSettings);
< 
< 		// +(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nonnull)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)())handler;
< 		[Static]
< 		[Export("application:handleActionWithIdentifier:forRemoteNotification:completionHandler:")]
< 		void HandleAction(UIApplication application, string identifier, NSDictionary userInfo, Action handler);
< 
< 		// +(void)application:(UIApplication * _Nonnull)application handleActionWithIdentifier:(NSString * _Nonnull)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nullable)responseInfo completionHandler:(void (^ _Nonnull)())handler;
< 		[Static]
< 		[Export("application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:")]
< 		void HandleAction(UIApplication application, string identifier, NSDictionary userInfo, [NullAllowed] NSDictionary responseInfo, Action handler);
< 	}
< 
<    // @interface UANotificationAction : NSObject
<    [BaseType (typeof(NSObject))]
<    interface UANotificationAction
<    {
<       // @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
<       [Export ("identifier")]
<       string Identifier { get; }
< 
<       // @property (readonly, copy, nonatomic) NSString * _Nonnull title;
<       [Export ("title")]
<       string Title { get; }
< 
<       // @property (readonly, assign, nonatomic) UANotificationActionOptions options;
<       [Export ("options", ArgumentSemantic.Assign)]
<       UANotificationActionOptions Options { get; }
< 
<       // -(instancetype _Nonnull)initWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title options:(UANotificationActionOptions)options;
<       [Export ("initWithIdentifier:title:options:")]
<       IntPtr Constructor (string identifier, string title, UANotificationActionOptions options);
< 
<       // +(instancetype _Nonnull)actionWithIdentifier:(NSString * _Nonnull)identifier title:(NSString * _Nonnull)title options:(UANotificationActionOptions)options;
<       [Static]
<       [Export ("actionWithIdentifier:title:options:")]
<       UANotificationAction ActionWithIdentifier (string identifier, string title, UANotificationActionOptions options);
< 
<       // -(UIUserNotificationAction * _Nullable)asUIUserNotificationAction;
<       [NullAllowed, Export ("asUIUserNotificationAction")]
<       UIUserNotificationAction AsUIUserNotificationAction { get; }
< 
<       // -(UNNotificationAction * _Nullable)asUNNotificationAction __attribute__((availability(ios, introduced=10.0)));
<       [NullAllowed, Export ("asUNNotificationAction")]
<       UNNotificationAction AsUNNotificationAction { get; }
<    }
< 
< 	// @interface UANotificationCategories : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UANotificationCategories
< 	{
< 		// +(NSSet * _Nonnull)createCategoriesFromFile:(NSString * _Nonnull)filePath;
< 		[Static]
< 		[Export("createCategoriesFromFile:")]
< 		NSSet CreateCategories(string filePath);
< 
< 		// +(UANotificationCategory * _Nullable)createCategory:(NSString * _Nonnull)categoryId actions:(NSArray * _Nonnull)actionDefinitions;
< 		[Static]
< 		[Export("createCategory:actions:")]
< 		[return: NullAllowed]
< 		UANotificationCategory CreateCategory(string categoryId, NSObject[] actionDefinitions);
< 	}
< 
<    // @interface UANotificationCategory : NSObject
<    [BaseType (typeof(NSObject))]
<    interface UANotificationCategory
<    {
<       // @property (readonly, copy, nonatomic) NSString * _Nonnull identifier;
<       [Export ("identifier")]
<       string Identifier { get; }
< 
<       // @property (readonly, copy, nonatomic) NSArray<UANotificationAction *> * _Nonnull actions;
<       [Export ("actions", ArgumentSemantic.Copy)]
<       UANotificationAction[] Actions { get; }
< 
<       // @property (readonly, copy, nonatomic) NSArray<NSString *> * _Nonnull intentIdentifiers;
<       [Export ("intentIdentifiers", ArgumentSemantic.Copy)]
<       string[] IntentIdentifiers { get; }
< 
<       // @property (readonly, assign, nonatomic) UANotificationCategoryOptions options;
<       [Export ("options", ArgumentSemantic.Assign)]
<       UANotificationCategoryOptions Options { get; }
< 
<       // +(instancetype _Nonnull)categoryWithIdentifier:(NSString * _Nonnull)identifier actions:(NSArray<UANotificationAction *> * _Nonnull)actions intentIdentifiers:(NSArray<NSString *> * _Nonnull)intentIdentifiers options:(UANotificationCategoryOptions)options;
<       [Static]
<       [Export ("categoryWithIdentifier:actions:intentIdentifiers:options:")]
<       UANotificationCategory CategoryWithIdentifier (string identifier, UANotificationAction[] actions, string[] intentIdentifiers, UANotificationCategoryOptions options);
<    }
< 
< 	// @interface UANotificationContent : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UANotificationContent
< 	{
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable alertTitle;
< 		[NullAllowed, Export("alertTitle")]
< 		string AlertTitle { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable alertBody;
< 		[NullAllowed, Export("alertBody")]
< 		string AlertBody { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable sound;
< 		[NullAllowed, Export("sound")]
< 		string Sound { get; }
< 
< 		// @property (readonly, assign, nonatomic) NSNumber * _Nullable badge;
< 		[NullAllowed, Export("badge", ArgumentSemantic.Assign)]
< 		NSNumber Badge { get; }
< 
< 		// @property (readonly, nonatomic, strong) NSNumber * _Nullable contentAvailable;
< 		[NullAllowed, Export("contentAvailable", ArgumentSemantic.Strong)]
< 		NSNumber ContentAvailable { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable categoryIdentifier;
< 		[NullAllowed, Export("categoryIdentifier")]
< 		string CategoryIdentifier { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable launchImage;
< 		[NullAllowed, Export("launchImage")]
< 		string LaunchImage { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSDictionary * _Nullable localizationKeys;
< 		[NullAllowed, Export("localizationKeys", ArgumentSemantic.Copy)]
< 		NSDictionary LocalizationKeys { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSDictionary * _Nonnull notificationInfo;
< 		[Export("notificationInfo", ArgumentSemantic.Copy)]
< 		NSDictionary NotificationInfo { get; }
< 
< 		// @property (readonly, nonatomic, strong) UNNotification * _Nullable notification;
< 		[NullAllowed, Export("notification", ArgumentSemantic.Strong)]
< 		UNNotification UNNotification { get; }
< 
< 		// +(instancetype _Nonnull)notificationWithNotificationInfo:(NSDictionary * _Nonnull)notificationInfo;
< 		[Static]
< 		[Export("notificationWithNotificationInfo:")]
< 		UANotificationContent Notification(NSDictionary notificationInfo);
< 
< 		// +(instancetype _Nonnull)notificationWithUNNotification:(UNNotification * _Nonnull)notification;
< 		[Static]
< 		[Export("notificationWithUNNotification:")]
< 		UANotificationContent Notification(UNNotification notification);
< 	}
< 
< 	// @interface UANotificationResponse : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UANotificationResponse
< 	{
< 		// @property (readonly, copy, nonatomic) NSString * _Nonnull actionIdentifier;
< 		[Export("actionIdentifier")]
< 		string ActionIdentifier { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nonnull responseText;
< 		[Export("responseText")]
< 		string ResponseText { get; }
< 
< 		// @property (readonly, nonatomic, strong) UANotificationContent * _Nonnull notificationContent;
< 		[Export("notificationContent", ArgumentSemantic.Strong)]
< 		UANotificationContent NotificationContent { get; }
< 
< 		// @property (readonly, nonatomic, strong) UNNotificationResponse * _Nullable response;
< 		[NullAllowed, Export("response", ArgumentSemantic.Strong)]
< 		UNNotificationResponse Response { get; }
< 
< 		// +(instancetype _Nonnull)notificationResponseWithNotificationInfo:(NSDictionary * _Nonnull)notificationInfo actionIdentifier:(NSString * _Nonnull)actionIdentifier responseText:(NSString * _Nullable)responseText;
< 		[Static]
< 		[Export("notificationResponseWithNotificationInfo:actionIdentifier:responseText:")]
< 		UANotificationResponse NotificationResponse(NSDictionary notificationInfo, string actionIdentifier, [NullAllowed] string responseText);
< 
< 		// +(instancetype _Nonnull)notificationResponseWithUNNotificationResponse:(UNNotificationResponse * _Nonnull)response;
< 		[Static]
< 		[Export("notificationResponseWithUNNotificationResponse:")]
< 		UANotificationResponse NotificationResponse(UNNotificationResponse response);
< 	}
< 
< 	// @interface UAInboxUtils : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAInboxUtils
< 	{
< 		// +(nullable NSString *)inboxMessageIDFromNotification:(NSDictionary *)notification
< 		[Static]
< 		[Export("inboxMessageIDFromNotification:")]
< 		NSString InboxMessageIDFromNotification(NSDictionary notification);
< 	}
< 
< 	// @protocol UALocationDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType(typeof(NSObject))]
< 	interface UALocationDelegate
< 	{
< 		// @optional -(void)locationUpdatesStarted;
< 		[Export("locationUpdatesStarted")]
< 		void LocationUpdatesStarted();
< 
< 		// @optional -(void)locationUpdatesStopped;
< 		[Export("locationUpdatesStopped")]
< 		void LocationUpdatesStopped();
< 
< 		// @optional -(void)receivedLocationUpdates:(NSArray * _Nonnull)locations;
< 		[Export("receivedLocationUpdates:")]
< 		void ReceivedLocationUpdates(NSObject[] locations);
< 	}
< 
< 	// @interface UALocation : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UALocation
< 	{
< 		// @property (getter = isAutoRequestAuthorizationEnabled, assign, nonatomic) BOOL autoRequestAuthorizationEnabled;
< 		[Export("autoRequestAuthorizationEnabled")]
< 		bool AutoRequestAuthorizationEnabled { [Bind("isAutoRequestAuthorizationEnabled")] get; set; }
< 
< 		// @property (getter = isLocationUpdatesEnabled, assign, nonatomic) BOOL locationUpdatesEnabled;
< 		[Export("locationUpdatesEnabled")]
< 		bool LocationUpdatesEnabled { [Bind("isLocationUpdatesEnabled")] get; set; }
< 
< 		// @property (getter = isBackgroundLocationUpdatesAllowed, assign, nonatomic) BOOL backgroundLocationUpdatesAllowed;
< 		[Export("backgroundLocationUpdatesAllowed")]
< 		bool BackgroundLocationUpdatesAllowed { [Bind("isBackgroundLocationUpdatesAllowed")] get; set; }
< 
< 		[Wrap("WeakDelegate")]
< 		[NullAllowed]
< 		UALocationDelegate Delegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UALocationDelegate> _Nullable delegate;
< 		[NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
< 		NSObject WeakDelegate { get; set; }
< 
< 		// @property (readonly, nonatomic) CLLocation * _Nullable lastLocation;
< 		[NullAllowed, Export("lastLocation")]
< 		CLLocation LastLocation { get; }
< 	}
< 
< 
< 	// @interface UAUser : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAUser
< 	{
< 		// @property (readonly, getter = isCreated, nonatomic) BOOL created;
< 		[Export ("created")]
< 		bool Created { [Bind ("isCreated")] get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable username;
< 		[NullAllowed, Export ("username")]
< 		string Username { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable password;
< 		[NullAllowed, Export ("password")]
< 		string Password { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable url;
< 		[NullAllowed, Export ("url")]
< 		string Url { get; }
< 	}
< 
< 	// @protocol UAInboxDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UAInboxDelegate
< 	{
< 		// @optional -(void)richPushMessageAvailable:(UAInboxMessage * _Nonnull)richPushMessage;
< 		[Export ("richPushMessageAvailable:")]
< 		void RichPushMessageAvailable (UAInboxMessage richPushMessage);
< 
< 		// @optional -(void)showInboxMessage:(UAInboxMessage * _Nonnull)message;
< 		[Export ("showInboxMessage:")]
< 		void ShowInboxMessage (UAInboxMessage message);
< 
< 		// @required -(void)showInbox;
< 		[Abstract]
< 		[Export ("showInbox")]
< 		void ShowInbox ();
< 	}
< 
< 	// @interface UAInbox : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInbox
< 	{
< 		// @property (nonatomic, strong) UAInboxMessageList * _Nonnull messageList;
< 		[Export ("messageList", ArgumentSemantic.Strong)]
< 		UAInboxMessageList MessageList { get; set; }
< 
< 		[Wrap ("WeakDelegate")]
< 		[NullAllowed]
< 		UAInboxDelegate Delegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UAInboxDelegate> _Nullable delegate;
< 		[NullAllowed, Export ("delegate", ArgumentSemantic.Assign)]
< 		NSObject WeakDelegate { get; set; }
< 	}
< 
< 	// typedef void (^UADisposalBlock)();
< 	delegate void UADisposalBlock ();
< 
< 	// @interface UADisposable : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UADisposable
< 	{
< 		// +(instancetype _Nonnull)disposableWithBlock:(UADisposalBlock _Nonnull)disposalBlock;
< 		[Static]
< 		[Export ("disposableWithBlock:")]
< 		UADisposable Disposable (UADisposalBlock disposalBlock);
< 
< 		// -(void)dispose;
< 		[Export ("dispose")]
< 		void Dispose ();
< 	}
< 
< 	// typedef void (^UAInboxMessageCallbackBlock)(UAInboxMessage * _Nonnull);
< 	delegate void UAInboxMessageCallbackBlock (UAInboxMessage arg0);
< 
< 	// @interface UAInboxMessage : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInboxMessage
< 	{
< 		// @property (readonly, nonatomic) NSString * _Nonnull messageID;
< 		[Export ("messageID")]
< 		string MessageID { get; }
< 
< 		// @property (readonly, nonatomic) NSURL * _Nonnull messageBodyURL;
< 		[Export ("messageBodyURL")]
< 		NSUrl MessageBodyURL { get; }
< 
< 		// @property (readonly, nonatomic) NSURL * _Nonnull messageURL;
< 		[Export ("messageURL")]
< 		NSUrl MessageURL { get; }
< 
< 		// @property (readonly, nonatomic) NSString * _Nonnull contentType;
< 		[Export ("contentType")]
< 		string ContentType { get; }
< 
< 		// @property (readonly, nonatomic) BOOL unread;
< 		[Export ("unread")]
< 		bool Unread { get; }
< 
< 		// @property (readonly, nonatomic) BOOL deleted;
< 		[Export ("deleted")]
< 		bool Deleted { get; }
< 
< 		// @property (readonly, nonatomic) NSDate * _Nonnull messageSent;
< 		[Export ("messageSent")]
< 		NSDate MessageSent { get; }
< 
< 		// @property (readonly, nonatomic) NSDate * _Nullable messageExpiration;
< 		[NullAllowed, Export ("messageExpiration")]
< 		NSDate MessageExpiration { get; }
< 
< 		// @property (readonly, nonatomic) NSString * _Nonnull title;
< 		[Export ("title")]
< 		string Title { get; }
< 
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull extra;
< 		[Export ("extra")]
< 		NSDictionary Extra { get; }
< 
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull rawMessageObject;
< 		[Export ("rawMessageObject")]
< 		NSDictionary RawMessageObject { get; }
< 
< 		// @property (readonly, nonatomic, weak) UAInboxMessageList * _Nullable inbox;
< 		[NullAllowed, Export ("inbox", ArgumentSemantic.Weak)]
< 		UAInboxMessageList Inbox { get; }
< 
< 		// -(UADisposable * _Nullable)markMessageReadWithCompletionHandler:(UAInboxMessageCallbackBlock _Nullable)completionHandler;
< 		[Export ("markMessageReadWithCompletionHandler:")]
< 		[return: NullAllowed]
< 		UADisposable MarkMessageRead ([NullAllowed] UAInboxMessageCallbackBlock completionHandler);
< 
< 		// -(BOOL)isExpired;
< 		[Export ("isExpired")]
< 		bool IsExpired { get; }
< 	}
< 
< 	// typedef void (^UAInboxMessageListCallbackBlock)();
< 	delegate void UAInboxMessageListCallbackBlock ();
< 
< 	// @interface UAInboxMessageList : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInboxMessageList
< 	{
< 		// -(UADisposable * _Nullable)markMessagesRead:(NSArray * _Nonnull)messages completionHandler:(UAInboxMessageListCallbackBlock _Nullable)completionHandler;
< 		[Export ("markMessagesRead:completionHandler:")]
< 		[return: NullAllowed]
< 		UADisposable MarkMessagesRead (UAInboxMessage[] messages, [NullAllowed] UAInboxMessageListCallbackBlock completionHandler);
< 
< 		// -(UADisposable * _Nullable)markMessagesDeleted:(NSArray * _Nonnull)messages completionHandler:(UAInboxMessageListCallbackBlock _Nullable)completionHandler;
< 		[Export ("markMessagesDeleted:completionHandler:")]
< 		[return: NullAllowed]
< 		UADisposable MarkMessagesDeleted (UAInboxMessage[] messages, [NullAllowed] UAInboxMessageListCallbackBlock completionHandler);
< 
< 		// -(UADisposable * _Nullable)retrieveMessageListWithSuccessBlock:(UAInboxMessageListCallbackBlock _Nullable)successBlock withFailureBlock:(UAInboxMessageListCallbackBlock _Nullable)failureBlock;
< 		[Export ("retrieveMessageListWithSuccessBlock:withFailureBlock:")]
< 		[return: NullAllowed]
< 		UADisposable RetrieveMessageList ([NullAllowed] UAInboxMessageListCallbackBlock successBlock, [NullAllowed] UAInboxMessageListCallbackBlock failureBlock);
< 
< 		// -(NSUInteger)messageCount;
< 		[Export ("messageCount")]
< 		nuint MessageCount { get; }
< 
< 		// -(UAInboxMessage * _Nullable)messageForBodyURL:(NSURL * _Nonnull)url;
< 		[Export ("messageForBodyURL:")]
< 		[return: NullAllowed]
< 		UAInboxMessage MessageForBodyURL (NSUrl url);
< 
< 		// -(UAInboxMessage * _Nullable)messageForID:(NSString * _Nonnull)messageID;
< 		[Export ("messageForID:")]
< 		[return: NullAllowed]
< 		UAInboxMessage MessageForID (string messageID);
< 
< 		// @property (readonly, atomic, strong) NSArray<UAInboxMessage *> * _Nonnull messages;
< 		[Export ("messages", ArgumentSemantic.Strong)]
< 		UAInboxMessage[] Messages { get; }
< 
< 		// @property (assign) NSInteger unreadCount;
< 		[Export ("unreadCount")]
< 		nint UnreadCount { get; set; }
< 
< 		// @property (readonly) BOOL isRetrieving;
< 		[Export ("isRetrieving")]
< 		bool IsRetrieving { get; }
< 
< 		// @property (readonly) BOOL isBatchUpdating;
< 		[Export ("isBatchUpdating")]
< 		bool IsBatchUpdating { get; }
< 	}
< 
< 	// @interface UANamedUser : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UANamedUser
< 	{
< 		// @property (copy, nonatomic) NSString * _Nullable identifier;
< 		[NullAllowed, Export ("identifier")]
< 		string Identifier { get; set; }
< 
< 		// -(void)forceUpdate;
< 		[Export ("forceUpdate")]
< 		void ForceUpdate ();
< 
< 		// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
< 		[Export ("addTags:group:")]
< 		void AddTags (string[] tags, string tagGroupID);
< 
< 		// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
< 		[Export ("removeTags:group:")]
< 		void RemoveTags (string[] tags, string tagGroupID);
< 
<       // -(void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
<       [Export ("setTags:group:")]
<       void SetTags (string[] tags, string tagGroupID);
< 
< 		// -(void)updateTags;
< 		[Export ("updateTags")]
< 		void UpdateTags ();
< 	}
< 
< 	// @protocol UARegistrationDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UARegistrationDelegate
< 	{
< 		// @optional -(void)registrationSucceededForChannelID:(NSString * _Nonnull)channelID deviceToken:(NSString * _Nonnull)deviceToken;
< 		[Export ("registrationSucceededForChannelID:deviceToken:")]
< 		void RegistrationSucceeded (string channelID, string deviceToken);
< 
< 		// @optional -(void)registrationFailed;
< 		[Export ("registrationFailed")]
<    	void RegistrationFailed ();
< 
<       // @optional -(void)notificationRegistrationFinishedWithOptions:(UANotificationOptions)options categories:(NSSet * _Nonnull)categories;
<       [Export ("notificationRegistrationFinishedWithOptions:categories:")]
<       void NotificationRegistrationFinishedWithOptions (UANotificationOptions options, NSSet categories);
< 
<       // @optional -(void)notificationAuthorizedOptionsDidChange:(UANotificationOptions)options;
<       [Export ("notificationAuthorizedOptionsDidChange:")]
<       void NotificationAuthorizedOptionsDidChange (UANotificationOptions options);
< 	}
< 
< 	// @protocol UAPushNotificationDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType(typeof(NSObject))]
< 	interface UAPushNotificationDelegate
< 	{
< 		// @optional -(void)receivedForegroundNotification:(UANotificationContent * _Nonnull)notificationContent completionHandler:(void (^ _Nonnull)())completionHandler;
< 		[Export("receivedForegroundNotification:completionHandler:")]
< 		void ReceivedForegroundNotification(UANotificationContent notificationContent, Action completionHandler);
< 
< 		// @optional -(void)receivedBackgroundNotification:(UANotificationContent * _Nonnull)notificationContent completionHandler:(void (^ _Nonnull)(UIBackgroundFetchResult))completionHandler;
< 		[Export("receivedBackgroundNotification:completionHandler:")]
< 		void ReceivedBackgroundNotification(UANotificationContent notificationContent, Action<UIBackgroundFetchResult> completionHandler);
< 
< 		// @optional -(void)receivedNotificationResponse:(UANotificationResponse * _Nonnull)notificationResponse completionHandler:(void (^ _Nonnull)())completionHandler;
< 		[Export("receivedNotificationResponse:completionHandler:")]
< 		void ReceivedNotificationResponse(UANotificationResponse notificationResponse, Action completionHandler);
< 
< 		// @optional -(UNNotificationPresentationOptions)presentationOptionsForNotification:(UNNotification * _Nonnull)notification;
< 		[Export("presentationOptionsForNotification:")]
< 		UNNotificationPresentationOptions PresentationOptions(UNNotification notification);
< 	}
< 
< 	// @interface UAPush : NSObject <UAChannelRegistrarDelegate>
< 	[BaseType (typeof(NSObject))]
< 	interface UAPush
< 	{
< 		// @property (assign, nonatomic) BOOL backgroundPushNotificationsEnabled;
< 		[Export ("backgroundPushNotificationsEnabled")]
< 		bool BackgroundPushNotificationsEnabled { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL backgroundPushNotificationsEnabledByDefault;
< 		[Export ("backgroundPushNotificationsEnabledByDefault")]
< 		bool BackgroundPushNotificationsEnabledByDefault { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL userPushNotificationsEnabled;
< 		[Export ("userPushNotificationsEnabled")]
< 		bool UserPushNotificationsEnabled { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL pushTokenRegistrationEnabled;
< 		[Export ("pushTokenRegistrationEnabled")]
< 		bool PushTokenRegistrationEnabled { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL allowUnregisteringUserNotificationTypes;
< 		[Export ("allowUnregisteringUserNotificationTypes")]
< 		bool AllowUnregisteringUserNotificationTypes { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL requireSettingsAppToDisableUserNotifications;
< 		[Export ("requireSettingsAppToDisableUserNotifications")]
< 		bool RequireSettingsAppToDisableUserNotifications { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL userPushNotificationsEnabledByDefault;
< 		[Export ("userPushNotificationsEnabledByDefault")]
< 		bool UserPushNotificationsEnabledByDefault { get; set; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable deviceToken;
< 		[NullAllowed, Export ("deviceToken")]
< 		string DeviceToken { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable channelID;
< 		[NullAllowed, Export("channelID")]
< 		string ChannelID { get; }
< 
< 		// @property (assign, nonatomic) BOOL requireAuthorizationForDefaultCategories;
< 		[Export ("requireAuthorizationForDefaultCategories")]
< 		bool RequireAuthorizationForDefaultCategories { get; set; }
< 
< 		[Wrap ("WeakPushNotificationDelegate")]
< 		[NullAllowed]
< 		UAPushNotificationDelegate PushNotificationDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UAPushNotificationDelegate> _Nullable pushNotificationDelegate;
< 		[NullAllowed, Export ("pushNotificationDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakPushNotificationDelegate { get; set; }
< 
< 		[Wrap ("WeakRegistrationDelegate")]
< 		[NullAllowed]
< 		UARegistrationDelegate RegistrationDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UARegistrationDelegate> _Nullable registrationDelegate;
< 		[NullAllowed, Export ("registrationDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakRegistrationDelegate { get; set; }
< 
< 		// @property (getter = isAutobadgeEnabled, assign, nonatomic) BOOL autobadgeEnabled;
< 		[Export ("autobadgeEnabled")]
< 		bool AutobadgeEnabled { [Bind ("isAutobadgeEnabled")] get; set; }
< 
< 		// -(void)setBadgeNumber:(NSInteger)badgeNumber;
< 		[Export ("setBadgeNumber:")]
< 		void SetBadgeNumber (nint badgeNumber);
< 
< 		// -(void)resetBadge;
< 		[Export ("resetBadge")]
< 		void ResetBadge ();
< 
< 		// @property (copy, nonatomic) NSString * _Nullable alias;
< 		[NullAllowed, Export ("alias")]
< 		string Alias { get; set; }
< 
< 		// @property (copy, nonatomic) NSArray<NSString *> * _Nonnull tags;
< 		[Export ("tags", ArgumentSemantic.Copy)]
< 		string[] Tags { get; set; }
< 
< 		// @property (getter = isChannelTagRegistrationEnabled, assign, nonatomic) BOOL channelTagRegistrationEnabled;
< 		[Export ("channelTagRegistrationEnabled")]
< 		bool ChannelTagRegistrationEnabled { [Bind ("isChannelTagRegistrationEnabled")] get; set; }
< 
< 		// -(void)addTag:(NSString * _Nonnull)tag;
< 		[Export ("addTag:")]
< 		void AddTag (string tag);
< 
< 		// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags;
< 		[Export ("addTags:")]
< 		void AddTags (string[] tags);
< 
< 		// -(void)removeTag:(NSString * _Nonnull)tag;
< 		[Export ("removeTag:")]
< 		void RemoveTag (string tag);
< 
< 		// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags;
< 		[Export ("removeTags:")]
< 		void RemoveTags (string[] tags);
< 
< 		// -(void)addTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
< 		[Export ("addTags:group:")]
< 		void AddTags (string[] tags, string tagGroupID);
< 
< 		// -(void)removeTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
< 		[Export ("removeTags:group:")]
< 		void RemoveTags (string[] tags, string tagGroupID);
< 
<       // -(void)setTags:(NSArray<NSString *> * _Nonnull)tags group:(NSString * _Nonnull)tagGroupID;
<       [Export ("setTags:group:")]
<       void SetTags (string[] tags, string tagGroupID);
< 
< 		// @property (readonly, copy, nonatomic) NSDictionary * _Nullable quietTime;
< 		[NullAllowed, Export ("quietTime", ArgumentSemantic.Copy)]
< 		NSDictionary QuietTime { get; }
< 
< 		// @property (nonatomic, strong) NSTimeZone * _Nonnull timeZone;
< 		[Export ("timeZone", ArgumentSemantic.Strong)]
< 		NSTimeZone TimeZone { get; set; }
< 
< 		// @property (getter = isQuietTimeEnabled, assign, nonatomic) BOOL quietTimeEnabled;
< 		[Export ("quietTimeEnabled")]
< 		bool QuietTimeEnabled { [Bind ("isQuietTimeEnabled")] get; set; }
< 
< 		// -(void)setQuietTimeStartHour:(NSUInteger)startHour startMinute:(NSUInteger)startMinute endHour:(NSUInteger)endHour endMinute:(NSUInteger)endMinute;
< 		[Export ("setQuietTimeStartHour:startMinute:endHour:endMinute:")]
< 		void SetQuietTime (nuint startHour, nuint startMinute, nuint endHour, nuint endMinute);
< 
< 		// -(void)enableChannelCreation;
< 		[Export ("enableChannelCreation")]
< 		void EnableChannelCreation ();
< 
< 		// -(void)updateRegistration;
< 		[Export ("updateRegistration")]
< 		void UpdateRegistration ();
< 
< 		// @property (assign, nonatomic) UANotificationOptions notificationOptions;
< 		[Export("notificationOptions", ArgumentSemantic.Assign)]
< 		UANotificationOptions NotificationOptions { get; set; }
< 
< 		// @property (readonly, assign, nonatomic) UANotificationOptions authorizedNotificationOptions;
< 		[Export("authorizedNotificationOptions", ArgumentSemantic.Assign)]
< 		UANotificationOptions AuthorizedNotificationOptions { get; }
< 
< 		// @property (nonatomic, strong) NSSet<UANotificationCategory *> * _Nonnull customCategories;
< 		[Export("customCategories", ArgumentSemantic.Strong)]
< 		NSSet CustomCategories { get; set; }
< 
< 		// @property (readonly, nonatomic, strong) UANotificationResponse * _Nullable launchNotificationResponse;
< 		[NullAllowed, Export("launchNotificationResponse", ArgumentSemantic.Strong)]
< 		UANotificationResponse LaunchNotificationResponse { get; }
< 
< 		// @property (assign, nonatomic) UNNotificationPresentationOptions defaultPresentationOptions;
< 		[Export("defaultPresentationOptions", ArgumentSemantic.Assign)]
< 		UNNotificationPresentationOptions DefaultPresentationOptions { get; set; }
< 	}
< 
< 	// @interface UAConfig : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAConfig
< 	{
< 		// @property (readonly, nonatomic) NSString * _Nullable appKey;
< 		[NullAllowed, Export ("appKey")]
< 		string AppKey { get; }
< 
< 		// @property (readonly, nonatomic) NSString * _Nullable appSecret;
< 		[NullAllowed, Export ("appSecret")]
< 		string AppSecret { get; }
< 
< 		// @property (readonly, nonatomic) UALogLevel logLevel;
< 		[Export ("logLevel")]
< 		UALogLevel LogLevel { get; }
< 
< 		// @property (getter = isInProduction, assign, nonatomic) BOOL inProduction;
< 		[Export ("inProduction")]
< 		bool InProduction { [Bind ("isInProduction")] get; set; }
< 
< 		// @property (getter = isAnalyticsEnabled, assign, nonatomic) BOOL analyticsEnabled;
< 		[Export ("analyticsEnabled")]
< 		bool AnalyticsEnabled { [Bind ("isAnalyticsEnabled")] get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable developmentAppKey;
< 		[NullAllowed, Export ("developmentAppKey")]
< 		string DevelopmentAppKey { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable developmentAppSecret;
< 		[NullAllowed, Export ("developmentAppSecret")]
< 		string DevelopmentAppSecret { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable productionAppKey;
< 		[NullAllowed, Export ("productionAppKey")]
< 		string ProductionAppKey { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable productionAppSecret;
< 		[NullAllowed, Export ("productionAppSecret")]
< 		string ProductionAppSecret { get; set; }
< 
< 		// @property (assign, nonatomic) UALogLevel developmentLogLevel;
< 		[Export ("developmentLogLevel", ArgumentSemantic.Assign)]
< 		UALogLevel DevelopmentLogLevel { get; set; }
< 
< 		// @property (assign, nonatomic) UALogLevel productionLogLevel;
< 		[Export ("productionLogLevel", ArgumentSemantic.Assign)]
< 		UALogLevel ProductionLogLevel { get; set; }
< 
< 		// @property (assign, nonatomic) NSUInteger cacheDiskSizeInMB;
< 		[Export ("cacheDiskSizeInMB")]
< 		nuint CacheDiskSizeInMB { get; set; }
< 
< 		// @property (getter = isAutomaticSetupEnabled, assign, nonatomic) BOOL automaticSetupEnabled;
< 		[Export ("automaticSetupEnabled")]
< 		bool AutomaticSetupEnabled { [Bind ("isAutomaticSetupEnabled")] get; set; }
< 
< 		// @property (nonatomic, strong) NSArray<NSString *> * _Nonnull whitelist;
< 		[Export ("whitelist", ArgumentSemantic.Strong)]
< 		string[] Whitelist { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL detectProvisioningMode;
< 		[Export ("detectProvisioningMode")]
< 		bool DetectProvisioningMode { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nonnull deviceAPIURL;
< 		[Export ("deviceAPIURL")]
< 		string DeviceAPIURL { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nonnull analyticsURL;
< 		[Export ("analyticsURL")]
< 		string AnalyticsURL { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nonnull landingPageContentURL;
< 		[Export ("landingPageContentURL")]
< 		string LandingPageContentURL { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL clearUserOnAppRestore;
< 		[Export ("clearUserOnAppRestore")]
< 		bool ClearUserOnAppRestore { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL clearNamedUserOnAppRestore;
< 		[Export ("clearNamedUserOnAppRestore")]
< 		bool ClearNamedUserOnAppRestore { get; set; }
< 
< 		// @property (getter = isChannelCaptureEnabled, assign, nonatomic) BOOL channelCaptureEnabled;
< 		[Export ("channelCaptureEnabled")]
< 		bool ChannelCaptureEnabled { [Bind ("isChannelCaptureEnabled")] get; set; }
< 
< 		// @property (getter = isChannelCreationDelayEnabled, assign, nonatomic) BOOL channelCreationDelayEnabled;
< 		[Export ("channelCreationDelayEnabled")]
< 		bool ChannelCreationDelayEnabled { [Bind ("isChannelCreationDelayEnabled")] get; set; }
< 
< 		// @property (copy, nonatomic) NSDictionary * _Nonnull customConfig;
< 		[Export ("customConfig", ArgumentSemantic.Copy)]
< 		NSDictionary CustomConfig { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nonnull messageCenterStyleConfig;
< 		[Export ("messageCenterStyleConfig")]
< 		string MessageCenterStyleConfig { get; set; }
< 
< 		// +(UAConfig * _Nonnull)defaultConfig;
< 		[Static]
< 		[Export ("defaultConfig")]
< 		UAConfig DefaultConfig ();
< 
< 		// +(UAConfig * _Nonnull)configWithContentsOfFile:(NSString * _Nonnull)path;
< 		[Static]
< 		[Export ("configWithContentsOfFile:")]
< 		UAConfig ConfigWithContentsOfFile (string path);
< 
< 		// +(UAConfig * _Nonnull)config;
< 		[Static]
< 		[Export ("config")]
< 		UAConfig Config ();
< 
< 		// -(BOOL)validate;
< 		[Export ("validate")]
< 		bool Validate ();
< 	}
< 
< 	// @interface UAWebViewCallData : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAWebViewCallData
< 	{
< 		// +(UAWebViewCallData * _Nonnull)callDataForURL:(NSURL * _Nonnull)url webView:(UIWebView * _Nonnull)webView;
< 		[Static]
< 		[Export ("callDataForURL:webView:")]
< 		UAWebViewCallData CallData (NSUrl url, UIWebView webView);
< 
< 		// +(UAWebViewCallData * _Nonnull)callDataForURL:(NSURL * _Nonnull)url webView:(UIWebView * _Nonnull)webView message:(UAInboxMessage * _Nullable)message;
< 		[Static]
< 		[Export ("callDataForURL:webView:message:")]
< 		UAWebViewCallData CallData (NSUrl url, UIWebView webView, [NullAllowed] UAInboxMessage message);
< 
< 		// @property (copy, nonatomic) NSString * _Nullable name;
< 		[NullAllowed, Export ("name")]
< 		string Name { get; set; }
< 
< 		// @property (nonatomic, strong) NSArray<NSString *> * _Nullable arguments;
< 		[NullAllowed, Export ("arguments", ArgumentSemantic.Strong)]
< 		string[] Arguments { get; set; }
< 
< 		// @property (nonatomic, strong) NSDictionary * _Nullable options;
< 		[NullAllowed, Export ("options", ArgumentSemantic.Strong)]
< 		NSDictionary Options { get; set; }
< 
< 		// @property (nonatomic, strong) UIWebView * _Nonnull webView;
< 		[Export ("webView", ArgumentSemantic.Strong)]
< 		UIWebView WebView { get; set; }
< 
< 		// @property (nonatomic, strong) NSURL * _Nonnull url;
< 		[Export ("url", ArgumentSemantic.Strong)]
< 		NSUrl Url { get; set; }
< 
< 		// @property (nonatomic, strong) UAInboxMessage * _Nullable message;
< 		[NullAllowed, Export ("message", ArgumentSemantic.Strong)]
< 		UAInboxMessage Message { get; set; }
< 	}
< 
< 	// @protocol UARichContentWindow <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UARichContentWindow
< 	{
< 		// @optional -(void)closeWebView:(UIWebView * _Nonnull)webView animated:(BOOL)animated;
< 		[Export ("closeWebView:animated:")]
< 		void Close (UIWebView webView, bool animated);
< 	}
< 
< 	// @interface UAWebViewDelegate : NSObject <UIWebViewDelegate, UARichContentWindow>
< 	[BaseType (typeof(NSObject))]
< 	interface UAWebViewDelegate : IUIWebViewDelegate, UARichContentWindow
< 	{
< 		[Wrap ("WeakForwardDelegate")]
< 		[NullAllowed]
< 		UIWebViewDelegate ForwardDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UIWebViewDelegate> _Nullable forwardDelegate;
< 		[NullAllowed, Export ("forwardDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakForwardDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UARichContentWindow> _Nullable richContentWindow;
< 		[NullAllowed, Export ("richContentWindow", ArgumentSemantic.Weak)]
< 		UARichContentWindow RichContentWindow { get; set; }
< 	}
< 
< 	// @interface UAActionResult : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAActionResult
< 	{
< 		// @property (readonly, nonatomic, strong) id _Nullable value;
< 		[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
< 		NSObject Value { get; }
< 
< 		// @property (readonly, assign, nonatomic) UAActionFetchResult fetchResult;
< 		[Export ("fetchResult", ArgumentSemantic.Assign)]
< 		UAActionFetchResult FetchResult { get; }
< 
< 		// @property (readonly, nonatomic, strong) NSError * _Nullable error;
< 		[NullAllowed, Export ("error", ArgumentSemantic.Strong)]
< 		NSError Error { get; }
< 
< 		// @property (readonly, assign, nonatomic) UAActionStatus status;
< 		[Export ("status", ArgumentSemantic.Assign)]
< 		UAActionStatus Status { get; }
< 
< 		// +(instancetype _Nonnull)resultWithValue:(id _Nullable)value;
< 		[Static]
< 		[Export ("resultWithValue:")]
< 		UAActionResult Result ([NullAllowed] NSObject value);
< 
< 		// +(instancetype _Nonnull)resultWithValue:(id _Nullable)result withFetchResult:(UAActionFetchResult)fetchResult;
< 		[Static]
< 		[Export ("resultWithValue:withFetchResult:")]
< 		UAActionResult Result ([NullAllowed] NSObject result, UAActionFetchResult fetchResult);
< 
< 		// +(instancetype _Nonnull)emptyResult;
< 		[Static]
< 		[Export ("emptyResult")]
< 		UAActionResult EmptyResult ();
< 
< 		// +(instancetype _Nonnull)resultWithError:(NSError * _Nonnull)error;
< 		[Static]
< 		[Export ("resultWithError:")]
< 		UAActionResult Result (NSError error);
< 
< 		// +(instancetype _Nonnull)resultWithError:(NSError * _Nonnull)error withFetchResult:(UAActionFetchResult)fetchResult;
< 		[Static]
< 		[Export ("resultWithError:withFetchResult:")]
< 		UAActionResult Result (NSError error, UAActionFetchResult fetchResult);
< 	}
< 
< 	// @interface UAActionArguments : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAActionArguments
< 	{
< 		// +(instancetype _Nonnull)argumentsWithValue:(id _Nullable)value withSituation:(UASituation)situation;
< 		[Static]
< 		[Export ("argumentsWithValue:withSituation:")]
< 		UAActionArguments Arguments ([NullAllowed] NSObject value, UASituation situation);
< 
< 		// +(instancetype _Nonnull)argumentsWithValue:(id _Nullable)value withSituation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata;
< 		[Static]
< 		[Export ("argumentsWithValue:withSituation:metadata:")]
< 		UAActionArguments Arguments ([NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata);
< 
< 		// @property (readonly, assign, nonatomic) UASituation situation;
< 		[Export ("situation", ArgumentSemantic.Assign)]
< 		UASituation Situation { get; }
< 
< 		// @property (readonly, nonatomic, strong) id _Nullable value;
< 		[NullAllowed, Export ("value", ArgumentSemantic.Strong)]
< 		NSObject Value { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSDictionary * _Nullable metadata;
< 		[NullAllowed, Export ("metadata", ArgumentSemantic.Copy)]
< 		NSDictionary Metadata { get; }
< 	}
< 
< 	// typedef BOOL (^UAActionPredicate)(UAActionArguments * _Nonnull);
< 	delegate bool UAActionPredicate (UAActionArguments arg0);
< 
< 	// typedef void (^UAActionCompletionHandler)(UAActionResult * _Nonnull);
< 	delegate void UAActionCompletionHandler (UAActionResult arg0);
< 
< 	// typedef void (^UAActionBlock)(UAActionArguments * _Nonnull, UAActionCompletionHandler _Nonnull);
< 	delegate void UAActionBlock (UAActionArguments arg0, UAActionCompletionHandler arg1);
< 
< 	// @interface UAAction : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAAction
< 	{
< 		// -(BOOL)acceptsArguments:(UAActionArguments * _Nonnull)arguments;
< 		[Export ("acceptsArguments:")]
< 		bool AcceptsArguments (UAActionArguments arguments);
< 
< 		// -(void)willPerformWithArguments:(UAActionArguments * _Nonnull)arguments;
< 		[Export ("willPerformWithArguments:")]
< 		void WillPerform (UAActionArguments arguments);
< 
< 		// -(void)didPerformWithArguments:(UAActionArguments * _Nonnull)arguments withResult:(UAActionResult * _Nonnull)result;
< 		[Export ("didPerformWithArguments:withResult:")]
< 		void DidPerform (UAActionArguments arguments, UAActionResult result);
< 
< 		// -(void)performWithArguments:(UAActionArguments * _Nonnull)arguments completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
< 		[Export ("performWithArguments:completionHandler:")]
< 		void Perform (UAActionArguments arguments, UAActionCompletionHandler completionHandler);
< 
< 		// +(instancetype _Nonnull)actionWithBlock:(UAActionBlock _Nonnull)actionBlock;
< 		[Static]
< 		[Export ("actionWithBlock:")]
< 		UAAction Action (UAActionBlock actionBlock);
< 
< 		// +(instancetype _Nonnull)actionWithBlock:(UAActionBlock _Nonnull)actionBlock acceptingArguments:(UAActionPredicate _Nullable)predicateBlock;
< 		[Static]
< 		[Export ("actionWithBlock:acceptingArguments:")]
< 		UAAction Action (UAActionBlock actionBlock, [NullAllowed] UAActionPredicate predicateBlock);
< 	}
< 
< 	// @interface UALandingPageAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UALandingPageAction
< 	{
< 	}
< 
< 	// @interface UAActionRegistryEntry : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAActionRegistryEntry
< 	{
< 		// @property (nonatomic, strong) UAAction * _Nonnull action;
< 		[Export ("action", ArgumentSemantic.Strong)]
< 		UAAction Action { get; set; }
< 
< 		// @property (copy, nonatomic) UAActionPredicate _Nullable predicate;
< 		[NullAllowed, Export ("predicate", ArgumentSemantic.Copy)]
< 		UAActionPredicate Predicate { get; set; }
< 
< 		// @property (readonly, nonatomic) NSArray<NSString *> * _Nonnull names;
< 		[Export ("names")]
< 		string[] Names { get; }
< 
< 		// -(UAAction * _Nonnull)actionForSituation:(UASituation)situation;
< 		[Export ("actionForSituation:")]
< 		UAAction ActionForSituation (UASituation situation);
< 
< 		// +(instancetype _Nonnull)entryForAction:(UAAction * _Nonnull)action predicate:(UAActionPredicate _Nonnull)predicate;
< 		[Static]
< 		[Export ("entryForAction:predicate:")]
< 		UAActionRegistryEntry EntryForAction (UAAction action, UAActionPredicate predicate);
< 	}
< 
< 	// @interface UAActionRegistry : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAActionRegistry
< 	{
< 		// @property (readonly, nonatomic) NSSet<NSMutableDictionary *> * _Nonnull registeredEntries;
< 		[Export ("registeredEntries")]
< 		NSSet<NSMutableDictionary> RegisteredEntries { get; }
< 
< 		// +(instancetype _Nonnull)defaultRegistry;
< 		[Static]
< 		[Export ("defaultRegistry")]
< 		UAActionRegistry DefaultRegistry ();
< 
< 		// -(BOOL)registerAction:(UAAction * _Nonnull)action name:(NSString * _Nonnull)name predicate:(UAActionPredicate _Nullable)predicate;
< 		[Export ("registerAction:name:predicate:")]
< 		bool RegisterAction (UAAction action, string name, [NullAllowed] UAActionPredicate predicate);
< 
< 		// -(BOOL)registerAction:(UAAction * _Nonnull)action names:(NSArray * _Nonnull)names predicate:(UAActionPredicate _Nullable)predicate;
< 		[Export ("registerAction:names:predicate:")]
< 		bool RegisterAction (UAAction action, NSString[] names, [NullAllowed] UAActionPredicate predicate);
< 
< 		// -(BOOL)registerAction:(UAAction * _Nonnull)action name:(NSString * _Nonnull)name;
< 		[Export ("registerAction:name:")]
< 		bool RegisterAction (UAAction action, string name);
< 
< 		// -(BOOL)registerAction:(UAAction * _Nonnull)action names:(NSArray * _Nonnull)names;
< 		[Export ("registerAction:names:")]
< 		bool RegisterAction (UAAction action, NSString[] names);
< 
< 		// -(UAActionRegistryEntry * _Nullable)registryEntryWithName:(NSString * _Nonnull)name;
< 		[Export ("registryEntryWithName:")]
< 		[return: NullAllowed]
< 		UAActionRegistryEntry RegistryEntryWithName (string name);
< 
< 		// -(BOOL)addSituationOverride:(UASituation)situation forEntryWithName:(NSString * _Nonnull)name action:(UAAction * _Nullable)action;
< 		[Export ("addSituationOverride:forEntryWithName:action:")]
< 		bool AddSituationOverride (UASituation situation, string name, [NullAllowed] UAAction action);
< 
< 		// -(BOOL)updatePredicate:(UAActionPredicate _Nullable)predicate forEntryWithName:(NSString * _Nonnull)name;
< 		[Export ("updatePredicate:forEntryWithName:")]
< 		bool UpdatePredicate ([NullAllowed] UAActionPredicate predicate, string name);
< 
< 		// -(BOOL)updateAction:(UAAction * _Nonnull)action forEntryWithName:(NSString * _Nonnull)name;
< 		[Export ("updateAction:forEntryWithName:")]
< 		bool UpdateAction (UAAction action, string name);
< 
< 		// -(BOOL)removeName:(NSString * _Nonnull)name;
< 		[Export ("removeName:")]
< 		bool RemoveName (string name);
< 
< 		// -(BOOL)removeEntryWithName:(NSString * _Nonnull)name;
< 		[Export ("removeEntryWithName:")]
< 		bool RemoveEntryWithName (string name);
< 
< 		// -(BOOL)addName:(NSString * _Nonnull)name forEntryWithName:(NSString * _Nonnull)entryName;
< 		[Export ("addName:forEntryWithName:")]
< 		bool AddName (string name, string entryName);
< 	}
< 
< 	// @interface UAAggregateActionResult : UAActionResult
< 	[BaseType (typeof(UAActionResult))]
< 	interface UAAggregateActionResult
< 	{
< 		// -(void)addResult:(UAActionResult * _Nonnull)result forAction:(NSString * _Nonnull)actionName;
< 		[Export ("addResult:forAction:")]
< 		void AddResult (UAActionResult result, string actionName);
< 
< 		// -(UAActionResult * _Nonnull)resultForAction:(NSString * _Nonnull)actionName;
< 		[Export ("resultForAction:")]
< 		UAActionResult ResultForAction (string actionName);
< 	}
< 
< 	// @interface UAActionRunner : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAActionRunner
< 	{
< 		// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation;
< 		[Static]
< 		[Export ("runActionWithName:value:situation:")]
< 		void RunAction (string actionName, [NullAllowed] NSObject value, UASituation situation);
< 
< 		// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nonnull)metadata;
< 		[Static]
< 		[Export ("runActionWithName:value:situation:metadata:")]
< 		void RunAction (string actionName, [NullAllowed] NSObject value, UASituation situation, NSDictionary metadata);
< 
< 		// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
< 		[Static]
< 		[Export ("runActionWithName:value:situation:completionHandler:")]
< 		void RunAction (string actionName, [NullAllowed] NSObject value, UASituation situation, UAActionCompletionHandler completionHandler);
< 
< 		// +(void)runActionWithName:(NSString * _Nonnull)actionName value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata completionHandler:(UAActionCompletionHandler _Nullable)completionHandler;
< 		[Static]
< 		[Export ("runActionWithName:value:situation:metadata:completionHandler:")]
< 		void RunAction (string actionName, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata, [NullAllowed] UAActionCompletionHandler completionHandler);
< 
< 		// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation;
< 		[Static]
< 		[Export ("runAction:value:situation:")]
< 		void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation);
< 
< 		// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata;
< 		[Static]
< 		[Export ("runAction:value:situation:metadata:")]
< 		void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata);
< 
< 		// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation completionHandler:(UAActionCompletionHandler _Nonnull)completionHandler;
< 		[Static]
< 		[Export ("runAction:value:situation:completionHandler:")]
< 		void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, UAActionCompletionHandler completionHandler);
< 
< 		// +(void)runAction:(UAAction * _Nonnull)action value:(id _Nullable)value situation:(UASituation)situation metadata:(NSDictionary * _Nullable)metadata completionHandler:(UAActionCompletionHandler _Nullable)completionHandler;
< 		[Static]
< 		[Export ("runAction:value:situation:metadata:completionHandler:")]
< 		void RunAction (UAAction action, [NullAllowed] NSObject value, UASituation situation, [NullAllowed] NSDictionary metadata, [NullAllowed] UAActionCompletionHandler completionHandler);
< 	}
< 
< 	// @interface UAAddCustomEventAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAAddCustomEventAction
< 	{
< 	}
< 
< 	// @interface UAModifyTagsAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAModifyTagsAction
< 	{
<       // -(void)applyChannelTags:(NSArray *)tags;
<       [Export ("applyChannelTags:")]
<       void ApplyChannelTags (string[] tags);
< 
<       // -(void)applyChannelTags:(NSArray *)tags group:(NSString *)group;
<       [Export ("applyChannelTags:group:")]
<       void ApplyChannelTags (string[] tags, string group);
< 
<       // -(void)applyNamedUserTags:(NSArray *)tags group:(NSString *)group;
<       [Export ("applyNamedUserTags:group:")]
<       void ApplyNamedUserTags (string[] tags, string group);
< 	}
< 
< 	// @interface UAAddTagsAction : UAModifyTagsAction
< 	[BaseType (typeof(UAModifyTagsAction))]
< 	interface UAAddTagsAction
< 	{
< 	}
< 
< 	// @interface UACloseWindowAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UACloseWindowAction
< 	{
< 	}
< 
< 	// @interface UADisplayInboxAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UADisplayInboxAction
< 	{
< 	}
< 
< 	// @interface UAOpenExternalURLAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAOpenExternalURLAction
< 	{
< 	}
< 
< 	// @interface UAOverlayInboxMessageAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAOverlayInboxMessageAction
< 	{
< 	}
< 
< 	// @interface UAPasteboardAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAPasteboardAction
< 	{
< 	}
< 
< 	// @interface UARemoveTagsAction : UAModifyTagsAction
< 	[BaseType (typeof(UAModifyTagsAction))]
< 	interface UARemoveTagsAction
< 	{
< 	}
< 
< 	// @interface UAShareAction : UAAction
< 	[BaseType (typeof(UAAction))]
< 	interface UAShareAction
< 	{
< 	}
< 
< 	// @interface UACancelSchedulesAction : UAAction
< 	[BaseType(typeof(UAAction))]
< 	interface UACancelSchedulesAction
< 	{
< 	}
< 
< 	// @interface UAActionSchedule : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAActionSchedule
< 	{
< 		// @property (readonly, nonatomic) NSString * _Nonnull identifier;
< 		[Export("identifier")]
< 		string Identifier { get; }
< 
< 		// @property (readonly, nonatomic) UAActionScheduleInfo * _Nonnull info;
< 		[Export("info")]
< 		UAActionScheduleInfo Info { get; }
< 
< 		// -(BOOL)isEqualToSchedule:(UAActionSchedule * _Nullable)schedule;
< 		[Export("isEqualToSchedule:")]
< 		bool IsEqual([NullAllowed] UAActionSchedule schedule);
< 	}
< 
< 	// @interface UAActionScheduleInfo : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAActionScheduleInfo
< 	{
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull actions;
< 		[Export("actions")]
< 		NSDictionary Actions { get; }
< 
< 		// @property (readonly, nonatomic) NSArray<UAScheduleTrigger *> * _Nonnull triggers;
< 		[Export("triggers")]
< 		UAScheduleTrigger[] Triggers { get; }
< 
< 		// @property (readonly, nonatomic) NSUInteger limit;
< 		[Export("limit")]
< 		nuint Limit { get; }
< 
< 		// @property (readonly, nonatomic) NSString * _Nullable group;
< 		[NullAllowed, Export("group")]
< 		string Group { get; }
< 
< 		// @property (readonly, nonatomic) NSDate * _Nonnull start;
< 		[Export("start")]
< 		NSDate Start { get; }
< 
< 		// @property (readonly, nonatomic) NSDate * _Nonnull end;
< 		[Export("end")]
< 		NSDate End { get; }
< 
< 		// @property (readonly, nonatomic) BOOL isValid;
< 		[Export("isValid")]
< 		bool IsValid { get; }
< 
< 		// +(instancetype _Nonnull)actionScheduleInfoWithBuilderBlock:(void (^ _Nonnull)(UAActionScheduleInfoBuilder * _Nonnull))builderBlock;
< 		[Static]
< 		[Export("actionScheduleInfoWithBuilderBlock:")]
< 		UAActionScheduleInfo ActionScheduleInfo(Action<UAActionScheduleInfoBuilder> builderBlock);
< 
< 		// -(BOOL)isEqualToScheduleInfo:(UAActionScheduleInfo * _Nullable)scheduleInfo;
< 		[Export("isEqualToScheduleInfo:")]
< 		bool IsEqual([NullAllowed] UAActionScheduleInfo scheduleInfo);
< 
< 		// +(instancetype _Nullable)actionScheduleInfoWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
< 		[Static]
< 		[Export("actionScheduleInfoWithJSON:error:")]
< 		[return: NullAllowed]
< 		UAActionScheduleInfo ActionScheduleInfo(NSObject json, [NullAllowed] out NSError error);
< 	}
< 
< 	// @interface UAActionScheduleInfoBuilder : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAActionScheduleInfoBuilder
< 	{
< 		// @property (nonatomic, strong) NSDictionary * _Nullable actions;
< 		[NullAllowed, Export("actions", ArgumentSemantic.Strong)]
< 		NSDictionary Actions { get; set; }
< 
< 		// @property (assign, nonatomic) NSUInteger limit;
< 		[Export("limit")]
< 		nuint Limit { get; set; }
< 
< 		// @property (nonatomic, strong) NSArray<UAScheduleTrigger *> * _Nullable triggers;
< 		[NullAllowed, Export("triggers", ArgumentSemantic.Strong)]
< 		UAScheduleTrigger[] Triggers { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable group;
< 		[NullAllowed, Export("group")]
< 		string Group { get; set; }
< 
< 		// @property (nonatomic, strong) NSDate * _Nullable start;
< 		[NullAllowed, Export("start", ArgumentSemantic.Strong)]
< 		NSDate Start { get; set; }
< 
< 		// @property (nonatomic, strong) NSDate * _Nullable end;
< 		[NullAllowed, Export("end", ArgumentSemantic.Strong)]
< 		NSDate End { get; set; }
< 	}
< 
< 	// @interface UAScheduleTrigger : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAScheduleTrigger
< 	{
< 		// @property (readonly, nonatomic) UAScheduleTriggerType type;
< 		[Export("type")]
< 		UAScheduleTriggerType Type { get; }
< 
< 		// @property (readonly, nonatomic) NSNumber * _Nonnull goal;
< 		[Export("goal")]
< 		NSNumber Goal { get; }
< 
< 		// +(instancetype _Nonnull)foregroundTriggerWithCount:(NSUInteger)count;
< 		[Static]
< 		[Export("foregroundTriggerWithCount:")]
< 		UAScheduleTrigger ForegroundTrigger(nuint count);
< 
< 		// +(instancetype _Nonnull)backgroundTriggerWithCount:(NSUInteger)count;
< 		[Static]
< 		[Export("backgroundTriggerWithCount:")]
< 		UAScheduleTrigger BackgroundTrigger(nuint count);
< 
< 		// +(instancetype _Nonnull)regionEnterTriggerForRegionID:(NSString * _Nonnull)regionID count:(NSUInteger)count;
< 		[Static]
< 		[Export("regionEnterTriggerForRegionID:count:")]
< 		UAScheduleTrigger RegionEnterTrigger(string regionID, nuint count);
< 
< 		// +(instancetype _Nonnull)regionExitTriggerForRegionID:(NSString * _Nonnull)regionID count:(NSUInteger)count;
< 		[Static]
< 		[Export("regionExitTriggerForRegionID:count:")]
< 		UAScheduleTrigger RegionExitTrigger(string regionID, nuint count);
< 
< 		// +(instancetype _Nonnull)screenTriggerForScreenName:(NSString * _Nonnull)screenName count:(NSUInteger)count;
< 		[Static]
< 		[Export("screenTriggerForScreenName:count:")]
< 		UAScheduleTrigger ScreenTrigger(string screenName, nuint count);
< 
< 		// +(instancetype _Nonnull)customEventTriggerWithPredicate:(UAJSONPredicate * _Nonnull)predicate count:(NSUInteger)count;
< 		[Static]
< 		[Export("customEventTriggerWithPredicate:count:")]
< 		UAScheduleTrigger CustomEventTrigger(UAJSONPredicate predicate, nuint count);
< 
< 		// +(instancetype _Nonnull)customEventTriggerWithPredicate:(UAJSONPredicate * _Nonnull)predicate value:(NSNumber * _Nonnull)value;
< 		[Static]
< 		[Export("customEventTriggerWithPredicate:value:")]
< 		UAScheduleTrigger CustomEventTrigger(UAJSONPredicate predicate, NSNumber value);
< 
< 		// -(BOOL)isEqualToTrigger:(UAScheduleTrigger * _Nullable)trigger;
< 		[Export("isEqualToTrigger:")]
< 		bool IsEqual([NullAllowed] UAScheduleTrigger trigger);
< 
< 		// +(instancetype _Nullable)triggerWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
< 		[Static]
< 		[Export("triggerWithJSON:error:")]
< 		[return: NullAllowed]
< 		UAScheduleTrigger Trigger(NSObject json, [NullAllowed] out NSError error);
< 	}
< 
< 	// @interface UAJSONMatcher : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAJSONMatcher
< 	{
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
< 		[Export("payload")]
< 		NSDictionary Payload { get; }
< 
< 		// -(BOOL)evaluateObject:(id _Nullable)object;
< 		[Export("evaluateObject:")]
< 		bool EvaluateObject([NullAllowed] NSObject @object);
< 
< 		// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher;
< 		[Static]
< 		[Export("matcherWithValueMatcher:")]
< 		UAJSONMatcher Matcher(UAJSONValueMatcher valueMatcher);
< 
< 		// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key;
< 		[Static]
< 		[Export("matcherWithValueMatcher:key:")]
< 		UAJSONMatcher Matcher(UAJSONValueMatcher valueMatcher, string key);
< 
< 		// +(instancetype _Nonnull)matcherWithValueMatcher:(UAJSONValueMatcher * _Nonnull)valueMatcher key:(NSString * _Nonnull)key scope:(NSArray<NSString *> * _Nonnull)scope;
< 		[Static]
< 		[Export("matcherWithValueMatcher:key:scope:")]
< 		UAJSONMatcher Matcher(UAJSONValueMatcher valueMatcher, string key, string[] scope);
< 
< 		// +(instancetype _Nullable)matcherWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
< 		[Static]
< 		[Export("matcherWithJSON:error:")]
< 		[return: NullAllowed]
< 		UAJSONMatcher Matcher(NSObject json, [NullAllowed] out NSError error);
< 	}
< 
< 	// @interface UAJSONValueMatcher : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAJSONValueMatcher
< 	{
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
< 		[Export("payload")]
< 		NSDictionary Payload { get; }
< 
< 		// -(BOOL)evaluateObject:(id _Nullable)object;
< 		[Export("evaluateObject:")]
< 		bool EvaluateObject([NullAllowed] NSObject @object);
< 
< 		// +(instancetype _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)number;
< 		[Static]
< 		[Export("matcherWhereNumberAtLeast:")]
< 		UAJSONValueMatcher MatcherWhereNumberAtLeast(NSNumber number);
< 
< 		// +(instancetype _Nonnull)matcherWhereNumberAtLeast:(NSNumber * _Nonnull)lowerNumber atMost:(NSNumber * _Nonnull)higherNumber;
< 		[Static]
< 		[Export("matcherWhereNumberAtLeast:atMost:")]
< 		UAJSONValueMatcher MatcherWhereNumberAtLeast(NSNumber lowerNumber, NSNumber higherNumber);
< 
< 		// +(instancetype _Nonnull)matcherWhereNumberAtMost:(NSNumber * _Nonnull)number;
< 		[Static]
< 		[Export("matcherWhereNumberAtMost:")]
< 		UAJSONValueMatcher MatcherWhereNumberAtMost(NSNumber number);
< 
< 		// +(instancetype _Nonnull)matcherWhereNumberEquals:(NSNumber * _Nonnull)number;
< 		[Static]
< 		[Export("matcherWhereNumberEquals:")]
< 		UAJSONValueMatcher MatcherWhereNumberEquals(NSNumber number);
< 
< 		// +(instancetype _Nonnull)matcherWhereStringEquals:(NSString * _Nonnull)string;
< 		[Static]
< 		[Export("matcherWhereStringEquals:")]
< 		UAJSONValueMatcher MatcherWhereStringEquals(string @string);
< 
< 		// +(instancetype _Nonnull)matcherWhereValueIsPresent:(BOOL)present;
< 		[Static]
< 		[Export("matcherWhereValueIsPresent:")]
< 		UAJSONValueMatcher MatcherWhereValueIsPresent(bool present);
< 
< 		// +(instancetype _Nullable)matcherWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
< 		[Static]
< 		[Export("matcherWithJSON:error:")]
< 		[return: NullAllowed]
< 		UAJSONValueMatcher Matcher(NSObject json, [NullAllowed] out NSError error);
< 	}
< 
< 	// @interface UAJSONPredicate : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAJSONPredicate
< 	{
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
< 		[Export("payload")]
< 		NSDictionary Payload { get; }
< 
< 		// -(BOOL)evaluateObject:(id _Nullable)object;
< 		[Export("evaluateObject:")]
< 		bool EvaluateObject([NullAllowed] NSObject @object);
< 
< 		// +(instancetype _Nonnull)predicateWithJSONMatcher:(UAJSONMatcher * _Nonnull)matcher;
< 		[Static]
< 		[Export("predicateWithJSONMatcher:")]
< 		UAJSONPredicate Predicate(UAJSONMatcher matcher);
< 
< 		// +(instancetype _Nonnull)andPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nonnull)subpredicates;
< 		[Static]
< 		[Export("andPredicateWithSubpredicates:")]
< 		UAJSONPredicate AndPredicate(UAJSONPredicate[] subpredicates);
< 
< 		// +(instancetype _Nonnull)orPredicateWithSubpredicates:(NSArray<UAJSONPredicate *> * _Nonnull)subpredicates;
< 		[Static]
< 		[Export("orPredicateWithSubpredicates:")]
< 		UAJSONPredicate OrPredicate(UAJSONPredicate[] subpredicates);
< 
< 		// +(instancetype _Nonnull)notPredicateWithSubpredicate:(UAJSONPredicate * _Nonnull)subpredicate;
< 		[Static]
< 		[Export("notPredicateWithSubpredicate:")]
< 		UAJSONPredicate NotPredicate(UAJSONPredicate subpredicate);
< 
< 		// +(instancetype _Nullable)predicateWithJSON:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error;
< 		[Static]
< 		[Export("predicateWithJSON:error:")]
< 		[return: NullAllowed]
< 		UAJSONPredicate Predicate(NSObject json, [NullAllowed] out NSError error);
< 	}
< 
< 	// @interface UAAutomation : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAAutomation
< 	{
< 		// -(void)scheduleActions:(UAActionScheduleInfo * _Nonnull)scheduleInfo completionHandler:(void (^ _Nullable)(UAActionSchedule * _Nullable))completionHandler;
< 		[Export("scheduleActions:completionHandler:")]
< 		void ScheduleActions(UAActionScheduleInfo scheduleInfo, [NullAllowed] Action<UAActionSchedule> completionHandler);
< 
< 		// -(void)cancelScheduleWithIdentifier:(NSString * _Nonnull)identifier;
< 		[Export("cancelScheduleWithIdentifier:")]
< 		void CancelSchedule(string identifier);
< 
< 		// -(void)cancelSchedulesWithGroup:(NSString * _Nonnull)group;
< 		[Export("cancelSchedulesWithGroup:")]
< 		void CancelSchedules(string group);
< 
< 		// -(void)cancelAll;
< 		[Export("cancelAll")]
< 		void CancelAll();
< 
< 		// -(void)getScheduleWithIdentifier:(NSString * _Nonnull)identifier completionHandler:(void (^ _Nonnull)(UAActionSchedule * _Nullable))completionHandler;
< 		[Export("getScheduleWithIdentifier:completionHandler:")]
< 		void GetSchedule(string identifier, Action<UAActionSchedule> completionHandler);
< 
< 		// -(void)getSchedules:(void (^ _Nonnull)(NSArray<UAActionSchedule *> * _Nonnull))completionHandler;
< 		[Export("getSchedules:")]
< 		void GetSchedules(Action<NSArray> completionHandler);
< 
< 		// -(void)getSchedulesWithGroup:(NSString * _Nonnull)group completionHandler:(void (^ _Nonnull)(NSArray<UAActionSchedule *> * _Nonnull))completionHandler;
< 		[Export("getSchedulesWithGroup:completionHandler:")]
< 		void GetSchedules(string group, Action<NSArray> completionHandler);
< 	}
< 
< 	// @interface UAEvent : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAEvent
< 	{
< 		// @property (readonly, copy, nonatomic) NSString * _Nonnull time;
< 		[Export ("time")]
< 		string Time { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nonnull eventID;
< 		[Export ("eventID")]
< 		string EventID { get; }
< 
< 		// @property (readonly, nonatomic, strong) NSDictionary * _Nonnull data;
< 		[Export ("data", ArgumentSemantic.Strong)]
< 		NSDictionary Data { get; }
< 
< 		// @property (readonly, nonatomic) NSString * _Nonnull eventType;
< 		[Export ("eventType")]
< 		string EventType { get; }
< 
< 		// -(BOOL)isValid;
< 		[Export ("isValid")]
< 		bool IsValid { get; }
< 	}
< 
< 	// @interface UACustomEvent : UAEvent
< 	[BaseType (typeof(UAEvent))]
< 	interface UACustomEvent
< 	{
< 		// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName;
< 		[Static]
< 		[Export ("eventWithName:")]
< 		UACustomEvent Event (string eventName);
< 
< 		// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName valueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export ("eventWithName:valueFromString:")]
< 		UACustomEvent Event (string eventName, [NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)eventWithName:(NSString * _Nonnull)eventName value:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export ("eventWithName:value:")]
< 		UACustomEvent Event (string eventName, [NullAllowed] NSNumber eventValue);
< 
< 		// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
< 		[NullAllowed, Export ("eventValue", ArgumentSemantic.Strong)]
< 		NSDecimalNumber EventValue { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nonnull eventName;
< 		[Export ("eventName")]
< 		string EventName { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable interactionID;
< 		[NullAllowed, Export ("interactionID")]
< 		string InteractionID { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable interactionType;
< 		[NullAllowed, Export ("interactionType")]
< 		string InteractionType { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable transactionID;
< 		[NullAllowed, Export ("transactionID")]
< 		string TransactionID { get; set; }
< 
< 		// -(void)setInteractionFromMessage:(UAInboxMessage * _Nonnull)message;
< 		[Export ("setInteractionFromMessage:")]
< 		void SetInteractionFromMessage (UAInboxMessage message);
< 
< 		// -(void)setBoolProperty:(BOOL)value forKey:(NSString * _Nonnull)key;
< 		[Export ("setBoolProperty:forKey:")]
< 		void SetBoolProperty (bool value, string key);
< 
< 		// -(void)setStringProperty:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
< 		[Export ("setStringProperty:forKey:")]
< 		void SetStringProperty (string value, string key);
< 
< 		// -(void)setNumberProperty:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)key;
< 		[Export ("setNumberProperty:forKey:")]
< 		void SetNumberProperty (NSNumber value, string key);
< 
< 		// -(void)setStringArrayProperty:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)key;
< 		[Export ("setStringArrayProperty:forKey:")]
< 		void SetStringArrayProperty (string[] value, string key);
< 
< 		// @property (readonly, copy, nonatomic) NSDictionary * _Nonnull properties;
< 		[Export("properties", ArgumentSemantic.Copy)]
< 		NSDictionary Properties { get; }
< 
< 		// -(void)track;
< 		[Export("track")]
< 		void Track();
< 	}
< 
< 	// @interface UAAccountEventTemplate : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAAccountEventTemplate
< 	{
< 		// +(instancetype _Nonnull)registeredTemplate;
< 		[Static]
< 		[Export("registeredTemplate")]
< 		UAAccountEventTemplate RegisteredTemplate();
< 
< 		// +(instancetype _Nonnull)registeredTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("registeredTemplateWithValueFromString:")]
< 		UAAccountEventTemplate RegisteredTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)registeredTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("registeredTemplateWithValue:")]
< 		UAAccountEventTemplate RegisteredTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
< 		[NullAllowed, Export("eventValue", ArgumentSemantic.Strong)]
< 		NSDecimalNumber EventValue { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable transactionID;
< 		[NullAllowed, Export("transactionID")]
< 		string TransactionID { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable category;
< 		[NullAllowed, Export("category")]
< 		string Category { get; set; }
< 
< 		// -(UACustomEvent * _Nonnull)createEvent;
< 		[Export("createEvent")]
< 		UACustomEvent CreateEvent ();
< 	}
< 
< 	// @interface UAMediaEventTemplate : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UAMediaEventTemplate
< 	{
< 		// +(instancetype _Nonnull)browsedTemplate;
< 		[Static]
< 		[Export("browsedTemplate")]
< 		UAMediaEventTemplate BrowsedTemplate();
< 
< 		// +(instancetype _Nonnull)starredTemplate;
< 		[Static]
< 		[Export("starredTemplate")]
< 		UAMediaEventTemplate StarredTemplate();
< 
< 		// +(instancetype _Nonnull)sharedTemplate;
< 		[Static]
< 		[Export("sharedTemplate")]
< 		UAMediaEventTemplate SharedTemplate();
< 
< 		// +(instancetype _Nonnull)sharedTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
< 		[Static]
< 		[Export("sharedTemplateWithSource:withMedium:")]
< 		UAMediaEventTemplate SharedTemplate([NullAllowed] string source, [NullAllowed] string medium);
< 
< 		// +(instancetype _Nonnull)consumedTemplate;
< 		[Static]
< 		[Export("consumedTemplate")]
< 		UAMediaEventTemplate ConsumedTemplate();
< 
< 		// +(instancetype _Nonnull)consumedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("consumedTemplateWithValueFromString:")]
< 		UAMediaEventTemplate ConsumedTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)consumedTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("consumedTemplateWithValue:")]
< 		UAMediaEventTemplate ConsumedTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// @property (copy, nonatomic) NSString * _Nullable identifier;
< 		[NullAllowed, Export("identifier")]
< 		string Identifier { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable category;
< 		[NullAllowed, Export("category")]
< 		string Category { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable type;
< 		[NullAllowed, Export("type")]
< 		string Type { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable eventDescription;
< 		[NullAllowed, Export("eventDescription")]
< 		string EventDescription { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL isFeature;
< 		[Export("isFeature")]
< 		bool IsFeature { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable author;
< 		[NullAllowed, Export("author")]
< 		string Author { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable publishedDate;
< 		[NullAllowed, Export("publishedDate")]
< 		string PublishedDate { get; set; }
< 
< 		// -(UACustomEvent * _Nonnull)createEvent;
< 		[Export("createEvent")]
< 		UACustomEvent CreateEvent ();
< 	}
< 
< 	// @interface UARetailEventTemplate : NSObject
< 	[BaseType(typeof(NSObject))]
< 	interface UARetailEventTemplate
< 	{
< 		// +(instancetype _Nonnull)browsedTemplate;
< 		[Static]
< 		[Export("browsedTemplate")]
< 		UARetailEventTemplate BrowsedTemplate();
< 
< 		// +(instancetype _Nonnull)browsedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("browsedTemplateWithValueFromString:")]
< 		UARetailEventTemplate BrowsedTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)browsedTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("browsedTemplateWithValue:")]
< 		UARetailEventTemplate BrowsedTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// +(instancetype _Nonnull)addedToCartTemplate;
< 		[Static]
< 		[Export("addedToCartTemplate")]
< 		UARetailEventTemplate AddedToCartTemplate();
< 
< 		// +(instancetype _Nonnull)addedToCartTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("addedToCartTemplateWithValueFromString:")]
< 		UARetailEventTemplate AddedToCartTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)addedToCartTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("addedToCartTemplateWithValue:")]
< 		UARetailEventTemplate AddedToCartTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// +(instancetype _Nonnull)starredProductTemplate;
< 		[Static]
< 		[Export("starredProductTemplate")]
< 		UARetailEventTemplate StarredProductTemplate();
< 
< 		// +(instancetype _Nonnull)starredProductTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("starredProductTemplateWithValueFromString:")]
< 		UARetailEventTemplate StarredProductTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)starredProductTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("starredProductTemplateWithValue:")]
< 		UARetailEventTemplate StarredProductTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// +(instancetype _Nonnull)purchasedTemplate;
< 		[Static]
< 		[Export("purchasedTemplate")]
< 		UARetailEventTemplate PurchasedTemplate();
< 
< 		// +(instancetype _Nonnull)purchasedTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("purchasedTemplateWithValueFromString:")]
< 		UARetailEventTemplate PurchasedTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)purchasedTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("purchasedTemplateWithValue:")]
< 		UARetailEventTemplate PurchasedTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// +(instancetype _Nonnull)sharedProductTemplate;
< 		[Static]
< 		[Export("sharedProductTemplate")]
< 		UARetailEventTemplate SharedProductTemplate();
< 
< 		// +(instancetype _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)eventValue;
< 		[Static]
< 		[Export("sharedProductTemplateWithValueFromString:")]
< 		UARetailEventTemplate SharedProductTemplate([NullAllowed] string eventValue);
< 
< 		// +(instancetype _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)eventValue;
< 		[Static]
< 		[Export("sharedProductTemplateWithValue:")]
< 		UARetailEventTemplate SharedProductTemplate([NullAllowed] NSNumber eventValue);
< 
< 		// +(instancetype _Nonnull)sharedProductTemplateWithSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
< 		[Static]
< 		[Export("sharedProductTemplateWithSource:withMedium:")]
< 		UARetailEventTemplate SharedProductTemplate([NullAllowed] string source, [NullAllowed] string medium);
< 
< 		// +(instancetype _Nonnull)sharedProductTemplateWithValueFromString:(NSString * _Nullable)eventValue withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
< 		[Static]
< 		[Export("sharedProductTemplateWithValueFromString:withSource:withMedium:")]
< 		UARetailEventTemplate SharedProductTemplate([NullAllowed] string eventValue, [NullAllowed] string source, [NullAllowed] string medium);
< 
< 		// +(instancetype _Nonnull)sharedProductTemplateWithValue:(NSNumber * _Nullable)eventValue withSource:(NSString * _Nullable)source withMedium:(NSString * _Nullable)medium;
< 		[Static]
< 		[Export("sharedProductTemplateWithValue:withSource:withMedium:")]
< 		UARetailEventTemplate SharedProductTemplate([NullAllowed] NSNumber eventValue, [NullAllowed] string source, [NullAllowed] string medium);
< 
< 		// @property (nonatomic, strong) NSDecimalNumber * _Nullable eventValue;
< 		[NullAllowed, Export("eventValue", ArgumentSemantic.Strong)]
< 		NSDecimalNumber EventValue { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable transactionID;
< 		[NullAllowed, Export("transactionID")]
< 		string TransactionID { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable identifier;
< 		[NullAllowed, Export("identifier")]
< 		string Identifier { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable category;
< 		[NullAllowed, Export("category")]
< 		string Category { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable eventDescription;
< 		[NullAllowed, Export("eventDescription")]
< 		string EventDescription { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable brand;
< 		[NullAllowed, Export("brand")]
< 		string Brand { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL isNewItem;
< 		[Export("isNewItem")]
< 		bool IsNewItem { get; set; }
< 
< 		// -(UACustomEvent * _Nonnull)createEvent;
< 		[Export("createEvent")]
< 		UACustomEvent CreateEvent();
< 	}
< 
< 	// @interface UARegionEvent : UAEvent
< 	[BaseType (typeof(UAEvent))]
< 	interface UARegionEvent
< 	{
< 		// @property (nonatomic, strong) UAProximityRegion * _Nullable proximityRegion;
< 		[NullAllowed, Export ("proximityRegion", ArgumentSemantic.Strong)]
< 		UAProximityRegion ProximityRegion { get; set; }
< 
< 		// @property (nonatomic, strong) UACircularRegion * _Nullable circularRegion;
< 		[NullAllowed, Export ("circularRegion", ArgumentSemantic.Strong)]
< 		UACircularRegion CircularRegion { get; set; }
< 
< 		// +(instancetype _Nullable)regionEventWithRegionID:(NSString * _Nonnull)regionID source:(NSString * _Nonnull)source boundaryEvent:(UABoundaryEvent)boundaryEvent;
< 		[Static]
< 		[Export ("regionEventWithRegionID:source:boundaryEvent:")]
< 		[return: NullAllowed]
< 		UARegionEvent RegionEvent (string regionID, string source, UABoundaryEvent boundaryEvent);
< 	}
< 
< 	// @interface UACircularRegion : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UACircularRegion
< 	{
< 		// +(instancetype _Nonnull)circularRegionWithRadius:(NSNumber * _Nonnull)radius latitude:(NSNumber * _Nonnull)latitude longitude:(NSNumber * _Nonnull)longitude;
< 		[Static]
< 		[Export ("circularRegionWithRadius:latitude:longitude:")]
< 		UACircularRegion CircularRegion (NSNumber radius, NSNumber latitude, NSNumber longitude);
< 	}
< 
< 	// @interface UAProximityRegion : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAProximityRegion
< 	{
< 		// @property (nonatomic, strong) NSNumber * _Nullable latitude;
< 		[NullAllowed, Export ("latitude", ArgumentSemantic.Strong)]
< 		NSNumber Latitude { get; set; }
< 
< 		// @property (nonatomic, strong) NSNumber * _Nullable longitude;
< 		[NullAllowed, Export ("longitude", ArgumentSemantic.Strong)]
< 		NSNumber Longitude { get; set; }
< 
< 		// @property (nonatomic, strong) NSNumber * _Nullable RSSI;
< 		[NullAllowed, Export ("RSSI", ArgumentSemantic.Strong)]
< 		NSNumber RSSI { get; set; }
< 
< 		// +(instancetype _Nullable)proximityRegionWithID:(NSString * _Nonnull)proximityID major:(NSNumber * _Nonnull)major minor:(NSNumber * _Nonnull)minor;
< 		[Static]
< 		[Export ("proximityRegionWithID:major:minor:")]
< 		[return: NullAllowed]
< 		UAProximityRegion ProximityRegion (string proximityID, NSNumber major, NSNumber minor);
< 	}
< 
< 	// @interface UAAnalytics : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAAnalytics
< 	{
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable conversionSendID;
< 		[NullAllowed, Export ("conversionSendID")]
< 		string ConversionSendID { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable conversionPushMetadata;
< 		[NullAllowed, Export ("conversionPushMetadata")]
< 		string ConversionPushMetadata { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable conversionRichPushID;
< 		[NullAllowed, Export ("conversionRichPushID")]
< 		string ConversionRichPushID { get; }
< 
< 		// @property (readonly, copy, nonatomic) NSString * _Nullable sessionID;
< 		[NullAllowed, Export ("sessionID")]
< 		string SessionID { get; }
< 
<       // @property (readonly, nonatomic, strong) NSDate * _Nonnull lastSendTime;
<       [Export ("lastSendTime", ArgumentSemantic.Strong)]
<       NSDate LastSendTime { get; }
< 
< 		// @property (getter = isEnabled, assign, nonatomic) BOOL enabled;
< 		[Export ("enabled")]
< 		bool Enabled { [Bind ("isEnabled")] get; set; }
< 
< 		// -(void)addEvent:(UAEvent * _Nonnull)event;
< 		[Export ("addEvent:")]
< 		void AddEvent (UAEvent @event);
< 
< 		// -(void)associateDeviceIdentifiers:(UAAssociatedIdentifiers * _Nonnull)associatedIdentifiers;
< 		[Export ("associateDeviceIdentifiers:")]
< 		void AssociateDeviceIdentifiers (UAAssociatedIdentifiers associatedIdentifiers);
< 
< 		// -(UAAssociatedIdentifiers * _Nonnull)currentAssociatedDeviceIdentifiers;
< 		[Export ("currentAssociatedDeviceIdentifiers")]
< 		UAAssociatedIdentifiers CurrentAssociatedDeviceIdentifiers ();
< 
< 		// -(void)trackScreen:(NSString * _Nullable)screen;
< 		[Export ("trackScreen:")]
< 		void TrackScreen ([NullAllowed] string screen);
< 
<       // -(void)scheduleUpload;
<       [Export ("scheduleUpload")]
<       void ScheduleUpload ();
< 	}
< 
< 	// @interface UAAssociatedIdentifiers : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAAssociatedIdentifiers
< 	{
< 		// +(instancetype _Nonnull)identifiers;
< 		[Static]
< 		[Export ("identifiers")]
< 		UAAssociatedIdentifiers Identifiers ();
< 
< 		// +(instancetype _Nonnull)identifiersWithDictionary:(NSDictionary<NSString *,NSString *> * _Nonnull)identifiers;
< 		[Static]
< 		[Export ("identifiersWithDictionary:")]
< 		UAAssociatedIdentifiers Identifiers (NSDictionary<NSString, NSString> identifiers);
< 
< 		// @property (copy, nonatomic) NSString * _Nullable advertisingID;
< 		[NullAllowed, Export ("advertisingID")]
< 		string AdvertisingID { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable vendorID;
< 		[NullAllowed, Export ("vendorID")]
< 		string VendorID { get; set; }
< 
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull allIDs;
< 		[Export ("allIDs")]
< 		NSDictionary AllIDs { get; }
< 
< 		// -(void)setIdentifier:(NSString * _Nullable)identifier forKey:(NSString * _Nonnull)key;
< 		[Export ("setIdentifier:forKey:")]
< 		void SetIdentifier ([NullAllowed] string identifier, string key);
< 
< 		// @property (assign, nonatomic) BOOL advertisingTrackingEnabled;
< 		[Export ("advertisingTrackingEnabled")]
< 		bool AdvertisingTrackingEnabled { get; set; }
< 	}
< 
< 	// @interface UADefaultMessageCenter : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UADefaultMessageCenter
< 	{
< 		// @property (nonatomic, strong) NSString * title;
< 		[Export ("title", ArgumentSemantic.Strong)]
< 		string Title { get; set; }
< 
< 		// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
< 		[Export ("style", ArgumentSemantic.Strong)]
< 		UADefaultMessageCenterStyle Style { get; set; }
< 
< 		// -(void)display:(BOOL)animated;
< 		[Export ("display:")]
< 		void Display (bool animated);
< 
< 		// -(void)display;
< 		[Export ("display")]
< 		void Display ();
< 
< 		// -(void)displayMessage:(UAInboxMessage *)message animated:(BOOL)animated;
< 		[Export ("displayMessage:animated:")]
< 		void DisplayMessage (UAInboxMessage message, bool animated);
< 
< 		// -(void)displayMessage:(UAInboxMessage *)message;
< 		[Export ("displayMessage:")]
< 		void DisplayMessage (UAInboxMessage message);
< 
< 		// -(void)dismiss:(BOOL)animated;
< 		[Export ("dismiss:")]
< 		void Dismiss (bool animated);
< 
< 		// -(void)dismiss;
< 		[Export ("dismiss")]
< 		void Dismiss ();
< 
< 		// @property (nonatomic, strong) NSPredicate * filter;
< 		[Export ("filter", ArgumentSemantic.Strong)]
< 		NSPredicate Filter { get; set; }
< 	}
< 
< 	// @interface UADefaultMessageCenterListCell : UITableViewCell
< 	[BaseType (typeof(UITableViewCell))]
< 	interface UADefaultMessageCenterListCell
< 	{
< 		// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
< 		[Export ("style", ArgumentSemantic.Strong)]
< 		UADefaultMessageCenterStyle Style { get; set; }
< 
< 		// @property (nonatomic, weak) UILabel * _Nullable date __attribute__((iboutlet));
< 		[NullAllowed, Export ("date", ArgumentSemantic.Weak)]
< 		UILabel Date { get; set; }
< 
< 		// @property (nonatomic, weak) UILabel * _Nullable title __attribute__((iboutlet));
< 		[NullAllowed, Export ("title", ArgumentSemantic.Weak)]
< 		UILabel Title { get; set; }
< 
< 		// @property (nonatomic, weak) UIView * _Nullable unreadIndicator __attribute__((iboutlet));
< 		[NullAllowed, Export ("unreadIndicator", ArgumentSemantic.Weak)]
< 		UIView UnreadIndicator { get; set; }
< 
< 		// @property (nonatomic, weak) UIImageView * _Nullable listIconView __attribute__((iboutlet));
< 		[NullAllowed, Export ("listIconView", ArgumentSemantic.Weak)]
< 		UIImageView ListIconView { get; set; }
< 
< 		// -(void)setData:(UAInboxMessage *)message;
< 		[Export ("setData:")]
< 		void SetData (UAInboxMessage message);
< 	}
< 
< 	// @interface UADefaultMessageCenterListViewController : UIViewController <UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate, UISplitViewControllerDelegate>
< 	[BaseType (typeof(UIViewController))]
< 	interface UADefaultMessageCenterListViewController : IUITableViewDelegate, IUITableViewDataSource, IUIScrollViewDelegate, IUISplitViewControllerDelegate
< 	{
< 		// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
< 		[Export ("style", ArgumentSemantic.Strong)]
< 		UADefaultMessageCenterStyle Style { get; set; }
< 
< 		// @property (copy, nonatomic) void (^closeBlock)(BOOL);
< 		[Export ("closeBlock", ArgumentSemantic.Copy)]
< 		Action<bool> CloseBlock { get; set; }
< 
< 		// -(void)displayMessage:(UAInboxMessage *)message;
< 		[Export ("displayMessage:")]
< 		void DisplayMessage (UAInboxMessage message);
< 
< 		// @property (nonatomic, strong) NSPredicate * filter;
< 		[Export ("filter", ArgumentSemantic.Strong)]
< 		NSPredicate Filter { get; set; }
< 	}
< 
< 	// @interface UADefaultMessageCenterMessageViewController : UIViewController <UIWebViewDelegate, UARichContentWindow>
< 	[BaseType (typeof(UIViewController))]
< 	interface UADefaultMessageCenterMessageViewController : IUIWebViewDelegate, UARichContentWindow
< 	{
< 		// @property (nonatomic, strong) UAInboxMessage * message;
< 		[Export ("message", ArgumentSemantic.Strong)]
< 		UAInboxMessage Message { get; set; }
< 
< 		// @property (copy, nonatomic) void (^closeBlock)(BOOL);
< 		[Export ("closeBlock", ArgumentSemantic.Copy)]
< 		Action<bool> CloseBlock { get; set; }
< 
< 		// -(void)loadMessageAtIndex:(NSUInteger)index;
< 		[Export ("loadMessageAtIndex:")]
< 		void LoadMessageAtIndex (nuint index);
< 
< 		// -(void)loadMessageForID:(NSString *)mid;
< 		[Export ("loadMessageForID:")]
< 		void LoadMessageForID (string mid);
< 
< 		// @property (nonatomic, strong) NSPredicate * filter;
< 		[Export ("filter", ArgumentSemantic.Strong)]
< 		NSPredicate Filter { get; set; }
< 	}
< 
< 	// @interface UADefaultMessageCenterSplitViewController : UISplitViewController
< 	[BaseType (typeof(UISplitViewController))]
< 	interface UADefaultMessageCenterSplitViewController
< 	{
< 		// @property (nonatomic, strong) UADefaultMessageCenterStyle * style;
< 		[Export ("style", ArgumentSemantic.Strong)]
< 		UADefaultMessageCenterStyle Style { get; set; }
< 
< 		// @property (readonly, nonatomic) UADefaultMessageCenterListViewController * listViewController;
< 		[Export ("listViewController")]
< 		UADefaultMessageCenterListViewController ListViewController { get; }
< 
< 		// @property (nonatomic, strong) NSPredicate * filter;
< 		[Export ("filter", ArgumentSemantic.Strong)]
< 		NSPredicate Filter { get; set; }
< 	}
< 
< 	// @interface UADefaultMessageCenterStyle : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UADefaultMessageCenterStyle
< 	{
< 		// @property (nonatomic, strong) UIFont * titleFont;
< 		[Export ("titleFont", ArgumentSemantic.Strong)]
< 		UIFont TitleFont { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * titleColor;
< 		[Export ("titleColor", ArgumentSemantic.Strong)]
< 		UIColor TitleColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * tintColor;
< 		[Export ("tintColor", ArgumentSemantic.Strong)]
< 		UIColor TintColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * navigationBarColor;
< 		[Export ("navigationBarColor", ArgumentSemantic.Strong)]
< 		UIColor NavigationBarColor { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL navigationBarOpaque;
< 		[Export ("navigationBarOpaque")]
< 		bool NavigationBarOpaque { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * listColor;
< 		[Export ("listColor", ArgumentSemantic.Strong)]
< 		UIColor ListColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * refreshTintColor;
< 		[Export ("refreshTintColor", ArgumentSemantic.Strong)]
< 		UIColor RefreshTintColor { get; set; }
< 
< 		// @property (assign, nonatomic) BOOL iconsEnabled;
< 		[Export ("iconsEnabled")]
< 		bool IconsEnabled { get; set; }
< 
< 		// @property (nonatomic, strong) UIImage * placeholderIcon;
< 		[Export ("placeholderIcon", ArgumentSemantic.Strong)]
< 		UIImage PlaceholderIcon { get; set; }
< 
< 		// @property (nonatomic, strong) UIFont * cellTitleFont;
< 		[Export ("cellTitleFont", ArgumentSemantic.Strong)]
< 		UIFont CellTitleFont { get; set; }
< 
< 		// @property (nonatomic, strong) UIFont * cellDateFont;
< 		[Export ("cellDateFont", ArgumentSemantic.Strong)]
< 		UIFont CellDateFont { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellColor;
< 		[Export ("cellColor", ArgumentSemantic.Strong)]
< 		UIColor CellColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellHighlightedColor;
< 		[Export ("cellHighlightedColor", ArgumentSemantic.Strong)]
< 		UIColor CellHighlightedColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellTitleColor;
< 		[Export ("cellTitleColor", ArgumentSemantic.Strong)]
< 		UIColor CellTitleColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellTitleHighlightedColor;
< 		[Export ("cellTitleHighlightedColor", ArgumentSemantic.Strong)]
< 		UIColor CellTitleHighlightedColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellDateColor;
< 		[Export ("cellDateColor", ArgumentSemantic.Strong)]
< 		UIColor CellDateColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellDateHighlightedColor;
< 		[Export ("cellDateHighlightedColor", ArgumentSemantic.Strong)]
< 		UIColor CellDateHighlightedColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellSeparatorColor;
< 		[Export ("cellSeparatorColor", ArgumentSemantic.Strong)]
< 		UIColor CellSeparatorColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * cellTintColor;
< 		[Export ("cellTintColor", ArgumentSemantic.Strong)]
< 		UIColor CellTintColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * unreadIndicatorColor;
< 		[Export ("unreadIndicatorColor", ArgumentSemantic.Strong)]
< 		UIColor UnreadIndicatorColor { get; set; }
< 
< 
< 		// +(instancetype)style;
< 		[Static]
< 		[Export ("style")]
< 		UADefaultMessageCenterStyle Style ();
< 
< 		// +(instancetype)styleWithContentsOfFile:(NSString *)path;
< 		[Static]
< 		[Export ("styleWithContentsOfFile:")]
< 		UADefaultMessageCenterStyle StyleWithContentsOfFile (string path);
< 	}
< 
< 
< 	// @protocol UAInAppMessageControllerDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UAInAppMessageControllerDelegate
< 	{
< 		// @required -(UIView * _Nonnull)viewForMessage:(UAInAppMessage * _Nonnull)message parentView:(UIView * _Nonnull)parentView;
< 		[Abstract]
< 		[Export ("viewForMessage:parentView:")]
< 		UIView View (UAInAppMessage message, UIView parentView);
< 
< 		// @required -(UIControl * _Nonnull)messageView:(UIView * _Nonnull)messageView buttonAtIndex:(NSUInteger)index;
< 		[Abstract]
< 		[Export ("messageView:buttonAtIndex:")]
< 		UIControl Button (UIView messageView, nuint index);
< 
< 		// @optional -(void)messageView:(UIView * _Nonnull)messageView didChangeTouchState:(BOOL)touchDown;
< 		[Export ("messageView:didChangeTouchState:")]
< 		void DidChangeTouchState (UIView messageView, bool touchDown);
< 
< 		// @optional -(void)messageView:(UIView * _Nonnull)messageView animateInWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
< 		[Export ("messageView:animateInWithParentView:completionHandler:")]
< 		void AnimateIn (UIView messageView, UIView parentView, Action completionHandler);
< 
< 		// @optional -(void)messageView:(UIView * _Nonnull)messageView animateOutWithParentView:(UIView * _Nonnull)parentView completionHandler:(void (^ _Nonnull)(void))completionHandler;
< 		[Export ("messageView:animateOutWithParentView:completionHandler:")]
< 		void AnimateOut (UIView messageView, UIView parentView, Action completionHandler);
< 	}
< 
< 	// @protocol UAInAppMessagingDelegate <NSObject>
< 	[Protocol, Model]
< 	[BaseType (typeof(NSObject))]
< 	interface UAInAppMessagingDelegate
< 	{
< 		// @optional -(void)pendingMessageAvailable:(UAInAppMessage * _Nonnull)message;
< 		[Export ("pendingMessageAvailable:")]
< 		void PendingMessageAvailable (UAInAppMessage message);
< 
< 		// @optional -(void)messageWillBeDisplayed:(UAInAppMessage * _Nonnull)message;
< 		[Export ("messageWillBeDisplayed:")]
< 		void MessageWillBeDisplayed (UAInAppMessage message);
< 	}
< 
< 	// @interface UAInAppMessaging : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInAppMessaging
< 	{
< 		// -(void)deletePendingMessage:(UAInAppMessage * _Nonnull)message;
< 		[Export ("deletePendingMessage:")]
< 		void DeletePendingMessage (UAInAppMessage message);
< 
< 		// -(void)displayMessage:(UAInAppMessage * _Nonnull)message;
< 		[Export ("displayMessage:")]
< 		void DisplayMessage (UAInAppMessage message);
< 
< 		// -(void)displayPendingMessage;
< 		[Export ("displayPendingMessage")]
< 		void DisplayPendingMessage ();
< 
< 		// @property (copy, nonatomic) UAInAppMessage * _Nullable pendingMessage;
< 		[NullAllowed, Export ("pendingMessage", ArgumentSemantic.Copy)]
< 		UAInAppMessage PendingMessage { get; set; }
< 
< 		// @property (getter = isAutoDisplayEnabled, assign, nonatomic) BOOL autoDisplayEnabled;
< 		[Export ("autoDisplayEnabled")]
< 		bool AutoDisplayEnabled { [Bind ("isAutoDisplayEnabled")] get; set; }
< 
< 		// @property (nonatomic, strong) UIFont * _Nonnull font;
< 		[Export ("font", ArgumentSemantic.Strong)]
< 		UIFont Font { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * _Nonnull defaultPrimaryColor;
< 		[Export ("defaultPrimaryColor", ArgumentSemantic.Strong)]
< 		UIColor DefaultPrimaryColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * _Nonnull defaultSecondaryColor;
< 		[Export ("defaultSecondaryColor", ArgumentSemantic.Strong)]
< 		UIColor DefaultSecondaryColor { get; set; }
< 
< 		// @property (assign, nonatomic) NSTimeInterval displayDelay;
< 		[Export ("displayDelay")]
< 		double DisplayDelay { get; set; }
< 
< 		// @property (getter = isDisplayASAPEnabled, assign, nonatomic) BOOL displayASAPEnabled;
< 		[Export ("displayASAPEnabled")]
< 		bool DisplayASAPEnabled { [Bind ("isDisplayASAPEnabled")] get; set; }
< 
< 		[Wrap ("WeakMessagingDelegate")]
< 		[NullAllowed]
< 		UAInAppMessagingDelegate MessagingDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UAInAppMessagingDelegate> _Nullable messagingDelegate;
< 		[NullAllowed, Export ("messagingDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakMessagingDelegate { get; set; }
< 
< 		[Wrap ("WeakMessageControllerDelegate")]
< 		[NullAllowed]
< 		UAInAppMessageControllerDelegate MessageControllerDelegate { get; set; }
< 
< 		// @property (nonatomic, weak) id<UAInAppMessageControllerDelegate> _Nullable messageControllerDelegate;
< 		[NullAllowed, Export ("messageControllerDelegate", ArgumentSemantic.Assign)]
< 		NSObject WeakMessageControllerDelegate { get; set; }
< 	}
< 
< 	// @interface UAInAppMessage : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInAppMessage
< 	{
< 		// +(instancetype _Nonnull)message;
< 		[Static]
< 		[Export ("message")]
< 		UAInAppMessage Message ();
< 
< 		// +(instancetype _Nonnull)messageWithPayload:(NSDictionary * _Nonnull)payload;
< 		[Static]
< 		[Export ("messageWithPayload:")]
< 		UAInAppMessage Message (NSDictionary payload);
< 
< 		// -(BOOL)isEqualToMessage:(UAInAppMessage * _Nullable)message;
< 		[Export ("isEqualToMessage:")]
< 		bool IsEqual ([NullAllowed] UAInAppMessage message);
< 
< 		// @property (readonly, nonatomic) NSDictionary * _Nonnull payload;
< 		[Export ("payload")]
< 		NSDictionary Payload { get; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable identifier;
< 		[NullAllowed, Export ("identifier")]
< 		string Identifier { get; set; }
< 
< 		// @property (nonatomic, strong) NSDate * _Nonnull expiry;
< 		[Export ("expiry", ArgumentSemantic.Strong)]
< 		NSDate Expiry { get; set; }
< 
< 		// @property (copy, nonatomic) NSDictionary * _Nullable extra;
< 		[NullAllowed, Export ("extra", ArgumentSemantic.Copy)]
< 		NSDictionary Extra { get; set; }
< 
< 		// @property (assign, nonatomic) UAInAppMessageDisplayType displayType;
< 		[Export ("displayType", ArgumentSemantic.Assign)]
< 		UAInAppMessageDisplayType DisplayType { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable alert;
< 		[NullAllowed, Export ("alert")]
< 		string Alert { get; set; }
< 
< 		// @property (assign, nonatomic) UAInAppMessagePosition position;
< 		[Export ("position", ArgumentSemantic.Assign)]
< 		UAInAppMessagePosition Position { get; set; }
< 
< 		// @property (assign, nonatomic) NSTimeInterval duration;
< 		[Export ("duration")]
< 		double Duration { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * _Nullable primaryColor;
< 		[NullAllowed, Export ("primaryColor", ArgumentSemantic.Strong)]
< 		UIColor PrimaryColor { get; set; }
< 
< 		// @property (nonatomic, strong) UIColor * _Nullable secondaryColor;
< 		[NullAllowed, Export ("secondaryColor", ArgumentSemantic.Strong)]
< 		UIColor SecondaryColor { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable buttonGroup;
< 		[NullAllowed, Export ("buttonGroup")]
< 		string ButtonGroup { get; set; }
< 
< 		// @property (copy, nonatomic) NSDictionary * _Nullable buttonActions;
< 		[NullAllowed, Export ("buttonActions", ArgumentSemantic.Copy)]
< 		NSDictionary ButtonActions { get; set; }
< 
< 		// @property (copy, nonatomic) NSDictionary * _Nullable onClick;
< 		[NullAllowed, Export ("onClick", ArgumentSemantic.Copy)]
< 		NSDictionary OnClick { get; set; }
< 
< 		// @property (readonly, nonatomic) UIUserNotificationActionContext notificationActionContext;
< 		[Export ("notificationActionContext")]
< 		UIUserNotificationActionContext NotificationActionContext { get; }
< 
< 		// @property (readonly, nonatomic) NSArray * _Nullable notificationActions;
< 		[NullAllowed, Export ("notificationActions")]
< 		UANotificationAction[] NotificationActions { get; }
< 
< 		// @property (readonly, nonatomic) UANotificationCategory * _Nullable buttonCategory;
< 		[NullAllowed, Export ("buttonCategory")]
< 		UANotificationCategory ButtonCategory { get; }
< 
< 		// @property (readonly, nonatomic) NSArray * _Nullable buttonActionBindings;
< 		[NullAllowed, Export ("buttonActionBindings")]
< 		UAInAppMessageButtonActionBinding[] ButtonActionBindings { get; }
< 	}
< 
< 	// @interface UAInAppMessageButtonActionBinding : NSObject
< 	[BaseType (typeof(NSObject))]
< 	interface UAInAppMessageButtonActionBinding
< 	{
< 		// @property (copy, nonatomic) NSString * _Nullable title;
< 		[NullAllowed, Export ("title")]
< 		string Title { get; set; }
< 
< 		// @property (copy, nonatomic) NSString * _Nullable identifier;
< 		[NullAllowed, Export ("identifier")]
< 		string Identifier { get; set; }
< 
< 		// @property (copy, nonatomic) NSDictionary * _Nullable actions;
< 		[NullAllowed, Export ("actions", ArgumentSemantic.Copy)]
< 		NSDictionary Actions { get; set; }
< 
< 		// @property (assign, nonatomic) UASituation situation;
< 		[Export ("situation", ArgumentSemantic.Assign)]
< 		UASituation Situation { get; set; }
< 	}
< 
< 	// @interface UALandingPageOverlayController : NSObject <UIWebViewDelegate, UARichContentWindow>
< 	[BaseType (typeof(NSObject))]
< 	interface UALandingPageOverlayController : IUIWebViewDelegate, UARichContentWindow
< 	{
< 		// +(void)showURL:(NSURL * _Nonnull)url withHeaders:(NSDictionary * _Nullable)headers;
< 		[Static]
< 		[Export ("showURL:withHeaders:")]
< 		void ShowURL (NSUrl url, [NullAllowed] NSDictionary headers);
< 
< 		// +(void)showMessage:(UAInboxMessage * _Nonnull)message withHeaders:(NSDictionary * _Nullable)headers;
< 		[Static]
< 		[Export ("showMessage:withHeaders:")]
< 		void ShowMessage (UAInboxMessage message, [NullAllowed] NSDictionary headers);
< 
< 		// +(void)showMessage:(UAInboxMessage * _Nonnull)message;
< 		[Static]
< 		[Export ("showMessage:")]
< 		void ShowMessage (UAInboxMessage message);
< 
< 		// +(void)closeAll:(BOOL)animated;
< 		[Static]
< 		[Export ("closeAll:")]
< 		void CloseAll (bool animated);
< 	}
---
> [Static]
> [Verify (ConstantsInterfaceAssociation)]
> partial interface Constants
> {
> 	// extern double AirshipKitVersionNumber;
> 	[Field ("AirshipKitVersionNumber", "__Internal")]
> 	double AirshipKitVersionNumber { get; }
> 
> 	// extern const unsigned char [] AirshipKitVersionString;
> 	[Field ("AirshipKitVersionString", "__Internal")]
> 	byte[] AirshipKitVersionString { get; }
